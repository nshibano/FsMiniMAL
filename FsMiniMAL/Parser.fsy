/* After modifying this file, run GenParser.bat to generate Parser.fs. */
%{
open FsMiniMAL
open Syntax
open ParseHelper
%}

/* Tokens */

/* Identifiers, prefixes, infixes */
%token <string> IDENT
%token <string> QUOTED
%token <string> INFIX0
%token <string> INFIX1
%token <string> INFIX2
%token <string> SUBTRACTIVE
%token <string> INFIX3
%token <string> INFIX4

/* Literals */
%token <string> INT
%token <char> CHAR
%token <float> FLOAT
%token <string> STRING

/* The end-of-file marker */
%token EOF

/* Special symbols */
%token EQUAL                       /* =   */
%token EQUALEQUAL                  /* ==  */
%token AMPERSANDAMPERSAND          /* &&  */
%token LPAREN                      /* (   */
%token RPAREN                      /* )   */
%token STAR                        /* *   */
%token COMMA                       /* ,   */
%token MINUSGREATER                /* ->  */
%token DOT                         /* .   */
%token COLON                       /* :   */
%token COLONCOLON                  /* ::  */
%token SEMI                        /* ;   */
%token LBRACKET                    /* [   */
%token LBRACKETBAR                 /* [|  */
%token LESSMINUS                   /* <-  */
%token COLONEQUAL                  /* :=  */
%token RBRACKET                    /* ]   */
%token UNDERSCORE                  /* _   */
%token LBRACE                      /* {   */
%token BAR                         /* |   */
%token BARBAR                      /* ||  */
%token BARRBRACKET                 /* |]  */
%token RBRACE                      /* }   */
%token EXCLAMATION                 /* !   */
%token TILDETILDETILDE             /* ~~~ */

/* Keywords */
%token AND
%token AS
%token BEGIN
%token CASE
%token CATCH
%token WHEN
%token DO
%token DOWNTO
%token ELSE
%token END
%token EXCEPTION
%token FOR
%token FN
%token FUN
%token FUNCT
%token HIDE
%token HIDEVAL
%token IF
%token IN
%token MUTABLE
%token OF
%token THEN
%token TO
%token TRY
%token TYPE
%token VAL
%token VAR
%token WHILE
%token WITH

/* Precedences and associativities. Lower precedences first. */

%nonassoc prec_if
%nonassoc ELSE BAR
%right COLONEQUAL
%left  COMMA
%left  BARBAR
%left  AMPERSANDAMPERSAND
%left  INFIX0 EQUAL EQUALEQUAL          /* comparisons */
%right INFIX1                           /* concatenations */
%right COLONCOLON                       /* cons */
%left  INFIX2 SUBTRACTIVE               /* additives, subtractives */
%left  STAR INFIX3                      /* multiplicatives */
%right INFIX4                           /* exponentiations */
%nonassoc prec_uminus
%left  DOT

/* Entry point */

%start Program
%type <Syntax.command list * System.Collections.Generic.IDictionary<string, obj>> Program

%%

Program : 
    | Command_list Opt_semi EOF { (List.rev $1, parseState.ParserLocalStore) }
    | EOF                       { ([], parseState.ParserLocalStore) }

Command_list :
    | Command_list Opt_semi Definition { $3 :: $1 }
    | Command_list SEMI Expression     { make_cmd parseState (SCexpr $3) :: $1 }
    | Definition                       { $1 :: [] }
    | Expression                       { make_cmd parseState (SCexpr $1) :: [] }

Opt_semi :
    | /* Empty */ { () }
    | SEMI        { () }

Definition :
    | VAL Value_def          { make_cmd parseState (SCval $2) }
    | FUN Function_def       { make_cmd parseState (SCfun $2) }
    | VAR Var_def            { make_cmd parseState (SCvar $2) }
    | TYPE Typedef_list      { make_cmd parseState (SCtype $2) }
    | HIDE IDENT             { make_cmd parseState (SChide ($2, get_term_loc parseState 2)) }
    | HIDEVAL IDENT          { make_cmd parseState (SChideval $2) }
    | EXCEPTION Constr1_decl { make_cmd parseState (SCexn $2) }

Value_def :
    | Pattern Expression_def AND Value_def { ($1,$2) :: $4 }
    | Pattern Expression_def               { [$1,$2] }

Function_def :
    | IDENT Equation AND Function_def { ($1,$2) :: $4 }
    | IDENT Equation                  { ($1,$2) :: [] }

Var_def :
    | IDENT Expression_def AND Var_def { ($1,$2) :: $4 }
    | IDENT Expression_def             { [$1,$2] }

Equation :
    | Pattern_0_list Expression_def { make_expr parseState (SEfn ($1, $2)) }

Expression_def :
    | COLON Type_expr EQUAL Expression { make_expr parseState (SEtype ($4,$2)) }
    | EQUAL Expression                 { $2 }

/* Expressions */

Expression :
    | FN Pattern_0_list MINUSGREATER Expression %prec prec_if                          { make_expr parseState (SEfn ($2, $4)) }
    | IDENT LESSMINUS Expression %prec prec_if                                         { make_expr parseState (SEset ($1, $3)) }
    | Expression_2 DOT LBRACKET Expression RBRACKET LESSMINUS Expression %prec prec_if { make_ternop parseState ".[]<-" $1 $4 $7 }
    | Expression_2 DOT IDENT LESSMINUS Expression %prec prec_if                        { make_expr parseState (SEsetfield ($1, $3, $5)) }
    | IF Expression THEN Expression ELSE Expression %prec prec_if                      { make_expr parseState (SEifthenelse ($2, $4, Some $6)) }
    | IF Expression THEN Expression %prec prec_if                                      { make_expr parseState (SEifthenelse ($2, $4, None)) }
    | WHILE Expression DO Expression %prec prec_if                                     { make_expr parseState (SEwhile ($2, $4)) }
    | FOR IDENT EQUAL Expression Dir_flag Expression DO Expression %prec prec_if       { make_expr parseState (SEfor ($2, $4, $5, $6, $8)) }
    | CASE Expression OF Opt_bar Matching_list                                         { make_expr parseState (SEcase ($2, $5)) }
    | TRY Expression CATCH Opt_bar Matching_list                                       { make_expr parseState (SEtry ($2, $5)) }
    | FUNCT Matching_list                                                              { make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), $2)))) }
    | SUBTRACTIVE Expression %prec prec_uminus                                         { make_minus_expr parseState $1 $2 }
    | TILDETILDETILDE Expression %prec prec_uminus                                     { make_unop parseState "~~~" $2 }
    | Expression INFIX4 Expression                                                     { make_binop parseState $2 $1 $3 }
    | Expression INFIX3 Expression                                                     { make_binop parseState $2 $1 $3 }
    | Expression INFIX2 Expression                                                     { make_binop parseState $2 $1 $3 }
    | Expression SUBTRACTIVE Expression                                                { make_binop parseState $2 $1 $3 }
    | Expression INFIX1 Expression                                                     { make_binop parseState $2 $1 $3 }
    | Expression INFIX0 Expression                                                     { make_binop parseState $2 $1 $3 }
    | Expression EQUAL Expression                                                      { make_binop parseState "=" $1 $3 }
    | Expression EQUALEQUAL Expression                                                 { make_binop parseState "==" $1 $3 }
    | Expression STAR Expression                                                       { make_binop parseState "*" $1 $3 }
    | Expression AMPERSANDAMPERSAND Expression                                         { make_binop parseState "&&" $1 $3 }
    | Expression BARBAR Expression                                                     { make_binop parseState "||" $1 $3 }
    | Expression COLONCOLON Expression                                                 { make_unop parseState "::" (make_expr parseState (SEtuple [$1;$3])) }
    | Expression COLONEQUAL Expression                                                 { make_binop parseState ":=" $1 $3 }
    | Expression_1                                                                     { $1 }

Expression_1 :
    | Expression_2_list { match $1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) }

Expression_2_list :
    | Expression_2 Expression_2_list { $1 :: $2 }
    | Expression_2                   { [$1] }

Expression_2:
    | IDENT                                           { make_expr parseState (SEid $1) }
    | STRING                                          { make_string parseState $1 }
    | INT                                             { make_expr parseState (SEint $1) }
    | CHAR                                            { make_expr parseState (SEchar $1) }
    | FLOAT                                           { make_expr parseState (SEfloat $1) }
    | LPAREN Expression_comma_list RPAREN             { match $2 with [e] -> e | l -> make_expr parseState (SEtuple l) }
    | LPAREN Infx RPAREN                              { make_ident parseState $2 }
    | LBRACKETBAR Expression_comma_list BARRBRACKET   { make_expr parseState (SEarray $2) }
    | LBRACKET Expression_comma_list RBRACKET         { List.foldBack (fun a l -> make_unop parseState "::" (make_expr parseState (SEtuple [a;l]))) $2 (make_ident parseState "[]") }
    | LBRACE Label_expr_list RBRACE                   { make_expr parseState (SErecord (None, $2)) }
    | LBRACE Expression_1 WITH Label_expr_list RBRACE { make_expr parseState (SErecord (Some $2, $4)) }
    | EXCLAMATION Expression_2 %prec prec_uminus      { make_unop parseState "!" $2 }
    | Expression_2 DOT IDENT                          { make_expr parseState (SEgetfield ($1, $3)) }
    | Expression_2 DOT LBRACKET Expression RBRACKET   { make_binop parseState ".[]" $1 $4 }
    | BEGIN Command_list Opt_semi END                 { make_expr parseState (SEbegin (List.rev $2)) }
    | BEGIN END                                       { make_expr parseState (SEbegin []) }

Matching : 
    | Pattern Opt_when_clause MINUSGREATER Expression %prec prec_if { ($1, $2, $4) }

Matching_list :
    | Matching BAR Matching_list { $1 :: $3 }
    | Matching %prec prec_if  { [$1] }

Expression_comma_list :
    | Expr_may_type COMMA Expression_comma_list { $1 :: $3 }
    | Expr_may_type                             { [$1] }
    | /* empty */                               { [] }

Expr_may_type :
      | Expression COLON Type_expr { make_expr parseState (SEtype ($1, $3)) }
      | Expression                 { $1 }

Label_expr_list :
    | IDENT EQUAL Expression COMMA Label_expr_list { ($1, $3) :: $5 }
    | IDENT EQUAL Expression                       { [$1, $3] }

Dir_flag :
    | TO     { dirflag.Upto }
    | DOWNTO { dirflag.Downto }

Opt_bar :
    | /* Empty */ { () }
    | BAR         { () }

Opt_when_clause :
    | /* empty */     { None }
    | WHEN Expression { Some $2 }

/* Patterns */

Pattern_0 :
    | IDENT                                       { make_pat parseState (SPid $1) }
    | UNDERSCORE                                  { make_pat parseState SPany }
    | STRING                                      { make_pat_string parseState $1 }
    | INT                                         { make_pat parseState (SPint $1) }
    | CHAR                                        { make_pat parseState (SPchar $1) }
    | FLOAT                                       { make_pat parseState (SPfloat $1) }
    | SUBTRACTIVE INT                             { make_pat parseState (SPint(make_minus $2)) }
    | SUBTRACTIVE FLOAT                           { make_pat parseState (SPfloat(- $2)) }
    | LPAREN Pattern_comma_list RPAREN            { match $2 with [pat] -> pat | l -> make_pat parseState (SPtuple l) }
    | LBRACKET Pattern_comma_list RBRACKET        { List.foldBack (make_cons_pat parseState) $2 { sp_desc = SPid "[]" ; sp_loc = get_loc parseState } }
    | LBRACKETBAR Pattern_comma_list BARRBRACKET  { make_pat parseState (SParray $2) }
    | LBRACE Label_pattern_list RBRACE            { make_pat parseState (SPrecord $2) }

Pattern_0_list :
    | Pattern_0 Pattern_0_list { $1 :: $2 }
    | Pattern_0                { $1 :: [] }

Pattern_1 :
    | Pattern_0       { $1 }
    | IDENT Pattern_0 { make_pat parseState (SPapply ($1, $2)) }

Pattern_2 :
    | Pattern_1                      { $1 }
    | Pattern_1 COLONCOLON Pattern_2 { make_cons_pat parseState $1 $3 }

Pattern_3 :
    | Pattern_2               { $1 }
    | Pattern_3 BAR Pattern_2 { make_pat parseState (SPor($1, $3)) }

Pattern :
    | Pattern_3          { $1 }
    | Pattern_3 AS IDENT { make_pat parseState (SPas ($1, $3)) }

Label_pattern_list :
    | IDENT EQUAL Pattern COMMA Label_pattern_list { ($1, $3) :: $5 }
    | IDENT EQUAL Pattern                          { ($1, $3) :: [] }

Pattern_comma_list :
    | Pattern_may_type COMMA Pattern_comma_list { $1 :: $3 }
    | Pattern_may_type                          { $1 :: [] }
    | /* empty */                               { [] }

Pattern_may_type :
    | Pattern COLON Type_expr { make_pat parseState (SPtype ($1, $3)) }
    | Pattern                 { $1 }

Infx :
    | INFIX0             { $1 }
    | INFIX1             { $1 }    
    | INFIX2             { $1 }
    | INFIX3             { $1 }    
    | INFIX4             { $1 }
    | STAR               { "*" }   
    | EQUAL              { "=" }   
    | SUBTRACTIVE        { $1 }
    | AMPERSANDAMPERSAND { "&&" }   
    | BARBAR             { "||" }
    | EQUALEQUAL         { "==" }
    | COLONEQUAL         { ":=" }
    | EXCLAMATION        { "!" }

/* Type expressions */

Type_expr :
    | Type_star_list MINUSGREATER Type_expr { make_typ parseState (STarrow(type_expr_of_type_star_list parseState $1, $3)) }
    | Type_star_list                        { type_expr_of_type_star_list parseState $1 }

Type_star_list :
    | Type_star_list STAR Simple_type { $3 :: $1 }
    | Simple_type                     { [$1] }

Simple_type :
    | QUOTED                                              { make_typ parseState (STvar $1) }
    | IDENT                                               { mark_as_typename parseState 1; make_typ parseState (STconstr($1, [], get_term_loc parseState 1)) }
    | Simple_type IDENT                                   { mark_as_typename parseState 2; make_typ parseState (STconstr($2, [$1], get_term_loc parseState 2)) }
    | LPAREN Type_expr COMMA Type_comma_list RPAREN IDENT { mark_as_typename parseState 6; make_typ parseState (STconstr($6, $2 :: $4, get_term_loc parseState 6)) }
    | LPAREN Type_expr RPAREN                             { $2 }

Type_comma_list :
    | Type_expr COMMA Type_comma_list { $1 :: $3 }
    | Type_expr                       { [$1] }

/* Declarations */

Typedef_list :
    | Typedef AND Typedef_list { $1 :: $3 }
    | Typedef                  { [$1] }

Typedef :
    | Type_params IDENT Typedef_decl { mark_as_typename parseState 2
                                       make_typedef parseState $1 $2 $3 }

Typedef_decl :
    | EQUAL Opt_bar Constr_decl      { SKvariant $3 }
    | EQUAL LBRACE Label_decl RBRACE { SKrecord $3 }
    | EQUALEQUAL Type_expr           { SKabbrev $2 }

Constr_decl :
    | Constr1_decl BAR Constr_decl { $1 :: $3 }
    | Constr1_decl                 { [$1] }

Constr1_decl :
    | IDENT OF Type_star_list { ($1, List.rev $3) }
    | IDENT                   { ($1, []) }

Label_decl :
    | Label1_decl COMMA Label_decl { $1 :: $3 }
    | Label1_decl                  { [$1] }

Label1_decl :
    | Opt_mutable IDENT COLON Type_expr { ($2, $4, $1) }

Opt_mutable :
    | MUTABLE       { access.Mutable }
    | /* epsilon */ { access.Immutable }

Type_params :
    | LPAREN Type_var_list RPAREN { $2 }
    | QUOTED                      { [$1] }
    | /* epsilon */               { [] }

Type_var_list :
    | QUOTED COMMA Type_var_list { $1 :: $3 }
    | QUOTED                     { [$1] }
