// Implementation file for parser generated by fsyacc
module FsMiniMAL.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FsMiniMAL.Lexing
open FsMiniMAL.Parsing.ParseHelpers
# 2 "Parser.fsy"

open FsMiniMAL
open Syntax
open ParseHelper

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | WITH
  | WHILE
  | VAR
  | VAL
  | TYPE
  | TRY
  | TO
  | THEN
  | OF
  | MUTABLE
  | IN
  | IF
  | HIDEVAL
  | HIDE
  | FUNCT
  | FUN
  | FN
  | FOR
  | EXCEPTION
  | END
  | ELSE
  | DOWNTO
  | DO
  | WHEN
  | CATCH
  | CASE
  | BEGIN
  | AS
  | AND
  | TILDETILDETILDE
  | EXCLAMATION
  | RBRACE
  | BARRBRACKET
  | BARBAR
  | BAR
  | LBRACE
  | UNDERSCORE
  | RBRACKET
  | COLONEQUAL
  | LESSMINUS
  | LBRACKETBAR
  | LBRACKET
  | SEMI
  | COLONCOLON
  | COLON
  | DOT
  | MINUSGREATER
  | COMMA
  | STAR
  | RPAREN
  | LPAREN
  | AMPERSANDAMPERSAND
  | EQUALEQUAL
  | EQUAL
  | EOF
  | STRING of (string)
  | FLOAT of (float)
  | CHAR of (char)
  | INT of (string)
  | INFIX4 of (string)
  | INFIX3 of (string)
  | SUBTRACTIVE of (string)
  | INFIX2 of (string)
  | INFIX1 of (string)
  | INFIX0 of (string)
  | QUOTED of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_WITH
    | TOKEN_WHILE
    | TOKEN_VAR
    | TOKEN_VAL
    | TOKEN_TYPE
    | TOKEN_TRY
    | TOKEN_TO
    | TOKEN_THEN
    | TOKEN_OF
    | TOKEN_MUTABLE
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_HIDEVAL
    | TOKEN_HIDE
    | TOKEN_FUNCT
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_FOR
    | TOKEN_EXCEPTION
    | TOKEN_END
    | TOKEN_ELSE
    | TOKEN_DOWNTO
    | TOKEN_DO
    | TOKEN_WHEN
    | TOKEN_CATCH
    | TOKEN_CASE
    | TOKEN_BEGIN
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_TILDETILDETILDE
    | TOKEN_EXCLAMATION
    | TOKEN_RBRACE
    | TOKEN_BARRBRACKET
    | TOKEN_BARBAR
    | TOKEN_BAR
    | TOKEN_LBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_RBRACKET
    | TOKEN_COLONEQUAL
    | TOKEN_LESSMINUS
    | TOKEN_LBRACKETBAR
    | TOKEN_LBRACKET
    | TOKEN_SEMI
    | TOKEN_COLONCOLON
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_MINUSGREATER
    | TOKEN_COMMA
    | TOKEN_STAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMPERSANDAMPERSAND
    | TOKEN_EQUALEQUAL
    | TOKEN_EQUAL
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_CHAR
    | TOKEN_INT
    | TOKEN_INFIX4
    | TOKEN_INFIX3
    | TOKEN_SUBTRACTIVE
    | TOKEN_INFIX2
    | TOKEN_INFIX1
    | TOKEN_INFIX0
    | TOKEN_QUOTED
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProgram
    | NONTERM_Program
    | NONTERM_Command_list
    | NONTERM_Opt_semi
    | NONTERM_Definition
    | NONTERM_Value_def
    | NONTERM_Function_def
    | NONTERM_Var_def
    | NONTERM_Equation
    | NONTERM_Expression_def
    | NONTERM_Expression
    | NONTERM_Expression_1
    | NONTERM_Expression_2_list
    | NONTERM_Expression_2
    | NONTERM_Matching
    | NONTERM_Matching_list
    | NONTERM_Expression_comma_list
    | NONTERM_Expr_may_type
    | NONTERM_Label_expr_list
    | NONTERM_Dir_flag
    | NONTERM_Opt_bar
    | NONTERM_Opt_when_clause
    | NONTERM_Pattern_0
    | NONTERM_Pattern_0_list
    | NONTERM_Pattern_1
    | NONTERM_Pattern_2
    | NONTERM_Pattern_3
    | NONTERM_Pattern
    | NONTERM_Label_pattern_list
    | NONTERM_Pattern_comma_list
    | NONTERM_Pattern_may_type
    | NONTERM_Infx
    | NONTERM_Type_expr
    | NONTERM_Type_star_list
    | NONTERM_Simple_type
    | NONTERM_Type_comma_list
    | NONTERM_Typedef_list
    | NONTERM_Typedef
    | NONTERM_Typedef_decl
    | NONTERM_Constr_decl
    | NONTERM_Constr1_decl
    | NONTERM_Label_decl
    | NONTERM_Label1_decl
    | NONTERM_Opt_mutable
    | NONTERM_Type_params
    | NONTERM_Type_var_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | WITH  -> 0 
  | WHILE  -> 1 
  | VAR  -> 2 
  | VAL  -> 3 
  | TYPE  -> 4 
  | TRY  -> 5 
  | TO  -> 6 
  | THEN  -> 7 
  | OF  -> 8 
  | MUTABLE  -> 9 
  | IN  -> 10 
  | IF  -> 11 
  | HIDEVAL  -> 12 
  | HIDE  -> 13 
  | FUNCT  -> 14 
  | FUN  -> 15 
  | FN  -> 16 
  | FOR  -> 17 
  | EXCEPTION  -> 18 
  | END  -> 19 
  | ELSE  -> 20 
  | DOWNTO  -> 21 
  | DO  -> 22 
  | WHEN  -> 23 
  | CATCH  -> 24 
  | CASE  -> 25 
  | BEGIN  -> 26 
  | AS  -> 27 
  | AND  -> 28 
  | TILDETILDETILDE  -> 29 
  | EXCLAMATION  -> 30 
  | RBRACE  -> 31 
  | BARRBRACKET  -> 32 
  | BARBAR  -> 33 
  | BAR  -> 34 
  | LBRACE  -> 35 
  | UNDERSCORE  -> 36 
  | RBRACKET  -> 37 
  | COLONEQUAL  -> 38 
  | LESSMINUS  -> 39 
  | LBRACKETBAR  -> 40 
  | LBRACKET  -> 41 
  | SEMI  -> 42 
  | COLONCOLON  -> 43 
  | COLON  -> 44 
  | DOT  -> 45 
  | MINUSGREATER  -> 46 
  | COMMA  -> 47 
  | STAR  -> 48 
  | RPAREN  -> 49 
  | LPAREN  -> 50 
  | AMPERSANDAMPERSAND  -> 51 
  | EQUALEQUAL  -> 52 
  | EQUAL  -> 53 
  | EOF  -> 54 
  | STRING _ -> 55 
  | FLOAT _ -> 56 
  | CHAR _ -> 57 
  | INT _ -> 58 
  | INFIX4 _ -> 59 
  | INFIX3 _ -> 60 
  | SUBTRACTIVE _ -> 61 
  | INFIX2 _ -> 62 
  | INFIX1 _ -> 63 
  | INFIX0 _ -> 64 
  | QUOTED _ -> 65 
  | IDENT _ -> 66 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_WITH 
  | 1 -> TOKEN_WHILE 
  | 2 -> TOKEN_VAR 
  | 3 -> TOKEN_VAL 
  | 4 -> TOKEN_TYPE 
  | 5 -> TOKEN_TRY 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_OF 
  | 9 -> TOKEN_MUTABLE 
  | 10 -> TOKEN_IN 
  | 11 -> TOKEN_IF 
  | 12 -> TOKEN_HIDEVAL 
  | 13 -> TOKEN_HIDE 
  | 14 -> TOKEN_FUNCT 
  | 15 -> TOKEN_FUN 
  | 16 -> TOKEN_FN 
  | 17 -> TOKEN_FOR 
  | 18 -> TOKEN_EXCEPTION 
  | 19 -> TOKEN_END 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_DOWNTO 
  | 22 -> TOKEN_DO 
  | 23 -> TOKEN_WHEN 
  | 24 -> TOKEN_CATCH 
  | 25 -> TOKEN_CASE 
  | 26 -> TOKEN_BEGIN 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_TILDETILDETILDE 
  | 30 -> TOKEN_EXCLAMATION 
  | 31 -> TOKEN_RBRACE 
  | 32 -> TOKEN_BARRBRACKET 
  | 33 -> TOKEN_BARBAR 
  | 34 -> TOKEN_BAR 
  | 35 -> TOKEN_LBRACE 
  | 36 -> TOKEN_UNDERSCORE 
  | 37 -> TOKEN_RBRACKET 
  | 38 -> TOKEN_COLONEQUAL 
  | 39 -> TOKEN_LESSMINUS 
  | 40 -> TOKEN_LBRACKETBAR 
  | 41 -> TOKEN_LBRACKET 
  | 42 -> TOKEN_SEMI 
  | 43 -> TOKEN_COLONCOLON 
  | 44 -> TOKEN_COLON 
  | 45 -> TOKEN_DOT 
  | 46 -> TOKEN_MINUSGREATER 
  | 47 -> TOKEN_COMMA 
  | 48 -> TOKEN_STAR 
  | 49 -> TOKEN_RPAREN 
  | 50 -> TOKEN_LPAREN 
  | 51 -> TOKEN_AMPERSANDAMPERSAND 
  | 52 -> TOKEN_EQUALEQUAL 
  | 53 -> TOKEN_EQUAL 
  | 54 -> TOKEN_EOF 
  | 55 -> TOKEN_STRING 
  | 56 -> TOKEN_FLOAT 
  | 57 -> TOKEN_CHAR 
  | 58 -> TOKEN_INT 
  | 59 -> TOKEN_INFIX4 
  | 60 -> TOKEN_INFIX3 
  | 61 -> TOKEN_SUBTRACTIVE 
  | 62 -> TOKEN_INFIX2 
  | 63 -> TOKEN_INFIX1 
  | 64 -> TOKEN_INFIX0 
  | 65 -> TOKEN_QUOTED 
  | 66 -> TOKEN_IDENT 
  | 69 -> TOKEN_end_of_input
  | 67 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProgram 
    | 1 -> NONTERM_Program 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Command_list 
    | 4 -> NONTERM_Command_list 
    | 5 -> NONTERM_Command_list 
    | 6 -> NONTERM_Command_list 
    | 7 -> NONTERM_Opt_semi 
    | 8 -> NONTERM_Opt_semi 
    | 9 -> NONTERM_Definition 
    | 10 -> NONTERM_Definition 
    | 11 -> NONTERM_Definition 
    | 12 -> NONTERM_Definition 
    | 13 -> NONTERM_Definition 
    | 14 -> NONTERM_Definition 
    | 15 -> NONTERM_Definition 
    | 16 -> NONTERM_Value_def 
    | 17 -> NONTERM_Value_def 
    | 18 -> NONTERM_Function_def 
    | 19 -> NONTERM_Function_def 
    | 20 -> NONTERM_Var_def 
    | 21 -> NONTERM_Var_def 
    | 22 -> NONTERM_Equation 
    | 23 -> NONTERM_Expression_def 
    | 24 -> NONTERM_Expression_def 
    | 25 -> NONTERM_Expression 
    | 26 -> NONTERM_Expression 
    | 27 -> NONTERM_Expression 
    | 28 -> NONTERM_Expression 
    | 29 -> NONTERM_Expression 
    | 30 -> NONTERM_Expression 
    | 31 -> NONTERM_Expression 
    | 32 -> NONTERM_Expression 
    | 33 -> NONTERM_Expression 
    | 34 -> NONTERM_Expression 
    | 35 -> NONTERM_Expression 
    | 36 -> NONTERM_Expression 
    | 37 -> NONTERM_Expression 
    | 38 -> NONTERM_Expression 
    | 39 -> NONTERM_Expression 
    | 40 -> NONTERM_Expression 
    | 41 -> NONTERM_Expression 
    | 42 -> NONTERM_Expression 
    | 43 -> NONTERM_Expression 
    | 44 -> NONTERM_Expression 
    | 45 -> NONTERM_Expression 
    | 46 -> NONTERM_Expression 
    | 47 -> NONTERM_Expression 
    | 48 -> NONTERM_Expression 
    | 49 -> NONTERM_Expression 
    | 50 -> NONTERM_Expression 
    | 51 -> NONTERM_Expression 
    | 52 -> NONTERM_Expression_1 
    | 53 -> NONTERM_Expression_2_list 
    | 54 -> NONTERM_Expression_2_list 
    | 55 -> NONTERM_Expression_2 
    | 56 -> NONTERM_Expression_2 
    | 57 -> NONTERM_Expression_2 
    | 58 -> NONTERM_Expression_2 
    | 59 -> NONTERM_Expression_2 
    | 60 -> NONTERM_Expression_2 
    | 61 -> NONTERM_Expression_2 
    | 62 -> NONTERM_Expression_2 
    | 63 -> NONTERM_Expression_2 
    | 64 -> NONTERM_Expression_2 
    | 65 -> NONTERM_Expression_2 
    | 66 -> NONTERM_Expression_2 
    | 67 -> NONTERM_Expression_2 
    | 68 -> NONTERM_Expression_2 
    | 69 -> NONTERM_Expression_2 
    | 70 -> NONTERM_Expression_2 
    | 71 -> NONTERM_Matching 
    | 72 -> NONTERM_Matching_list 
    | 73 -> NONTERM_Matching_list 
    | 74 -> NONTERM_Expression_comma_list 
    | 75 -> NONTERM_Expression_comma_list 
    | 76 -> NONTERM_Expression_comma_list 
    | 77 -> NONTERM_Expr_may_type 
    | 78 -> NONTERM_Expr_may_type 
    | 79 -> NONTERM_Label_expr_list 
    | 80 -> NONTERM_Label_expr_list 
    | 81 -> NONTERM_Dir_flag 
    | 82 -> NONTERM_Dir_flag 
    | 83 -> NONTERM_Opt_bar 
    | 84 -> NONTERM_Opt_bar 
    | 85 -> NONTERM_Opt_when_clause 
    | 86 -> NONTERM_Opt_when_clause 
    | 87 -> NONTERM_Pattern_0 
    | 88 -> NONTERM_Pattern_0 
    | 89 -> NONTERM_Pattern_0 
    | 90 -> NONTERM_Pattern_0 
    | 91 -> NONTERM_Pattern_0 
    | 92 -> NONTERM_Pattern_0 
    | 93 -> NONTERM_Pattern_0 
    | 94 -> NONTERM_Pattern_0 
    | 95 -> NONTERM_Pattern_0 
    | 96 -> NONTERM_Pattern_0 
    | 97 -> NONTERM_Pattern_0 
    | 98 -> NONTERM_Pattern_0 
    | 99 -> NONTERM_Pattern_0_list 
    | 100 -> NONTERM_Pattern_0_list 
    | 101 -> NONTERM_Pattern_1 
    | 102 -> NONTERM_Pattern_1 
    | 103 -> NONTERM_Pattern_2 
    | 104 -> NONTERM_Pattern_2 
    | 105 -> NONTERM_Pattern_3 
    | 106 -> NONTERM_Pattern_3 
    | 107 -> NONTERM_Pattern 
    | 108 -> NONTERM_Pattern 
    | 109 -> NONTERM_Label_pattern_list 
    | 110 -> NONTERM_Label_pattern_list 
    | 111 -> NONTERM_Pattern_comma_list 
    | 112 -> NONTERM_Pattern_comma_list 
    | 113 -> NONTERM_Pattern_comma_list 
    | 114 -> NONTERM_Pattern_may_type 
    | 115 -> NONTERM_Pattern_may_type 
    | 116 -> NONTERM_Infx 
    | 117 -> NONTERM_Infx 
    | 118 -> NONTERM_Infx 
    | 119 -> NONTERM_Infx 
    | 120 -> NONTERM_Infx 
    | 121 -> NONTERM_Infx 
    | 122 -> NONTERM_Infx 
    | 123 -> NONTERM_Infx 
    | 124 -> NONTERM_Infx 
    | 125 -> NONTERM_Infx 
    | 126 -> NONTERM_Infx 
    | 127 -> NONTERM_Infx 
    | 128 -> NONTERM_Infx 
    | 129 -> NONTERM_Type_expr 
    | 130 -> NONTERM_Type_expr 
    | 131 -> NONTERM_Type_star_list 
    | 132 -> NONTERM_Type_star_list 
    | 133 -> NONTERM_Simple_type 
    | 134 -> NONTERM_Simple_type 
    | 135 -> NONTERM_Simple_type 
    | 136 -> NONTERM_Simple_type 
    | 137 -> NONTERM_Simple_type 
    | 138 -> NONTERM_Type_comma_list 
    | 139 -> NONTERM_Type_comma_list 
    | 140 -> NONTERM_Typedef_list 
    | 141 -> NONTERM_Typedef_list 
    | 142 -> NONTERM_Typedef 
    | 143 -> NONTERM_Typedef_decl 
    | 144 -> NONTERM_Typedef_decl 
    | 145 -> NONTERM_Typedef_decl 
    | 146 -> NONTERM_Constr_decl 
    | 147 -> NONTERM_Constr_decl 
    | 148 -> NONTERM_Constr1_decl 
    | 149 -> NONTERM_Constr1_decl 
    | 150 -> NONTERM_Label_decl 
    | 151 -> NONTERM_Label_decl 
    | 152 -> NONTERM_Label1_decl 
    | 153 -> NONTERM_Opt_mutable 
    | 154 -> NONTERM_Opt_mutable 
    | 155 -> NONTERM_Type_params 
    | 156 -> NONTERM_Type_params 
    | 157 -> NONTERM_Type_params 
    | 158 -> NONTERM_Type_var_list 
    | 159 -> NONTERM_Type_var_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 69 
let _fsyacc_tagOfErrorTerminal = 67

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | WITH  -> "WITH" 
  | WHILE  -> "WHILE" 
  | VAR  -> "VAR" 
  | VAL  -> "VAL" 
  | TYPE  -> "TYPE" 
  | TRY  -> "TRY" 
  | TO  -> "TO" 
  | THEN  -> "THEN" 
  | OF  -> "OF" 
  | MUTABLE  -> "MUTABLE" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | HIDEVAL  -> "HIDEVAL" 
  | HIDE  -> "HIDE" 
  | FUNCT  -> "FUNCT" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | FOR  -> "FOR" 
  | EXCEPTION  -> "EXCEPTION" 
  | END  -> "END" 
  | ELSE  -> "ELSE" 
  | DOWNTO  -> "DOWNTO" 
  | DO  -> "DO" 
  | WHEN  -> "WHEN" 
  | CATCH  -> "CATCH" 
  | CASE  -> "CASE" 
  | BEGIN  -> "BEGIN" 
  | AS  -> "AS" 
  | AND  -> "AND" 
  | TILDETILDETILDE  -> "TILDETILDETILDE" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | RBRACE  -> "RBRACE" 
  | BARRBRACKET  -> "BARRBRACKET" 
  | BARBAR  -> "BARBAR" 
  | BAR  -> "BAR" 
  | LBRACE  -> "LBRACE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | RBRACKET  -> "RBRACKET" 
  | COLONEQUAL  -> "COLONEQUAL" 
  | LESSMINUS  -> "LESSMINUS" 
  | LBRACKETBAR  -> "LBRACKETBAR" 
  | LBRACKET  -> "LBRACKET" 
  | SEMI  -> "SEMI" 
  | COLONCOLON  -> "COLONCOLON" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | MINUSGREATER  -> "MINUSGREATER" 
  | COMMA  -> "COMMA" 
  | STAR  -> "STAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMPERSANDAMPERSAND  -> "AMPERSANDAMPERSAND" 
  | EQUALEQUAL  -> "EQUALEQUAL" 
  | EQUAL  -> "EQUAL" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | CHAR _ -> "CHAR" 
  | INT _ -> "INT" 
  | INFIX4 _ -> "INFIX4" 
  | INFIX3 _ -> "INFIX3" 
  | SUBTRACTIVE _ -> "SUBTRACTIVE" 
  | INFIX2 _ -> "INFIX2" 
  | INFIX1 _ -> "INFIX1" 
  | INFIX0 _ -> "INFIX0" 
  | QUOTED _ -> "QUOTED" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | WITH  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | HIDEVAL  -> (null : System.Object) 
  | HIDE  -> (null : System.Object) 
  | FUNCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | EXCEPTION  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOWNTO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | TILDETILDETILDE  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | BARRBRACKET  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | COLONEQUAL  -> (null : System.Object) 
  | LESSMINUS  -> (null : System.Object) 
  | LBRACKETBAR  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLONCOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | MINUSGREATER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMPERSANDAMPERSAND  -> (null : System.Object) 
  | EQUALEQUAL  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX4 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX3 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUBTRACTIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX2 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX0 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUOTED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 165us; 6us; 2us; 65535us; 2us; 3us; 6us; 7us; 4us; 65535us; 0us; 11us; 3us; 8us; 7us; 8us; 165us; 11us; 2us; 65535us; 13us; 14us; 29us; 30us; 2us; 65535us; 15us; 16us; 33us; 34us; 2us; 65535us; 17us; 18us; 37us; 38us; 1us; 65535us; 31us; 32us; 3us; 65535us; 27us; 28us; 35us; 36us; 39us; 40us; 44us; 65535us; 0us; 12us; 9us; 10us; 43us; 44us; 45us; 46us; 49us; 50us; 52us; 53us; 56us; 57us; 59us; 60us; 62us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 76us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 87us; 88us; 94us; 96us; 95us; 96us; 97us; 98us; 117us; 99us; 118us; 100us; 119us; 101us; 120us; 102us; 121us; 103us; 122us; 104us; 123us; 105us; 124us; 106us; 125us; 107us; 126us; 108us; 127us; 109us; 128us; 110us; 129us; 111us; 145us; 112us; 147us; 114us; 152us; 114us; 155us; 114us; 165us; 12us; 170us; 113us; 175us; 114us; 180us; 115us; 186us; 116us; 45us; 65535us; 0us; 130us; 9us; 130us; 43us; 130us; 45us; 130us; 49us; 130us; 52us; 130us; 56us; 130us; 59us; 130us; 62us; 130us; 64us; 130us; 66us; 130us; 68us; 130us; 70us; 130us; 72us; 130us; 76us; 130us; 78us; 130us; 80us; 130us; 82us; 130us; 87us; 130us; 94us; 130us; 95us; 130us; 97us; 130us; 117us; 130us; 118us; 130us; 119us; 130us; 120us; 130us; 121us; 130us; 122us; 130us; 123us; 130us; 124us; 130us; 125us; 130us; 126us; 130us; 127us; 130us; 128us; 130us; 129us; 130us; 145us; 130us; 147us; 130us; 152us; 130us; 155us; 130us; 158us; 161us; 165us; 130us; 170us; 130us; 175us; 130us; 180us; 130us; 186us; 130us; 47us; 65535us; 0us; 131us; 9us; 131us; 43us; 131us; 45us; 131us; 49us; 131us; 52us; 131us; 54us; 133us; 56us; 131us; 59us; 131us; 62us; 131us; 64us; 131us; 66us; 131us; 68us; 131us; 70us; 131us; 72us; 131us; 76us; 131us; 78us; 131us; 80us; 131us; 82us; 131us; 87us; 131us; 94us; 131us; 95us; 131us; 97us; 131us; 117us; 131us; 118us; 131us; 119us; 131us; 120us; 131us; 121us; 131us; 122us; 131us; 123us; 131us; 124us; 131us; 125us; 131us; 126us; 131us; 127us; 131us; 128us; 131us; 129us; 131us; 132us; 133us; 145us; 131us; 147us; 131us; 152us; 131us; 155us; 131us; 158us; 131us; 165us; 131us; 170us; 131us; 175us; 131us; 180us; 131us; 186us; 131us; 49us; 65535us; 0us; 54us; 9us; 54us; 43us; 54us; 45us; 54us; 49us; 54us; 52us; 54us; 54us; 132us; 56us; 54us; 59us; 54us; 62us; 54us; 64us; 54us; 66us; 54us; 68us; 54us; 70us; 54us; 72us; 54us; 76us; 54us; 78us; 54us; 80us; 54us; 82us; 54us; 87us; 54us; 94us; 54us; 95us; 54us; 97us; 54us; 117us; 54us; 118us; 54us; 119us; 54us; 120us; 54us; 121us; 54us; 122us; 54us; 123us; 54us; 124us; 54us; 125us; 54us; 126us; 54us; 127us; 54us; 128us; 54us; 129us; 54us; 132us; 132us; 140us; 142us; 141us; 142us; 145us; 54us; 147us; 54us; 152us; 54us; 155us; 54us; 158us; 132us; 165us; 54us; 170us; 54us; 175us; 54us; 180us; 54us; 186us; 54us; 4us; 65535us; 85us; 171us; 90us; 171us; 92us; 171us; 172us; 171us; 4us; 65535us; 85us; 86us; 90us; 91us; 92us; 93us; 172us; 173us; 4us; 65535us; 147us; 148us; 152us; 153us; 155us; 156us; 175us; 176us; 4us; 65535us; 147us; 174us; 152us; 174us; 155us; 174us; 175us; 174us; 3us; 65535us; 158us; 159us; 162us; 163us; 181us; 182us; 1us; 65535us; 77us; 78us; 3us; 65535us; 84us; 85us; 89us; 90us; 270us; 271us; 1us; 65535us; 168us; 169us; 17us; 65535us; 13us; 211us; 29us; 211us; 31us; 209us; 47us; 209us; 85us; 211us; 90us; 211us; 92us; 211us; 172us; 211us; 188us; 212us; 197us; 211us; 200us; 211us; 203us; 211us; 209us; 209us; 214us; 211us; 218us; 211us; 223us; 211us; 228us; 211us; 3us; 65535us; 31us; 39us; 47us; 48us; 209us; 210us; 13us; 65535us; 13us; 213us; 29us; 213us; 85us; 213us; 90us; 213us; 92us; 213us; 172us; 213us; 197us; 213us; 200us; 213us; 203us; 213us; 214us; 213us; 218us; 213us; 223us; 213us; 228us; 213us; 13us; 65535us; 13us; 216us; 29us; 216us; 85us; 216us; 90us; 216us; 92us; 216us; 172us; 216us; 197us; 216us; 200us; 216us; 203us; 216us; 214us; 215us; 218us; 219us; 223us; 216us; 228us; 216us; 11us; 65535us; 13us; 217us; 29us; 217us; 85us; 217us; 90us; 217us; 92us; 217us; 172us; 217us; 197us; 217us; 200us; 217us; 203us; 217us; 223us; 217us; 228us; 217us; 11us; 65535us; 13us; 27us; 29us; 27us; 85us; 168us; 90us; 168us; 92us; 168us; 172us; 168us; 197us; 230us; 200us; 230us; 203us; 230us; 223us; 224us; 228us; 230us; 2us; 65535us; 206us; 207us; 225us; 226us; 4us; 65535us; 197us; 198us; 200us; 201us; 203us; 204us; 228us; 229us; 4us; 65535us; 197us; 227us; 200us; 227us; 203us; 227us; 228us; 227us; 1us; 65535us; 147us; 150us; 9us; 65535us; 41us; 42us; 177us; 178us; 231us; 232us; 245us; 246us; 254us; 255us; 256us; 261us; 262us; 261us; 276us; 277us; 288us; 289us; 10us; 65535us; 41us; 244us; 177us; 244us; 231us; 244us; 245us; 244us; 254us; 244us; 256us; 244us; 262us; 244us; 276us; 244us; 282us; 247us; 288us; 244us; 11us; 65535us; 41us; 250us; 177us; 250us; 231us; 250us; 245us; 250us; 248us; 249us; 254us; 250us; 256us; 250us; 262us; 250us; 276us; 250us; 282us; 250us; 288us; 250us; 2us; 65535us; 256us; 257us; 262us; 263us; 2us; 65535us; 19us; 20us; 265us; 266us; 2us; 65535us; 19us; 264us; 265us; 264us; 1us; 65535us; 268us; 269us; 2us; 65535us; 271us; 272us; 279us; 280us; 3us; 65535us; 25us; 26us; 271us; 278us; 279us; 278us; 2us; 65535us; 273us; 274us; 284us; 285us; 2us; 65535us; 273us; 283us; 284us; 283us; 2us; 65535us; 273us; 286us; 284us; 286us; 2us; 65535us; 19us; 267us; 265us; 267us; 2us; 65535us; 291us; 292us; 296us; 297us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 14us; 17us; 20us; 23us; 25us; 29us; 74us; 120us; 168us; 218us; 223us; 228us; 233us; 238us; 242us; 244us; 248us; 250us; 268us; 272us; 286us; 300us; 312us; 324us; 327us; 332us; 337us; 339us; 349us; 360us; 372us; 375us; 378us; 381us; 383us; 386us; 390us; 393us; 396us; 399us; 402us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 3us; 4us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 69us; 2us; 3us; 69us; 1us; 3us; 2us; 4us; 8us; 14us; 4us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 5us; 14us; 6us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 18us; 1us; 18us; 2us; 20us; 21us; 2us; 20us; 21us; 1us; 20us; 1us; 20us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 14us; 23us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 24us; 14us; 24us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 25us; 1us; 25us; 1us; 25us; 14us; 25us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 2us; 26us; 55us; 1us; 26us; 14us; 26us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 6us; 27us; 28us; 53us; 54us; 61us; 62us; 4us; 27us; 28us; 61us; 62us; 2us; 27us; 62us; 15us; 27us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 62us; 2us; 27us; 62us; 1us; 27us; 14us; 27us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 2us; 28us; 61us; 1us; 28us; 14us; 28us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 2us; 29us; 30us; 15us; 29us; 30us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 2us; 29us; 30us; 15us; 29us; 30us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 29us; 14us; 29us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 31us; 14us; 31us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 31us; 14us; 31us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 32us; 1us; 32us; 1us; 32us; 14us; 32us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 32us; 14us; 32us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 32us; 14us; 32us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 33us; 14us; 33us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 14us; 34us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 2us; 36us; 123us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 1us; 37us; 14us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 62us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 71us; 15us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 77us; 78us; 15us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 79us; 80us; 14us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 86us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 4us; 53us; 54us; 61us; 62us; 1us; 53us; 1us; 55us; 3us; 55us; 79us; 80us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 60us; 128us; 3us; 60us; 61us; 62us; 2us; 61us; 62us; 1us; 61us; 1us; 62us; 1us; 62us; 2us; 63us; 64us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 2us; 67us; 68us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 68us; 2us; 69us; 70us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 71us; 2us; 72us; 73us; 1us; 72us; 1us; 72us; 2us; 74us; 75us; 1us; 74us; 1us; 74us; 1us; 77us; 1us; 77us; 2us; 79us; 80us; 2us; 79us; 80us; 1us; 79us; 1us; 79us; 1us; 81us; 1us; 82us; 1us; 84us; 1us; 86us; 1us; 87us; 2us; 87us; 102us; 1us; 88us; 1us; 89us; 1us; 90us; 1us; 91us; 1us; 92us; 2us; 93us; 94us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 97us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 98us; 2us; 99us; 100us; 1us; 99us; 1us; 101us; 1us; 102us; 2us; 103us; 104us; 1us; 104us; 1us; 104us; 1us; 105us; 3us; 106us; 107us; 108us; 1us; 106us; 1us; 106us; 1us; 108us; 1us; 108us; 2us; 109us; 110us; 2us; 109us; 110us; 2us; 109us; 110us; 1us; 109us; 1us; 109us; 2us; 111us; 112us; 1us; 111us; 1us; 111us; 2us; 114us; 115us; 1us; 114us; 1us; 114us; 1us; 116us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 124us; 1us; 125us; 1us; 126us; 1us; 127us; 3us; 129us; 130us; 131us; 1us; 129us; 1us; 129us; 2us; 131us; 148us; 1us; 131us; 2us; 131us; 135us; 2us; 132us; 135us; 1us; 133us; 1us; 134us; 1us; 135us; 2us; 136us; 137us; 2us; 136us; 137us; 1us; 136us; 1us; 136us; 1us; 136us; 1us; 136us; 1us; 137us; 2us; 138us; 139us; 1us; 138us; 1us; 138us; 2us; 140us; 141us; 1us; 140us; 1us; 140us; 1us; 142us; 1us; 142us; 1us; 142us; 2us; 143us; 144us; 1us; 143us; 1us; 143us; 1us; 144us; 1us; 144us; 1us; 144us; 1us; 145us; 1us; 145us; 2us; 146us; 147us; 1us; 146us; 1us; 146us; 2us; 148us; 149us; 1us; 148us; 2us; 150us; 151us; 1us; 150us; 1us; 150us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 152us; 1us; 153us; 1us; 155us; 1us; 155us; 1us; 155us; 1us; 156us; 2us; 158us; 159us; 1us; 158us; 1us; 158us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 11us; 13us; 15us; 19us; 22us; 24us; 27us; 42us; 44us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 90us; 93us; 95us; 97us; 100us; 103us; 105us; 107us; 110us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 142us; 144us; 159us; 161us; 163us; 165us; 180us; 183us; 185us; 200us; 207us; 212us; 215us; 231us; 234us; 236us; 251us; 254us; 256us; 271us; 274us; 290us; 293us; 309us; 311us; 326us; 328us; 343us; 345us; 360us; 362us; 364us; 366us; 381us; 383us; 398us; 400us; 415us; 417us; 432us; 434us; 436us; 438us; 440us; 455us; 457us; 459us; 461us; 463us; 465us; 467us; 470us; 485us; 487us; 502us; 517us; 532us; 547us; 562us; 577us; 592us; 607us; 622us; 637us; 652us; 667us; 682us; 697us; 712us; 727us; 743us; 759us; 774us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 800us; 802us; 804us; 809us; 811us; 813us; 817us; 819us; 821us; 823us; 825us; 827us; 830us; 834us; 837us; 839us; 841us; 843us; 846us; 848us; 850us; 852us; 854us; 856us; 858us; 860us; 862us; 864us; 866us; 869us; 871us; 873us; 875us; 877us; 879us; 881us; 884us; 886us; 888us; 890us; 892us; 894us; 897us; 899us; 901us; 904us; 906us; 908us; 910us; 912us; 915us; 918us; 920us; 922us; 924us; 926us; 928us; 930us; 932us; 935us; 937us; 939us; 941us; 943us; 945us; 948us; 950us; 952us; 954us; 956us; 958us; 960us; 962us; 964us; 966us; 968us; 970us; 972us; 974us; 976us; 979us; 981us; 983us; 985us; 988us; 990us; 992us; 994us; 998us; 1000us; 1002us; 1004us; 1006us; 1009us; 1012us; 1015us; 1017us; 1019us; 1022us; 1024us; 1026us; 1029us; 1031us; 1033us; 1035us; 1037us; 1039us; 1041us; 1043us; 1045us; 1047us; 1049us; 1051us; 1053us; 1055us; 1059us; 1061us; 1063us; 1066us; 1068us; 1071us; 1074us; 1076us; 1078us; 1080us; 1083us; 1086us; 1088us; 1090us; 1092us; 1094us; 1096us; 1099us; 1101us; 1103us; 1106us; 1108us; 1110us; 1112us; 1114us; 1116us; 1119us; 1121us; 1123us; 1125us; 1127us; 1129us; 1131us; 1133us; 1136us; 1138us; 1140us; 1143us; 1145us; 1148us; 1150us; 1152us; 1154us; 1156us; 1158us; 1160us; 1162us; 1164us; 1166us; 1168us; 1170us; 1173us; 1175us; |]
let _fsyacc_action_rows = 298
let _fsyacc_actionTableElements = [|28us; 32768us; 1us; 70us; 2us; 17us; 3us; 13us; 4us; 19us; 5us; 87us; 11us; 64us; 12us; 23us; 13us; 21us; 14us; 92us; 15us; 15us; 16us; 47us; 17us; 74us; 18us; 25us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 54us; 5us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 49152us; 1us; 16391us; 42us; 9us; 8us; 32768us; 2us; 17us; 3us; 13us; 4us; 19us; 12us; 23us; 13us; 21us; 15us; 15us; 18us; 25us; 54us; 4us; 0us; 16385us; 0us; 16386us; 1us; 16391us; 42us; 9us; 8us; 32768us; 2us; 17us; 3us; 13us; 4us; 19us; 12us; 23us; 13us; 21us; 15us; 15us; 18us; 25us; 19us; 166us; 0us; 16387us; 20us; 16392us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16388us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 0us; 16389us; 13us; 16390us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16393us; 1us; 32768us; 66us; 31us; 0us; 16394us; 1us; 32768us; 66us; 35us; 0us; 16395us; 2us; 16541us; 50us; 291us; 65us; 294us; 0us; 16396us; 1us; 32768us; 66us; 22us; 0us; 16397us; 1us; 32768us; 66us; 24us; 0us; 16398us; 1us; 32768us; 66us; 281us; 0us; 16399us; 2us; 32768us; 44us; 41us; 53us; 45us; 1us; 16401us; 28us; 29us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16400us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 187us; 1us; 16403us; 28us; 33us; 1us; 32768us; 66us; 31us; 0us; 16402us; 2us; 32768us; 44us; 41us; 53us; 45us; 1us; 16405us; 28us; 37us; 1us; 32768us; 66us; 35us; 0us; 16404us; 2us; 32768us; 44us; 41us; 53us; 45us; 0us; 16406us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 1us; 32768us; 53us; 43us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16407us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16408us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 187us; 1us; 32768us; 46us; 49us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16409us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 16439us; 39us; 52us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16410us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 12us; 16438us; 26us; 165us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 45us; 55us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 66us; 134us; 2us; 32768us; 41us; 56us; 66us; 61us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 33us; 127us; 37us; 58us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 16446us; 39us; 59us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16411us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 16445us; 39us; 62us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16412us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 7us; 66us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 16414us; 20us; 68us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16413us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 22us; 72us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16415us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 32768us; 66us; 75us; 1us; 32768us; 53us; 76us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 15us; 32768us; 6us; 183us; 21us; 184us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 22us; 80us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 13us; 16416us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 8us; 84us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 16467us; 34us; 185us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16417us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 14us; 32768us; 24us; 89us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 1us; 16467us; 34us; 185us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16418us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16419us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 16507us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16420us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16421us; 1us; 16422us; 59us; 117us; 1us; 16423us; 59us; 117us; 3us; 16424us; 48us; 125us; 59us; 117us; 60us; 118us; 3us; 16425us; 48us; 125us; 59us; 117us; 60us; 118us; 7us; 16426us; 43us; 128us; 48us; 125us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 7us; 16427us; 43us; 128us; 48us; 125us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 7us; 16428us; 43us; 128us; 48us; 125us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 7us; 16429us; 43us; 128us; 48us; 125us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 1us; 16430us; 59us; 117us; 10us; 16431us; 43us; 128us; 48us; 125us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 11us; 16432us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 6us; 16433us; 43us; 128us; 48us; 125us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 13us; 16434us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 14us; 32768us; 33us; 127us; 37us; 146us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 13us; 16455us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 14us; 16462us; 33us; 127us; 38us; 129us; 43us; 128us; 44us; 177us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 14us; 16464us; 33us; 127us; 38us; 129us; 43us; 128us; 47us; 181us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 13us; 16470us; 33us; 127us; 38us; 129us; 43us; 128us; 48us; 125us; 51us; 126us; 52us; 124us; 53us; 123us; 59us; 117us; 60us; 118us; 61us; 120us; 62us; 119us; 63us; 121us; 64us; 122us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16435us; 0us; 16436us; 12us; 16438us; 26us; 165us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 45us; 143us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 66us; 134us; 0us; 16437us; 0us; 16439us; 1us; 16439us; 53us; 180us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 11us; 32768us; 26us; 165us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 66us; 134us; 11us; 16512us; 26us; 165us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 66us; 134us; 1us; 16444us; 45us; 143us; 2us; 32768us; 41us; 145us; 66us; 144us; 0us; 16445us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16446us; 31us; 16460us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 141us; 33us; 241us; 35us; 158us; 38us; 243us; 40us; 152us; 41us; 155us; 48us; 238us; 50us; 147us; 51us; 240us; 52us; 242us; 53us; 239us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 59us; 237us; 60us; 236us; 61us; 95us; 62us; 235us; 63us; 234us; 64us; 233us; 66us; 51us; 1us; 32768us; 49us; 149us; 0us; 16447us; 1us; 32768us; 49us; 151us; 0us; 16448us; 20us; 16460us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 1us; 32768us; 32us; 154us; 0us; 16449us; 20us; 16460us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 1us; 32768us; 37us; 157us; 0us; 16450us; 11us; 32768us; 26us; 165us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 66us; 135us; 1us; 32768us; 31us; 160us; 0us; 16451us; 1us; 32768us; 0us; 162us; 1us; 32768us; 66us; 179us; 1us; 32768us; 31us; 164us; 0us; 16452us; 28us; 32768us; 1us; 70us; 2us; 17us; 3us; 13us; 4us; 19us; 5us; 87us; 11us; 64us; 12us; 23us; 13us; 21us; 14us; 92us; 15us; 15us; 16us; 47us; 17us; 74us; 18us; 25us; 19us; 167us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16453us; 0us; 16454us; 1us; 16469us; 23us; 186us; 1us; 32768us; 46us; 170us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 1us; 16457us; 34us; 172us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16456us; 1us; 16459us; 47us; 175us; 20us; 16460us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16458us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16461us; 1us; 32768us; 53us; 180us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 1us; 32768us; 66us; 179us; 0us; 16463us; 0us; 16465us; 0us; 16466us; 0us; 16468us; 20us; 32768us; 1us; 70us; 5us; 87us; 11us; 64us; 14us; 92us; 16us; 47us; 17us; 74us; 25us; 82us; 26us; 165us; 29us; 97us; 30us; 140us; 35us; 158us; 40us; 152us; 41us; 155us; 50us; 147us; 55us; 136us; 56us; 139us; 57us; 138us; 58us; 137us; 61us; 94us; 66us; 51us; 0us; 16471us; 11us; 16471us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 187us; 0us; 16472us; 0us; 16473us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 2us; 32768us; 56us; 196us; 58us; 195us; 0us; 16477us; 0us; 16478us; 11us; 16497us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 1us; 32768us; 49us; 199us; 0us; 16479us; 11us; 16497us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 1us; 32768us; 37us; 202us; 0us; 16480us; 11us; 16497us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 1us; 32768us; 32us; 205us; 0us; 16481us; 1us; 32768us; 66us; 222us; 1us; 32768us; 31us; 208us; 0us; 16482us; 11us; 16484us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 187us; 0us; 16483us; 0us; 16485us; 0us; 16486us; 1us; 16487us; 43us; 214us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16488us; 0us; 16489us; 2us; 16491us; 27us; 220us; 34us; 218us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16490us; 1us; 32768us; 66us; 221us; 0us; 16492us; 1us; 32768us; 53us; 223us; 11us; 32768us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 1us; 16494us; 47us; 225us; 1us; 32768us; 66us; 222us; 0us; 16493us; 1us; 16496us; 47us; 228us; 11us; 16497us; 35us; 206us; 36us; 189us; 40us; 203us; 41us; 200us; 50us; 197us; 55us; 190us; 56us; 193us; 57us; 192us; 58us; 191us; 61us; 194us; 66us; 188us; 0us; 16495us; 1us; 16499us; 44us; 231us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16498us; 0us; 16500us; 0us; 16501us; 0us; 16502us; 0us; 16503us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 0us; 16508us; 0us; 16509us; 0us; 16510us; 0us; 16511us; 2us; 16514us; 46us; 245us; 48us; 248us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16513us; 1us; 16532us; 48us; 248us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 1us; 16515us; 66us; 253us; 1us; 16516us; 66us; 253us; 0us; 16517us; 0us; 16518us; 0us; 16519us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 2us; 32768us; 47us; 256us; 49us; 260us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 1us; 32768us; 49us; 258us; 1us; 32768us; 66us; 259us; 0us; 16520us; 0us; 16521us; 1us; 16523us; 47us; 262us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16522us; 1us; 16525us; 28us; 265us; 2us; 16541us; 50us; 291us; 65us; 294us; 0us; 16524us; 1us; 32768us; 66us; 268us; 2us; 32768us; 52us; 276us; 53us; 270us; 0us; 16526us; 2us; 16467us; 34us; 185us; 35us; 273us; 1us; 32768us; 66us; 281us; 0us; 16527us; 1us; 16538us; 9us; 290us; 1us; 32768us; 31us; 275us; 0us; 16528us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16529us; 1us; 16531us; 34us; 279us; 1us; 32768us; 66us; 281us; 0us; 16530us; 1us; 16533us; 8us; 282us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 1us; 16535us; 47us; 284us; 1us; 16538us; 9us; 290us; 0us; 16534us; 1us; 32768us; 66us; 287us; 1us; 32768us; 44us; 288us; 3us; 32768us; 50us; 254us; 65us; 251us; 66us; 252us; 0us; 16536us; 0us; 16537us; 1us; 32768us; 65us; 295us; 1us; 32768us; 49us; 293us; 0us; 16539us; 0us; 16540us; 1us; 16543us; 47us; 296us; 1us; 32768us; 65us; 295us; 0us; 16542us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 29us; 30us; 32us; 41us; 42us; 43us; 45us; 54us; 55us; 76us; 90us; 91us; 105us; 117us; 118us; 120us; 121us; 123us; 124us; 127us; 128us; 130us; 131us; 133us; 134us; 136us; 137us; 140us; 142us; 154us; 155us; 167us; 169us; 171us; 172us; 175us; 177us; 179us; 180us; 183us; 184us; 188us; 190us; 211us; 225us; 246us; 260us; 272us; 274us; 295us; 309us; 311us; 332us; 346us; 359us; 362us; 383us; 398us; 400us; 421us; 435us; 437us; 458us; 472us; 493us; 508us; 529us; 544us; 565us; 579us; 600us; 615us; 636us; 650us; 652us; 654us; 675us; 691us; 712us; 727us; 748us; 762us; 783us; 798us; 800us; 812us; 813us; 834us; 849us; 851us; 863us; 864us; 876us; 877us; 898us; 919us; 920us; 941us; 942us; 944us; 946us; 950us; 954us; 962us; 970us; 978us; 986us; 988us; 999us; 1011us; 1018us; 1032us; 1047us; 1061us; 1076us; 1091us; 1105us; 1126us; 1147us; 1168us; 1189us; 1210us; 1231us; 1252us; 1273us; 1294us; 1315us; 1336us; 1357us; 1378us; 1379us; 1380us; 1393us; 1394us; 1395us; 1397us; 1398us; 1399us; 1400us; 1401us; 1413us; 1425us; 1427us; 1430us; 1431us; 1452us; 1453us; 1485us; 1487us; 1488us; 1490us; 1491us; 1512us; 1514us; 1515us; 1536us; 1538us; 1539us; 1551us; 1553us; 1554us; 1556us; 1558us; 1560us; 1561us; 1590us; 1591us; 1592us; 1594us; 1596us; 1617us; 1619us; 1631us; 1632us; 1634us; 1655us; 1656us; 1660us; 1661us; 1663us; 1684us; 1686us; 1687us; 1688us; 1689us; 1690us; 1711us; 1712us; 1724us; 1725us; 1726us; 1727us; 1728us; 1729us; 1732us; 1733us; 1734us; 1746us; 1748us; 1749us; 1761us; 1763us; 1764us; 1776us; 1778us; 1779us; 1781us; 1783us; 1784us; 1796us; 1797us; 1798us; 1799us; 1801us; 1813us; 1814us; 1815us; 1818us; 1830us; 1831us; 1833us; 1834us; 1836us; 1848us; 1850us; 1852us; 1853us; 1855us; 1867us; 1868us; 1870us; 1874us; 1875us; 1876us; 1877us; 1878us; 1879us; 1880us; 1881us; 1882us; 1883us; 1884us; 1885us; 1886us; 1889us; 1893us; 1894us; 1896us; 1900us; 1902us; 1904us; 1905us; 1906us; 1907us; 1911us; 1914us; 1918us; 1920us; 1922us; 1923us; 1924us; 1926us; 1930us; 1931us; 1933us; 1936us; 1937us; 1939us; 1942us; 1943us; 1946us; 1948us; 1949us; 1951us; 1953us; 1954us; 1958us; 1959us; 1961us; 1963us; 1964us; 1966us; 1970us; 1972us; 1974us; 1975us; 1977us; 1979us; 1983us; 1984us; 1985us; 1987us; 1989us; 1990us; 1991us; 1993us; 1995us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 1us; 3us; 3us; 1us; 1us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 2us; 4us; 2us; 4us; 2us; 2us; 4us; 2us; 4us; 3us; 7us; 5us; 6us; 4us; 4us; 8us; 5us; 5us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 5us; 4us; 2us; 4us; 3us; 1us; 3us; 1us; 0us; 3us; 1us; 5us; 3us; 1us; 1us; 0us; 1us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 5us; 3us; 3us; 1us; 0us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 0us; 3us; 1us; 0us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 29us; 30us; 30us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 32us; 32us; 33us; 33us; 34us; 34us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 37us; 38us; 38us; 38us; 39us; 39us; 40us; 40us; 41us; 41us; 42us; 43us; 43us; 44us; 44us; 44us; 45us; 45us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 16389us; 65535us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16404us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16435us; 16436us; 65535us; 16437us; 16439us; 65535us; 16440us; 16441us; 16442us; 16443us; 65535us; 65535us; 65535us; 65535us; 16445us; 65535us; 16446us; 65535us; 65535us; 16447us; 65535us; 16448us; 65535us; 65535us; 16449us; 65535us; 65535us; 16450us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16452us; 65535us; 16453us; 16454us; 65535us; 65535us; 65535us; 65535us; 65535us; 16456us; 65535us; 65535us; 16458us; 65535us; 16461us; 65535us; 65535us; 65535us; 16463us; 16465us; 16466us; 16468us; 65535us; 16471us; 65535us; 16472us; 16473us; 16474us; 16475us; 16476us; 65535us; 16477us; 16478us; 65535us; 65535us; 16479us; 65535us; 65535us; 16480us; 65535us; 65535us; 16481us; 65535us; 65535us; 16482us; 65535us; 16483us; 16485us; 16486us; 65535us; 65535us; 16488us; 16489us; 65535us; 65535us; 16490us; 65535us; 16492us; 65535us; 65535us; 65535us; 65535us; 16493us; 65535us; 65535us; 16495us; 65535us; 65535us; 16498us; 16500us; 16501us; 16502us; 16503us; 16504us; 16505us; 16506us; 16508us; 16509us; 16510us; 16511us; 65535us; 65535us; 16513us; 65535us; 65535us; 65535us; 65535us; 16517us; 16518us; 16519us; 65535us; 65535us; 65535us; 65535us; 65535us; 16520us; 16521us; 65535us; 65535us; 16522us; 65535us; 65535us; 16524us; 65535us; 65535us; 16526us; 65535us; 65535us; 16527us; 65535us; 65535us; 16528us; 65535us; 16529us; 65535us; 65535us; 16530us; 65535us; 65535us; 65535us; 65535us; 16534us; 65535us; 65535us; 65535us; 16536us; 16537us; 65535us; 65535us; 16539us; 16540us; 65535us; 65535us; 16542us; |]
let _fsyacc_reductions ()  =    [| 
# 667 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsMiniMAL.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProgram));
# 676 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                       (List.rev _1, parseState.ParserLocalStore) 
                   )
# 113 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 688 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                       ([], parseState.ParserLocalStore) 
                   )
# 114 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 698 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                              _3 :: _1 
                   )
# 117 "Parser.fsy"
                 : 'Command_list));
# 711 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _3) :: _1 
                   )
# 118 "Parser.fsy"
                 : 'Command_list));
# 723 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                              _1 :: [] 
                   )
# 119 "Parser.fsy"
                 : 'Command_list));
# 734 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _1) :: [] 
                   )
# 120 "Parser.fsy"
                 : 'Command_list));
# 745 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                         () 
                   )
# 123 "Parser.fsy"
                 : 'Opt_semi));
# 755 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                         () 
                   )
# 124 "Parser.fsy"
                 : 'Opt_semi));
# 765 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                    make_cmd parseState (SCval _2) 
                   )
# 127 "Parser.fsy"
                 : 'Definition));
# 776 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                    make_cmd parseState (SCfun _2) 
                   )
# 128 "Parser.fsy"
                 : 'Definition));
# 787 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                    make_cmd parseState (SCvar _2) 
                   )
# 129 "Parser.fsy"
                 : 'Definition));
# 798 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                    make_cmd parseState (SCtype _2) 
                   )
# 130 "Parser.fsy"
                 : 'Definition));
# 809 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                    make_cmd parseState (SChide (_2, get_term_loc parseState 2)) 
                   )
# 131 "Parser.fsy"
                 : 'Definition));
# 820 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                    make_cmd parseState (SChideval _2) 
                   )
# 132 "Parser.fsy"
                 : 'Definition));
# 831 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                    make_cmd parseState (SCexn _2) 
                   )
# 133 "Parser.fsy"
                 : 'Definition));
# 842 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                                  (_1,_2) :: _4 
                   )
# 136 "Parser.fsy"
                 : 'Value_def));
# 855 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                                  [_1,_2] 
                   )
# 137 "Parser.fsy"
                 : 'Value_def));
# 867 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                             (_1,_2) :: _4 
                   )
# 140 "Parser.fsy"
                 : 'Function_def));
# 880 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                             (_1,_2) :: [] 
                   )
# 141 "Parser.fsy"
                 : 'Function_def));
# 892 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                              (_1,_2) :: _4 
                   )
# 144 "Parser.fsy"
                 : 'Var_def));
# 905 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                              [_1,_2] 
                   )
# 145 "Parser.fsy"
                 : 'Var_def));
# 917 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                           make_expr parseState (SEfn (_1, _2)) 
                   )
# 148 "Parser.fsy"
                 : 'Equation));
# 929 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                              make_expr parseState (SEtype (_4,_2)) 
                   )
# 151 "Parser.fsy"
                 : 'Expression_def));
# 941 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                              _2 
                   )
# 152 "Parser.fsy"
                 : 'Expression_def));
# 952 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                                                                              make_expr parseState (SEfn (_2, _4)) 
                   )
# 157 "Parser.fsy"
                 : 'Expression));
# 964 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                                                                              make_expr parseState (SEset (_1, _3)) 
                   )
# 158 "Parser.fsy"
                 : 'Expression));
# 976 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                                                                              make_ternop parseState ".[]<-" _1 _4 _7 
                   )
# 159 "Parser.fsy"
                 : 'Expression));
# 989 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                                                                              make_expr parseState (SEsetfield (_1, _3, _5)) 
                   )
# 160 "Parser.fsy"
                 : 'Expression));
# 1002 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                                                                              make_expr parseState (SEifthenelse (_2, _4, Some _6)) 
                   )
# 161 "Parser.fsy"
                 : 'Expression));
# 1015 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                                                              make_expr parseState (SEifthenelse (_2, _4, None)) 
                   )
# 162 "Parser.fsy"
                 : 'Expression));
# 1027 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                                                              make_expr parseState (SEwhile (_2, _4)) 
                   )
# 163 "Parser.fsy"
                 : 'Expression));
# 1039 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dir_flag)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                                                                              make_expr parseState (SEfor (_2, _4, _5, _6, _8)) 
                   )
# 164 "Parser.fsy"
                 : 'Expression));
# 1054 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                                                                              make_expr parseState (SEcase (_2, _5)) 
                   )
# 165 "Parser.fsy"
                 : 'Expression));
# 1067 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                                                                              make_expr parseState (SEtry (_2, _5)) 
                   )
# 166 "Parser.fsy"
                 : 'Expression));
# 1080 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                                                                              make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), _2)))) 
                   )
# 167 "Parser.fsy"
                 : 'Expression));
# 1091 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                                                                              make_minus_expr parseState _1 _2 
                   )
# 168 "Parser.fsy"
                 : 'Expression));
# 1103 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                                                                              make_unop parseState "~~~" _2 
                   )
# 169 "Parser.fsy"
                 : 'Expression));
# 1114 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 170 "Parser.fsy"
                 : 'Expression));
# 1127 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 171 "Parser.fsy"
                 : 'Expression));
# 1140 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 172 "Parser.fsy"
                 : 'Expression));
# 1153 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 173 "Parser.fsy"
                 : 'Expression));
# 1166 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 174 "Parser.fsy"
                 : 'Expression));
# 1179 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 175 "Parser.fsy"
                 : 'Expression));
# 1192 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                                                                              make_binop parseState "=" _1 _3 
                   )
# 176 "Parser.fsy"
                 : 'Expression));
# 1204 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                                                              make_binop parseState "==" _1 _3 
                   )
# 177 "Parser.fsy"
                 : 'Expression));
# 1216 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                                                              make_binop parseState "*" _1 _3 
                   )
# 178 "Parser.fsy"
                 : 'Expression));
# 1228 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                                                                              make_binop parseState "&&" _1 _3 
                   )
# 179 "Parser.fsy"
                 : 'Expression));
# 1240 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                                                              make_binop parseState "||" _1 _3 
                   )
# 180 "Parser.fsy"
                 : 'Expression));
# 1252 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                                                              make_unop parseState "::" (make_expr parseState (SEtuple [_1;_3])) 
                   )
# 181 "Parser.fsy"
                 : 'Expression));
# 1264 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                                                              make_binop parseState ":=" _1 _3 
                   )
# 182 "Parser.fsy"
                 : 'Expression));
# 1276 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                                                              _1 
                   )
# 183 "Parser.fsy"
                 : 'Expression));
# 1287 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                               match _1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) 
                   )
# 186 "Parser.fsy"
                 : 'Expression_1));
# 1298 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 189 "Parser.fsy"
                 : 'Expression_2_list));
# 1310 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                            [_1] 
                   )
# 190 "Parser.fsy"
                 : 'Expression_2_list));
# 1321 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                                             make_expr parseState (SEid _1) 
                   )
# 193 "Parser.fsy"
                 : 'Expression_2));
# 1332 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                                             make_string parseState _1 
                   )
# 194 "Parser.fsy"
                 : 'Expression_2));
# 1343 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                                             make_expr parseState (SEint _1) 
                   )
# 195 "Parser.fsy"
                 : 'Expression_2));
# 1354 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                                             make_expr parseState (SEchar _1) 
                   )
# 196 "Parser.fsy"
                 : 'Expression_2));
# 1365 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                                             make_expr parseState (SEfloat _1) 
                   )
# 197 "Parser.fsy"
                 : 'Expression_2));
# 1376 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                                             make_unop parseState "!" _2 
                   )
# 198 "Parser.fsy"
                 : 'Expression_2));
# 1387 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                                             make_expr parseState (SEgetfield (_1, _3)) 
                   )
# 199 "Parser.fsy"
                 : 'Expression_2));
# 1399 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                                             make_binop parseState ".[]" _1 _4 
                   )
# 200 "Parser.fsy"
                 : 'Expression_2));
# 1411 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                                             match _2 with [e] -> e | l -> make_expr parseState (SEtuple l) 
                   )
# 201 "Parser.fsy"
                 : 'Expression_2));
# 1422 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Infx)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                                                             make_ident parseState _2 
                   )
# 202 "Parser.fsy"
                 : 'Expression_2));
# 1433 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                                             make_expr parseState (SEarray _2) 
                   )
# 203 "Parser.fsy"
                 : 'Expression_2));
# 1444 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                                             List.foldBack (fun a l -> make_unop parseState "::" (make_expr parseState (SEtuple [a;l]))) _2 (make_ident parseState "[]") 
                   )
# 204 "Parser.fsy"
                 : 'Expression_2));
# 1455 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                                             make_expr parseState (SErecord (None, _2)) 
                   )
# 205 "Parser.fsy"
                 : 'Expression_2));
# 1466 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                                                             make_expr parseState (SErecord (Some _2, _4)) 
                   )
# 206 "Parser.fsy"
                 : 'Expression_2));
# 1478 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                                             make_expr parseState (SEbegin (List.rev _2)) 
                   )
# 207 "Parser.fsy"
                 : 'Expression_2));
# 1490 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                                             make_expr parseState (SEbegin []) 
                   )
# 208 "Parser.fsy"
                 : 'Expression_2));
# 1500 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_when_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                                                                           (_1, _2, _4) 
                   )
# 211 "Parser.fsy"
                 : 'Matching));
# 1513 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 214 "Parser.fsy"
                 : 'Matching_list));
# 1525 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                                     [_1] 
                   )
# 215 "Parser.fsy"
                 : 'Matching_list));
# 1536 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 218 "Parser.fsy"
                 : 'Expression_comma_list));
# 1548 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                                                       [_1] 
                   )
# 219 "Parser.fsy"
                 : 'Expression_comma_list));
# 1559 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                                                       [] 
                   )
# 220 "Parser.fsy"
                 : 'Expression_comma_list));
# 1569 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                          make_expr parseState (SEtype (_1, _3)) 
                   )
# 223 "Parser.fsy"
                 : 'Expr_may_type));
# 1581 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                                          _1 
                   )
# 224 "Parser.fsy"
                 : 'Expr_may_type));
# 1592 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 227 "Parser.fsy"
                 : 'Label_expr_list));
# 1605 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                                                          [_1, _3] 
                   )
# 228 "Parser.fsy"
                 : 'Label_expr_list));
# 1617 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                    dirflag.Upto 
                   )
# 231 "Parser.fsy"
                 : 'Dir_flag));
# 1627 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                    dirflag.Downto 
                   )
# 232 "Parser.fsy"
                 : 'Dir_flag));
# 1637 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                         () 
                   )
# 235 "Parser.fsy"
                 : 'Opt_bar));
# 1647 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                         () 
                   )
# 236 "Parser.fsy"
                 : 'Opt_bar));
# 1657 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                             None 
                   )
# 239 "Parser.fsy"
                 : 'Opt_when_clause));
# 1667 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                             Some _2 
                   )
# 240 "Parser.fsy"
                 : 'Opt_when_clause));
# 1678 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                                                         make_pat parseState (SPid _1) 
                   )
# 245 "Parser.fsy"
                 : 'Pattern_0));
# 1689 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                                                         make_pat parseState SPany 
                   )
# 246 "Parser.fsy"
                 : 'Pattern_0));
# 1699 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                                                         make_pat_string parseState _1 
                   )
# 247 "Parser.fsy"
                 : 'Pattern_0));
# 1710 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "Parser.fsy"
                                                                         make_pat parseState (SPint _1) 
                   )
# 248 "Parser.fsy"
                 : 'Pattern_0));
# 1721 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                                                         make_pat parseState (SPchar _1) 
                   )
# 249 "Parser.fsy"
                 : 'Pattern_0));
# 1732 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                                                         make_pat parseState (SPfloat _1) 
                   )
# 250 "Parser.fsy"
                 : 'Pattern_0));
# 1743 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                                                         make_pat parseState (SPint(make_minus _2)) 
                   )
# 251 "Parser.fsy"
                 : 'Pattern_0));
# 1755 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                                                         make_pat parseState (SPfloat(- _2)) 
                   )
# 252 "Parser.fsy"
                 : 'Pattern_0));
# 1767 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                                                         match _2 with [pat] -> pat | l -> make_pat parseState (SPtuple l) 
                   )
# 253 "Parser.fsy"
                 : 'Pattern_0));
# 1778 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                                                         List.foldBack (make_cons_pat parseState) _2 { sp_desc = SPid "[]" ; sp_loc = get_loc parseState } 
                   )
# 254 "Parser.fsy"
                 : 'Pattern_0));
# 1789 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                                                         make_pat parseState (SParray _2) 
                   )
# 255 "Parser.fsy"
                 : 'Pattern_0));
# 1800 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                                         make_pat parseState (SPrecord _2) 
                   )
# 256 "Parser.fsy"
                 : 'Pattern_0));
# 1811 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 259 "Parser.fsy"
                 : 'Pattern_0_list));
# 1823 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                                      _1 :: [] 
                   )
# 260 "Parser.fsy"
                 : 'Pattern_0_list));
# 1834 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                             _1 
                   )
# 263 "Parser.fsy"
                 : 'Pattern_1));
# 1845 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "Parser.fsy"
                                             make_pat parseState (SPapply (_1, _2)) 
                   )
# 264 "Parser.fsy"
                 : 'Pattern_1));
# 1857 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                                            _1 
                   )
# 267 "Parser.fsy"
                 : 'Pattern_2));
# 1868 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                                            make_cons_pat parseState _1 _3 
                   )
# 268 "Parser.fsy"
                 : 'Pattern_2));
# 1880 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                                     _1 
                   )
# 271 "Parser.fsy"
                 : 'Pattern_3));
# 1891 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                                     make_pat parseState (SPor(_1, _3)) 
                   )
# 272 "Parser.fsy"
                 : 'Pattern_3));
# 1903 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "Parser.fsy"
                                                _1 
                   )
# 275 "Parser.fsy"
                 : 'Pattern));
# 1914 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "Parser.fsy"
                                                make_pat parseState (SPas (_1, _3)) 
                   )
# 276 "Parser.fsy"
                 : 'Pattern));
# 1926 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 279 "Parser.fsy"
                 : 'Label_pattern_list));
# 1939 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "Parser.fsy"
                                                                          (_1, _3) :: [] 
                   )
# 280 "Parser.fsy"
                 : 'Label_pattern_list));
# 1951 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 283 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1963 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "Parser.fsy"
                                                                       _1 :: [] 
                   )
# 284 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1974 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                                                       [] 
                   )
# 285 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1984 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                                     make_pat parseState (SPtype (_1, _3)) 
                   )
# 288 "Parser.fsy"
                 : 'Pattern_may_type));
# 1996 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                     _1 
                   )
# 289 "Parser.fsy"
                 : 'Pattern_may_type));
# 2007 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                                _1 
                   )
# 292 "Parser.fsy"
                 : 'Infx));
# 2018 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "Parser.fsy"
                                                _1 
                   )
# 293 "Parser.fsy"
                 : 'Infx));
# 2029 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                                                _1 
                   )
# 294 "Parser.fsy"
                 : 'Infx));
# 2040 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "Parser.fsy"
                                                _1 
                   )
# 295 "Parser.fsy"
                 : 'Infx));
# 2051 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                                _1 
                   )
# 296 "Parser.fsy"
                 : 'Infx));
# 2062 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "Parser.fsy"
                                                "*" 
                   )
# 297 "Parser.fsy"
                 : 'Infx));
# 2072 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                                                "=" 
                   )
# 298 "Parser.fsy"
                 : 'Infx));
# 2082 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "Parser.fsy"
                                                _1 
                   )
# 299 "Parser.fsy"
                 : 'Infx));
# 2093 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                "&&" 
                   )
# 300 "Parser.fsy"
                 : 'Infx));
# 2103 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                "||" 
                   )
# 301 "Parser.fsy"
                 : 'Infx));
# 2113 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                "==" 
                   )
# 302 "Parser.fsy"
                 : 'Infx));
# 2123 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "Parser.fsy"
                                                ":=" 
                   )
# 303 "Parser.fsy"
                 : 'Infx));
# 2133 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                                "!" 
                   )
# 304 "Parser.fsy"
                 : 'Infx));
# 2143 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                                   make_typ parseState (STarrow(type_expr_of_type_star_list parseState _1, _3)) 
                   )
# 309 "Parser.fsy"
                 : 'Type_expr));
# 2155 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                                                   type_expr_of_type_star_list parseState _1 
                   )
# 310 "Parser.fsy"
                 : 'Type_expr));
# 2166 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "Parser.fsy"
                                                             _3 :: _1 
                   )
# 313 "Parser.fsy"
                 : 'Type_star_list));
# 2178 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "Parser.fsy"
                                                             [_1] 
                   )
# 314 "Parser.fsy"
                 : 'Type_star_list));
# 2189 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "Parser.fsy"
                                                                                 make_typ parseState (STvar _1) 
                   )
# 317 "Parser.fsy"
                 : 'Simple_type));
# 2200 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "Parser.fsy"
                                                                                 mark_as_typename parseState 1; make_typ parseState (STconstr(_1, [], get_term_loc parseState 1)) 
                   )
# 318 "Parser.fsy"
                 : 'Simple_type));
# 2211 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                                                                 mark_as_typename parseState 2; make_typ parseState (STconstr(_2, [_1], get_term_loc parseState 2)) 
                   )
# 319 "Parser.fsy"
                 : 'Simple_type));
# 2223 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                                                                 mark_as_typename parseState 6; make_typ parseState (STconstr(_6, _2 :: _4, get_term_loc parseState 6)) 
                   )
# 320 "Parser.fsy"
                 : 'Simple_type));
# 2236 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "Parser.fsy"
                                                                                 _2 
                   )
# 321 "Parser.fsy"
                 : 'Simple_type));
# 2247 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 324 "Parser.fsy"
                 : 'Type_comma_list));
# 2259 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "Parser.fsy"
                                                             [_1] 
                   )
# 325 "Parser.fsy"
                 : 'Type_comma_list));
# 2270 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 330 "Parser.fsy"
                 : 'Typedef_list));
# 2282 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "Parser.fsy"
                                                      [_1] 
                   )
# 331 "Parser.fsy"
                 : 'Typedef_list));
# 2293 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_params)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 334 "Parser.fsy"
                                                            mark_as_typename parseState 2
                                                            make_typedef parseState _1 _2 _3 
                   )
# 334 "Parser.fsy"
                 : 'Typedef));
# 2307 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "Parser.fsy"
                                                            SKvariant _3 
                   )
# 338 "Parser.fsy"
                 : 'Typedef_decl));
# 2319 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "Parser.fsy"
                                                            SKrecord _3 
                   )
# 339 "Parser.fsy"
                 : 'Typedef_decl));
# 2330 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "Parser.fsy"
                                                            SKabbrev _2 
                   )
# 340 "Parser.fsy"
                 : 'Typedef_decl));
# 2341 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 343 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 343 "Parser.fsy"
                 : 'Constr_decl));
# 2353 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "Parser.fsy"
                                                          [_1] 
                   )
# 344 "Parser.fsy"
                 : 'Constr_decl));
# 2364 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "Parser.fsy"
                                                     (_1, List.rev _3) 
                   )
# 347 "Parser.fsy"
                 : 'Constr1_decl));
# 2376 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "Parser.fsy"
                                                     (_1, []) 
                   )
# 348 "Parser.fsy"
                 : 'Constr1_decl));
# 2387 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 351 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 351 "Parser.fsy"
                 : 'Label_decl));
# 2399 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 352 "Parser.fsy"
                                                          [_1] 
                   )
# 352 "Parser.fsy"
                 : 'Label_decl));
# 2410 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "Parser.fsy"
                                                               (_2, _4, _1) 
                   )
# 355 "Parser.fsy"
                 : 'Label1_decl));
# 2423 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "Parser.fsy"
                                           access.Mutable 
                   )
# 358 "Parser.fsy"
                 : 'Opt_mutable));
# 2433 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "Parser.fsy"
                                           access.Immutable 
                   )
# 359 "Parser.fsy"
                 : 'Opt_mutable));
# 2443 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 362 "Parser.fsy"
                                                         _2 
                   )
# 362 "Parser.fsy"
                 : 'Type_params));
# 2454 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "Parser.fsy"
                                                         [_1] 
                   )
# 363 "Parser.fsy"
                 : 'Type_params));
# 2465 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "Parser.fsy"
                                                         [] 
                   )
# 364 "Parser.fsy"
                 : 'Type_params));
# 2475 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 367 "Parser.fsy"
                 : 'Type_var_list));
# 2487 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "Parser.fsy"
                                                        [_1] 
                   )
# 368 "Parser.fsy"
                 : 'Type_var_list));
|]
# 2499 "Parser.fs"
let tables () : FsMiniMAL.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FsMiniMAL.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 70;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Program lexer lexbuf : Syntax.command list * System.Collections.Generic.IDictionary<string, obj> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
