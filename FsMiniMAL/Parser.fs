// Implementation file for parser generated by fsyacc
module FsMiniMAL.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FsMiniMAL.Lexing
open FsMiniMAL.Parsing.ParseHelpers
# 2 "Parser.fsy"

open FsMiniMAL
open Syntax
open ParseHelper

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | WITH
  | WHILE
  | VAR
  | VAL
  | TYPE
  | TRY
  | TO
  | THEN
  | OF
  | MUTABLE
  | IN
  | IF
  | HIDEVAL
  | HIDE
  | FUNCT
  | FUN
  | FN
  | FOR
  | EXCEPTION
  | END
  | ELSE
  | DOWNTO
  | DO
  | WHEN
  | CATCH
  | CASE
  | BEGIN
  | AS
  | AND
  | TILDETILDETILDE
  | EXCLAMATION
  | RBRACE
  | BARRBRACKET
  | BARBAR
  | BAR
  | LBRACE
  | UNDERSCORE
  | RBRACKET
  | COLONEQUAL
  | LESSMINUS
  | LBRACKETBAR
  | LBRACKET
  | SEMI
  | COLONCOLON
  | COLON
  | DOT
  | MINUSGREATER
  | COMMA
  | STAR
  | RPAREN
  | LPAREN
  | AMPERSANDAMPERSAND
  | EQUALEQUAL
  | EQUAL
  | EOF
  | STRING of (string)
  | FLOAT of (float)
  | CHAR of (char)
  | INT of (string)
  | INFIX4 of (string)
  | INFIX3 of (string)
  | SUBTRACTIVE of (string)
  | INFIX2 of (string)
  | INFIX1 of (string)
  | INFIX0 of (string)
  | QUOTED of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_WITH
    | TOKEN_WHILE
    | TOKEN_VAR
    | TOKEN_VAL
    | TOKEN_TYPE
    | TOKEN_TRY
    | TOKEN_TO
    | TOKEN_THEN
    | TOKEN_OF
    | TOKEN_MUTABLE
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_HIDEVAL
    | TOKEN_HIDE
    | TOKEN_FUNCT
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_FOR
    | TOKEN_EXCEPTION
    | TOKEN_END
    | TOKEN_ELSE
    | TOKEN_DOWNTO
    | TOKEN_DO
    | TOKEN_WHEN
    | TOKEN_CATCH
    | TOKEN_CASE
    | TOKEN_BEGIN
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_TILDETILDETILDE
    | TOKEN_EXCLAMATION
    | TOKEN_RBRACE
    | TOKEN_BARRBRACKET
    | TOKEN_BARBAR
    | TOKEN_BAR
    | TOKEN_LBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_RBRACKET
    | TOKEN_COLONEQUAL
    | TOKEN_LESSMINUS
    | TOKEN_LBRACKETBAR
    | TOKEN_LBRACKET
    | TOKEN_SEMI
    | TOKEN_COLONCOLON
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_MINUSGREATER
    | TOKEN_COMMA
    | TOKEN_STAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMPERSANDAMPERSAND
    | TOKEN_EQUALEQUAL
    | TOKEN_EQUAL
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_CHAR
    | TOKEN_INT
    | TOKEN_INFIX4
    | TOKEN_INFIX3
    | TOKEN_SUBTRACTIVE
    | TOKEN_INFIX2
    | TOKEN_INFIX1
    | TOKEN_INFIX0
    | TOKEN_QUOTED
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProgram
    | NONTERM_Program
    | NONTERM_Command_list
    | NONTERM_Opt_semi
    | NONTERM_Definition
    | NONTERM_Value_def
    | NONTERM_Function_def
    | NONTERM_Var_def
    | NONTERM_Equation
    | NONTERM_Expression_def
    | NONTERM_Expression
    | NONTERM_Expression_0
    | NONTERM_Expression_1
    | NONTERM_Expression_2_list
    | NONTERM_Expression_2
    | NONTERM_Matching
    | NONTERM_Matching_list
    | NONTERM_Expression_comma_list
    | NONTERM_Expr_may_type
    | NONTERM_Label_expr_list
    | NONTERM_Dir_flag
    | NONTERM_Opt_bar
    | NONTERM_Opt_when_clause
    | NONTERM_Pattern_0
    | NONTERM_Pattern_0_list
    | NONTERM_Pattern_1
    | NONTERM_Pattern_2
    | NONTERM_Pattern_3
    | NONTERM_Pattern
    | NONTERM_Label_pattern_list
    | NONTERM_Pattern_comma_list
    | NONTERM_Pattern_may_type
    | NONTERM_Infx
    | NONTERM_Type_expr
    | NONTERM_Type_star_list
    | NONTERM_Simple_type
    | NONTERM_Type_comma_list
    | NONTERM_Typedef_list
    | NONTERM_Typedef
    | NONTERM_Typedef_decl
    | NONTERM_Constr_decl
    | NONTERM_Constr1_decl
    | NONTERM_Label_decl
    | NONTERM_Label1_decl
    | NONTERM_Opt_mutable
    | NONTERM_Type_params
    | NONTERM_Type_var_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | WITH  -> 0 
  | WHILE  -> 1 
  | VAR  -> 2 
  | VAL  -> 3 
  | TYPE  -> 4 
  | TRY  -> 5 
  | TO  -> 6 
  | THEN  -> 7 
  | OF  -> 8 
  | MUTABLE  -> 9 
  | IN  -> 10 
  | IF  -> 11 
  | HIDEVAL  -> 12 
  | HIDE  -> 13 
  | FUNCT  -> 14 
  | FUN  -> 15 
  | FN  -> 16 
  | FOR  -> 17 
  | EXCEPTION  -> 18 
  | END  -> 19 
  | ELSE  -> 20 
  | DOWNTO  -> 21 
  | DO  -> 22 
  | WHEN  -> 23 
  | CATCH  -> 24 
  | CASE  -> 25 
  | BEGIN  -> 26 
  | AS  -> 27 
  | AND  -> 28 
  | TILDETILDETILDE  -> 29 
  | EXCLAMATION  -> 30 
  | RBRACE  -> 31 
  | BARRBRACKET  -> 32 
  | BARBAR  -> 33 
  | BAR  -> 34 
  | LBRACE  -> 35 
  | UNDERSCORE  -> 36 
  | RBRACKET  -> 37 
  | COLONEQUAL  -> 38 
  | LESSMINUS  -> 39 
  | LBRACKETBAR  -> 40 
  | LBRACKET  -> 41 
  | SEMI  -> 42 
  | COLONCOLON  -> 43 
  | COLON  -> 44 
  | DOT  -> 45 
  | MINUSGREATER  -> 46 
  | COMMA  -> 47 
  | STAR  -> 48 
  | RPAREN  -> 49 
  | LPAREN  -> 50 
  | AMPERSANDAMPERSAND  -> 51 
  | EQUALEQUAL  -> 52 
  | EQUAL  -> 53 
  | EOF  -> 54 
  | STRING _ -> 55 
  | FLOAT _ -> 56 
  | CHAR _ -> 57 
  | INT _ -> 58 
  | INFIX4 _ -> 59 
  | INFIX3 _ -> 60 
  | SUBTRACTIVE _ -> 61 
  | INFIX2 _ -> 62 
  | INFIX1 _ -> 63 
  | INFIX0 _ -> 64 
  | QUOTED _ -> 65 
  | IDENT _ -> 66 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_WITH 
  | 1 -> TOKEN_WHILE 
  | 2 -> TOKEN_VAR 
  | 3 -> TOKEN_VAL 
  | 4 -> TOKEN_TYPE 
  | 5 -> TOKEN_TRY 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_OF 
  | 9 -> TOKEN_MUTABLE 
  | 10 -> TOKEN_IN 
  | 11 -> TOKEN_IF 
  | 12 -> TOKEN_HIDEVAL 
  | 13 -> TOKEN_HIDE 
  | 14 -> TOKEN_FUNCT 
  | 15 -> TOKEN_FUN 
  | 16 -> TOKEN_FN 
  | 17 -> TOKEN_FOR 
  | 18 -> TOKEN_EXCEPTION 
  | 19 -> TOKEN_END 
  | 20 -> TOKEN_ELSE 
  | 21 -> TOKEN_DOWNTO 
  | 22 -> TOKEN_DO 
  | 23 -> TOKEN_WHEN 
  | 24 -> TOKEN_CATCH 
  | 25 -> TOKEN_CASE 
  | 26 -> TOKEN_BEGIN 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_TILDETILDETILDE 
  | 30 -> TOKEN_EXCLAMATION 
  | 31 -> TOKEN_RBRACE 
  | 32 -> TOKEN_BARRBRACKET 
  | 33 -> TOKEN_BARBAR 
  | 34 -> TOKEN_BAR 
  | 35 -> TOKEN_LBRACE 
  | 36 -> TOKEN_UNDERSCORE 
  | 37 -> TOKEN_RBRACKET 
  | 38 -> TOKEN_COLONEQUAL 
  | 39 -> TOKEN_LESSMINUS 
  | 40 -> TOKEN_LBRACKETBAR 
  | 41 -> TOKEN_LBRACKET 
  | 42 -> TOKEN_SEMI 
  | 43 -> TOKEN_COLONCOLON 
  | 44 -> TOKEN_COLON 
  | 45 -> TOKEN_DOT 
  | 46 -> TOKEN_MINUSGREATER 
  | 47 -> TOKEN_COMMA 
  | 48 -> TOKEN_STAR 
  | 49 -> TOKEN_RPAREN 
  | 50 -> TOKEN_LPAREN 
  | 51 -> TOKEN_AMPERSANDAMPERSAND 
  | 52 -> TOKEN_EQUALEQUAL 
  | 53 -> TOKEN_EQUAL 
  | 54 -> TOKEN_EOF 
  | 55 -> TOKEN_STRING 
  | 56 -> TOKEN_FLOAT 
  | 57 -> TOKEN_CHAR 
  | 58 -> TOKEN_INT 
  | 59 -> TOKEN_INFIX4 
  | 60 -> TOKEN_INFIX3 
  | 61 -> TOKEN_SUBTRACTIVE 
  | 62 -> TOKEN_INFIX2 
  | 63 -> TOKEN_INFIX1 
  | 64 -> TOKEN_INFIX0 
  | 65 -> TOKEN_QUOTED 
  | 66 -> TOKEN_IDENT 
  | 69 -> TOKEN_end_of_input
  | 67 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProgram 
    | 1 -> NONTERM_Program 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Command_list 
    | 4 -> NONTERM_Command_list 
    | 5 -> NONTERM_Command_list 
    | 6 -> NONTERM_Command_list 
    | 7 -> NONTERM_Opt_semi 
    | 8 -> NONTERM_Opt_semi 
    | 9 -> NONTERM_Definition 
    | 10 -> NONTERM_Definition 
    | 11 -> NONTERM_Definition 
    | 12 -> NONTERM_Definition 
    | 13 -> NONTERM_Definition 
    | 14 -> NONTERM_Definition 
    | 15 -> NONTERM_Definition 
    | 16 -> NONTERM_Value_def 
    | 17 -> NONTERM_Value_def 
    | 18 -> NONTERM_Function_def 
    | 19 -> NONTERM_Function_def 
    | 20 -> NONTERM_Var_def 
    | 21 -> NONTERM_Var_def 
    | 22 -> NONTERM_Equation 
    | 23 -> NONTERM_Expression_def 
    | 24 -> NONTERM_Expression_def 
    | 25 -> NONTERM_Expression 
    | 26 -> NONTERM_Expression 
    | 27 -> NONTERM_Expression 
    | 28 -> NONTERM_Expression 
    | 29 -> NONTERM_Expression 
    | 30 -> NONTERM_Expression 
    | 31 -> NONTERM_Expression 
    | 32 -> NONTERM_Expression 
    | 33 -> NONTERM_Expression 
    | 34 -> NONTERM_Expression 
    | 35 -> NONTERM_Expression 
    | 36 -> NONTERM_Expression 
    | 37 -> NONTERM_Expression_0 
    | 38 -> NONTERM_Expression_0 
    | 39 -> NONTERM_Expression_0 
    | 40 -> NONTERM_Expression_0 
    | 41 -> NONTERM_Expression_0 
    | 42 -> NONTERM_Expression_0 
    | 43 -> NONTERM_Expression_0 
    | 44 -> NONTERM_Expression_0 
    | 45 -> NONTERM_Expression_0 
    | 46 -> NONTERM_Expression_0 
    | 47 -> NONTERM_Expression_0 
    | 48 -> NONTERM_Expression_0 
    | 49 -> NONTERM_Expression_0 
    | 50 -> NONTERM_Expression_0 
    | 51 -> NONTERM_Expression_0 
    | 52 -> NONTERM_Expression_0 
    | 53 -> NONTERM_Expression_1 
    | 54 -> NONTERM_Expression_2_list 
    | 55 -> NONTERM_Expression_2_list 
    | 56 -> NONTERM_Expression_2 
    | 57 -> NONTERM_Expression_2 
    | 58 -> NONTERM_Expression_2 
    | 59 -> NONTERM_Expression_2 
    | 60 -> NONTERM_Expression_2 
    | 61 -> NONTERM_Expression_2 
    | 62 -> NONTERM_Expression_2 
    | 63 -> NONTERM_Expression_2 
    | 64 -> NONTERM_Expression_2 
    | 65 -> NONTERM_Expression_2 
    | 66 -> NONTERM_Expression_2 
    | 67 -> NONTERM_Expression_2 
    | 68 -> NONTERM_Expression_2 
    | 69 -> NONTERM_Expression_2 
    | 70 -> NONTERM_Expression_2 
    | 71 -> NONTERM_Expression_2 
    | 72 -> NONTERM_Matching 
    | 73 -> NONTERM_Matching_list 
    | 74 -> NONTERM_Matching_list 
    | 75 -> NONTERM_Expression_comma_list 
    | 76 -> NONTERM_Expression_comma_list 
    | 77 -> NONTERM_Expression_comma_list 
    | 78 -> NONTERM_Expr_may_type 
    | 79 -> NONTERM_Expr_may_type 
    | 80 -> NONTERM_Label_expr_list 
    | 81 -> NONTERM_Label_expr_list 
    | 82 -> NONTERM_Dir_flag 
    | 83 -> NONTERM_Dir_flag 
    | 84 -> NONTERM_Opt_bar 
    | 85 -> NONTERM_Opt_bar 
    | 86 -> NONTERM_Opt_when_clause 
    | 87 -> NONTERM_Opt_when_clause 
    | 88 -> NONTERM_Pattern_0 
    | 89 -> NONTERM_Pattern_0 
    | 90 -> NONTERM_Pattern_0 
    | 91 -> NONTERM_Pattern_0 
    | 92 -> NONTERM_Pattern_0 
    | 93 -> NONTERM_Pattern_0 
    | 94 -> NONTERM_Pattern_0 
    | 95 -> NONTERM_Pattern_0 
    | 96 -> NONTERM_Pattern_0 
    | 97 -> NONTERM_Pattern_0 
    | 98 -> NONTERM_Pattern_0 
    | 99 -> NONTERM_Pattern_0 
    | 100 -> NONTERM_Pattern_0_list 
    | 101 -> NONTERM_Pattern_0_list 
    | 102 -> NONTERM_Pattern_1 
    | 103 -> NONTERM_Pattern_1 
    | 104 -> NONTERM_Pattern_2 
    | 105 -> NONTERM_Pattern_2 
    | 106 -> NONTERM_Pattern_3 
    | 107 -> NONTERM_Pattern_3 
    | 108 -> NONTERM_Pattern 
    | 109 -> NONTERM_Pattern 
    | 110 -> NONTERM_Label_pattern_list 
    | 111 -> NONTERM_Label_pattern_list 
    | 112 -> NONTERM_Pattern_comma_list 
    | 113 -> NONTERM_Pattern_comma_list 
    | 114 -> NONTERM_Pattern_comma_list 
    | 115 -> NONTERM_Pattern_may_type 
    | 116 -> NONTERM_Pattern_may_type 
    | 117 -> NONTERM_Infx 
    | 118 -> NONTERM_Infx 
    | 119 -> NONTERM_Infx 
    | 120 -> NONTERM_Infx 
    | 121 -> NONTERM_Infx 
    | 122 -> NONTERM_Infx 
    | 123 -> NONTERM_Infx 
    | 124 -> NONTERM_Infx 
    | 125 -> NONTERM_Infx 
    | 126 -> NONTERM_Infx 
    | 127 -> NONTERM_Infx 
    | 128 -> NONTERM_Infx 
    | 129 -> NONTERM_Infx 
    | 130 -> NONTERM_Type_expr 
    | 131 -> NONTERM_Type_expr 
    | 132 -> NONTERM_Type_star_list 
    | 133 -> NONTERM_Type_star_list 
    | 134 -> NONTERM_Simple_type 
    | 135 -> NONTERM_Simple_type 
    | 136 -> NONTERM_Simple_type 
    | 137 -> NONTERM_Simple_type 
    | 138 -> NONTERM_Simple_type 
    | 139 -> NONTERM_Type_comma_list 
    | 140 -> NONTERM_Type_comma_list 
    | 141 -> NONTERM_Typedef_list 
    | 142 -> NONTERM_Typedef_list 
    | 143 -> NONTERM_Typedef 
    | 144 -> NONTERM_Typedef_decl 
    | 145 -> NONTERM_Typedef_decl 
    | 146 -> NONTERM_Typedef_decl 
    | 147 -> NONTERM_Constr_decl 
    | 148 -> NONTERM_Constr_decl 
    | 149 -> NONTERM_Constr1_decl 
    | 150 -> NONTERM_Constr1_decl 
    | 151 -> NONTERM_Label_decl 
    | 152 -> NONTERM_Label_decl 
    | 153 -> NONTERM_Label1_decl 
    | 154 -> NONTERM_Opt_mutable 
    | 155 -> NONTERM_Opt_mutable 
    | 156 -> NONTERM_Type_params 
    | 157 -> NONTERM_Type_params 
    | 158 -> NONTERM_Type_params 
    | 159 -> NONTERM_Type_var_list 
    | 160 -> NONTERM_Type_var_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 69 
let _fsyacc_tagOfErrorTerminal = 67

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | WITH  -> "WITH" 
  | WHILE  -> "WHILE" 
  | VAR  -> "VAR" 
  | VAL  -> "VAL" 
  | TYPE  -> "TYPE" 
  | TRY  -> "TRY" 
  | TO  -> "TO" 
  | THEN  -> "THEN" 
  | OF  -> "OF" 
  | MUTABLE  -> "MUTABLE" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | HIDEVAL  -> "HIDEVAL" 
  | HIDE  -> "HIDE" 
  | FUNCT  -> "FUNCT" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | FOR  -> "FOR" 
  | EXCEPTION  -> "EXCEPTION" 
  | END  -> "END" 
  | ELSE  -> "ELSE" 
  | DOWNTO  -> "DOWNTO" 
  | DO  -> "DO" 
  | WHEN  -> "WHEN" 
  | CATCH  -> "CATCH" 
  | CASE  -> "CASE" 
  | BEGIN  -> "BEGIN" 
  | AS  -> "AS" 
  | AND  -> "AND" 
  | TILDETILDETILDE  -> "TILDETILDETILDE" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | RBRACE  -> "RBRACE" 
  | BARRBRACKET  -> "BARRBRACKET" 
  | BARBAR  -> "BARBAR" 
  | BAR  -> "BAR" 
  | LBRACE  -> "LBRACE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | RBRACKET  -> "RBRACKET" 
  | COLONEQUAL  -> "COLONEQUAL" 
  | LESSMINUS  -> "LESSMINUS" 
  | LBRACKETBAR  -> "LBRACKETBAR" 
  | LBRACKET  -> "LBRACKET" 
  | SEMI  -> "SEMI" 
  | COLONCOLON  -> "COLONCOLON" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | MINUSGREATER  -> "MINUSGREATER" 
  | COMMA  -> "COMMA" 
  | STAR  -> "STAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMPERSANDAMPERSAND  -> "AMPERSANDAMPERSAND" 
  | EQUALEQUAL  -> "EQUALEQUAL" 
  | EQUAL  -> "EQUAL" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | CHAR _ -> "CHAR" 
  | INT _ -> "INT" 
  | INFIX4 _ -> "INFIX4" 
  | INFIX3 _ -> "INFIX3" 
  | SUBTRACTIVE _ -> "SUBTRACTIVE" 
  | INFIX2 _ -> "INFIX2" 
  | INFIX1 _ -> "INFIX1" 
  | INFIX0 _ -> "INFIX0" 
  | QUOTED _ -> "QUOTED" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | WITH  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | HIDEVAL  -> (null : System.Object) 
  | HIDE  -> (null : System.Object) 
  | FUNCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | EXCEPTION  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOWNTO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | TILDETILDETILDE  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | BARRBRACKET  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | COLONEQUAL  -> (null : System.Object) 
  | LESSMINUS  -> (null : System.Object) 
  | LBRACKETBAR  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLONCOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | MINUSGREATER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMPERSANDAMPERSAND  -> (null : System.Object) 
  | EQUALEQUAL  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX4 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX3 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUBTRACTIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX2 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX0 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUOTED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 162us; 6us; 2us; 65535us; 2us; 3us; 6us; 7us; 4us; 65535us; 0us; 11us; 3us; 8us; 7us; 8us; 162us; 11us; 2us; 65535us; 13us; 14us; 29us; 30us; 2us; 65535us; 15us; 16us; 33us; 34us; 2us; 65535us; 17us; 18us; 37us; 38us; 1us; 65535us; 31us; 32us; 3us; 65535us; 27us; 28us; 35us; 36us; 39us; 40us; 28us; 65535us; 0us; 12us; 9us; 10us; 43us; 44us; 45us; 46us; 50us; 51us; 53us; 54us; 57us; 58us; 60us; 61us; 63us; 64us; 65us; 66us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 88us; 89us; 136us; 175us; 141us; 175us; 144us; 175us; 159us; 160us; 162us; 12us; 167us; 168us; 173us; 175us; 179us; 180us; 186us; 187us; 44us; 65535us; 0us; 47us; 9us; 47us; 43us; 47us; 45us; 47us; 50us; 47us; 53us; 47us; 57us; 47us; 60us; 47us; 63us; 47us; 65us; 47us; 67us; 47us; 69us; 47us; 71us; 47us; 73us; 47us; 77us; 47us; 79us; 47us; 81us; 47us; 83us; 47us; 88us; 47us; 96us; 98us; 97us; 98us; 99us; 100us; 114us; 101us; 115us; 102us; 116us; 103us; 117us; 104us; 118us; 105us; 119us; 106us; 120us; 107us; 121us; 108us; 122us; 109us; 123us; 110us; 124us; 111us; 125us; 112us; 126us; 113us; 136us; 47us; 141us; 47us; 144us; 47us; 159us; 47us; 162us; 47us; 167us; 47us; 173us; 47us; 179us; 47us; 186us; 47us; 45us; 65535us; 0us; 95us; 9us; 95us; 43us; 95us; 45us; 95us; 50us; 95us; 53us; 95us; 57us; 95us; 60us; 95us; 63us; 95us; 65us; 95us; 67us; 95us; 69us; 95us; 71us; 95us; 73us; 95us; 77us; 95us; 79us; 95us; 81us; 95us; 83us; 95us; 88us; 95us; 96us; 95us; 97us; 95us; 99us; 95us; 114us; 95us; 115us; 95us; 116us; 95us; 117us; 95us; 118us; 95us; 119us; 95us; 120us; 95us; 121us; 95us; 122us; 95us; 123us; 95us; 124us; 95us; 125us; 95us; 126us; 95us; 136us; 95us; 141us; 95us; 144us; 95us; 147us; 150us; 159us; 95us; 162us; 95us; 167us; 95us; 173us; 95us; 179us; 95us; 186us; 95us; 47us; 65535us; 0us; 127us; 9us; 127us; 43us; 127us; 45us; 127us; 50us; 127us; 53us; 127us; 55us; 129us; 57us; 127us; 60us; 127us; 63us; 127us; 65us; 127us; 67us; 127us; 69us; 127us; 71us; 127us; 73us; 127us; 77us; 127us; 79us; 127us; 81us; 127us; 83us; 127us; 88us; 127us; 96us; 127us; 97us; 127us; 99us; 127us; 114us; 127us; 115us; 127us; 116us; 127us; 117us; 127us; 118us; 127us; 119us; 127us; 120us; 127us; 121us; 127us; 122us; 127us; 123us; 127us; 124us; 127us; 125us; 127us; 126us; 127us; 128us; 129us; 136us; 127us; 141us; 127us; 144us; 127us; 147us; 127us; 159us; 127us; 162us; 127us; 167us; 127us; 173us; 127us; 179us; 127us; 186us; 127us; 49us; 65535us; 0us; 55us; 9us; 55us; 43us; 55us; 45us; 55us; 50us; 55us; 53us; 55us; 55us; 128us; 57us; 55us; 60us; 55us; 63us; 55us; 65us; 55us; 67us; 55us; 69us; 55us; 71us; 55us; 73us; 55us; 77us; 55us; 79us; 55us; 81us; 55us; 83us; 55us; 88us; 55us; 96us; 128us; 97us; 128us; 99us; 128us; 114us; 128us; 115us; 128us; 116us; 128us; 117us; 128us; 118us; 128us; 119us; 128us; 120us; 128us; 121us; 128us; 122us; 128us; 123us; 128us; 124us; 128us; 125us; 128us; 126us; 128us; 128us; 128us; 136us; 55us; 141us; 55us; 144us; 55us; 147us; 128us; 154us; 156us; 155us; 156us; 159us; 55us; 162us; 55us; 167us; 55us; 173us; 55us; 179us; 55us; 186us; 55us; 4us; 65535us; 86us; 169us; 91us; 169us; 93us; 169us; 170us; 169us; 4us; 65535us; 86us; 87us; 91us; 92us; 93us; 94us; 170us; 171us; 4us; 65535us; 136us; 137us; 141us; 142us; 144us; 145us; 173us; 174us; 4us; 65535us; 136us; 172us; 141us; 172us; 144us; 172us; 173us; 172us; 3us; 65535us; 147us; 148us; 151us; 152us; 181us; 182us; 1us; 65535us; 78us; 79us; 3us; 65535us; 85us; 86us; 90us; 91us; 271us; 272us; 1us; 65535us; 165us; 166us; 17us; 65535us; 13us; 212us; 29us; 212us; 31us; 210us; 48us; 210us; 86us; 212us; 91us; 212us; 93us; 212us; 170us; 212us; 189us; 213us; 198us; 212us; 201us; 212us; 204us; 212us; 210us; 210us; 215us; 212us; 219us; 212us; 224us; 212us; 229us; 212us; 3us; 65535us; 31us; 39us; 48us; 49us; 210us; 211us; 13us; 65535us; 13us; 214us; 29us; 214us; 86us; 214us; 91us; 214us; 93us; 214us; 170us; 214us; 198us; 214us; 201us; 214us; 204us; 214us; 215us; 214us; 219us; 214us; 224us; 214us; 229us; 214us; 13us; 65535us; 13us; 217us; 29us; 217us; 86us; 217us; 91us; 217us; 93us; 217us; 170us; 217us; 198us; 217us; 201us; 217us; 204us; 217us; 215us; 216us; 219us; 220us; 224us; 217us; 229us; 217us; 11us; 65535us; 13us; 218us; 29us; 218us; 86us; 218us; 91us; 218us; 93us; 218us; 170us; 218us; 198us; 218us; 201us; 218us; 204us; 218us; 224us; 218us; 229us; 218us; 11us; 65535us; 13us; 27us; 29us; 27us; 86us; 165us; 91us; 165us; 93us; 165us; 170us; 165us; 198us; 231us; 201us; 231us; 204us; 231us; 224us; 225us; 229us; 231us; 2us; 65535us; 207us; 208us; 226us; 227us; 4us; 65535us; 198us; 199us; 201us; 202us; 204us; 205us; 229us; 230us; 4us; 65535us; 198us; 228us; 201us; 228us; 204us; 228us; 229us; 228us; 1us; 65535us; 136us; 139us; 9us; 65535us; 41us; 42us; 176us; 177us; 232us; 233us; 246us; 247us; 255us; 256us; 257us; 262us; 263us; 262us; 277us; 278us; 289us; 290us; 10us; 65535us; 41us; 245us; 176us; 245us; 232us; 245us; 246us; 245us; 255us; 245us; 257us; 245us; 263us; 245us; 277us; 245us; 283us; 248us; 289us; 245us; 11us; 65535us; 41us; 251us; 176us; 251us; 232us; 251us; 246us; 251us; 249us; 250us; 255us; 251us; 257us; 251us; 263us; 251us; 277us; 251us; 283us; 251us; 289us; 251us; 2us; 65535us; 257us; 258us; 263us; 264us; 2us; 65535us; 19us; 20us; 266us; 267us; 2us; 65535us; 19us; 265us; 266us; 265us; 1us; 65535us; 269us; 270us; 2us; 65535us; 272us; 273us; 280us; 281us; 3us; 65535us; 25us; 26us; 272us; 279us; 280us; 279us; 2us; 65535us; 274us; 275us; 285us; 286us; 2us; 65535us; 274us; 284us; 285us; 284us; 2us; 65535us; 274us; 287us; 285us; 287us; 2us; 65535us; 19us; 268us; 266us; 268us; 2us; 65535us; 292us; 293us; 297us; 298us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 14us; 17us; 20us; 23us; 25us; 29us; 58us; 103us; 149us; 197us; 247us; 252us; 257us; 262us; 267us; 271us; 273us; 277us; 279us; 297us; 301us; 315us; 329us; 341us; 353us; 356us; 361us; 366us; 368us; 378us; 389us; 401us; 404us; 407us; 410us; 412us; 415us; 419us; 422us; 425us; 428us; 431us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 3us; 4us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 70us; 2us; 3us; 70us; 1us; 3us; 2us; 4us; 8us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 18us; 1us; 18us; 2us; 20us; 21us; 2us; 20us; 21us; 1us; 20us; 1us; 20us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 14us; 25us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 56us; 1us; 27us; 1us; 27us; 6us; 28us; 29us; 54us; 55us; 68us; 69us; 4us; 28us; 29us; 68us; 69us; 2us; 28us; 69us; 2us; 28us; 69us; 2us; 28us; 69us; 1us; 28us; 1us; 28us; 2us; 29us; 68us; 1us; 29us; 1us; 29us; 2us; 30us; 31us; 2us; 30us; 31us; 2us; 30us; 31us; 2us; 30us; 31us; 1us; 30us; 1us; 30us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 2us; 38us; 124us; 14us; 38us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 39us; 14us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 14us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 4us; 54us; 55us; 68us; 69us; 1us; 54us; 1us; 56us; 3us; 56us; 80us; 81us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 61us; 62us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 64us; 2us; 65us; 66us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 2us; 67us; 129us; 3us; 67us; 68us; 69us; 2us; 68us; 69us; 1us; 68us; 1us; 69us; 1us; 69us; 1us; 69us; 2us; 70us; 71us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 72us; 1us; 72us; 2us; 73us; 74us; 1us; 73us; 1us; 73us; 2us; 75us; 76us; 1us; 75us; 1us; 75us; 2us; 78us; 79us; 1us; 78us; 1us; 78us; 2us; 80us; 81us; 2us; 80us; 81us; 2us; 80us; 81us; 1us; 80us; 1us; 80us; 1us; 82us; 1us; 83us; 1us; 85us; 1us; 87us; 1us; 87us; 1us; 88us; 2us; 88us; 103us; 1us; 89us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 2us; 94us; 95us; 1us; 94us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 97us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 99us; 2us; 100us; 101us; 1us; 100us; 1us; 102us; 1us; 103us; 2us; 104us; 105us; 1us; 105us; 1us; 105us; 1us; 106us; 3us; 107us; 108us; 109us; 1us; 107us; 1us; 107us; 1us; 109us; 1us; 109us; 2us; 110us; 111us; 2us; 110us; 111us; 2us; 110us; 111us; 1us; 110us; 1us; 110us; 2us; 112us; 113us; 1us; 112us; 1us; 112us; 2us; 115us; 116us; 1us; 115us; 1us; 115us; 1us; 117us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 125us; 1us; 126us; 1us; 127us; 1us; 128us; 3us; 130us; 131us; 132us; 1us; 130us; 1us; 130us; 2us; 132us; 149us; 1us; 132us; 2us; 132us; 136us; 2us; 133us; 136us; 1us; 134us; 1us; 135us; 1us; 136us; 2us; 137us; 138us; 2us; 137us; 138us; 1us; 137us; 1us; 137us; 1us; 137us; 1us; 137us; 1us; 138us; 2us; 139us; 140us; 1us; 139us; 1us; 139us; 2us; 141us; 142us; 1us; 141us; 1us; 141us; 1us; 143us; 1us; 143us; 1us; 143us; 2us; 144us; 145us; 1us; 144us; 1us; 144us; 1us; 145us; 1us; 145us; 1us; 145us; 1us; 146us; 1us; 146us; 2us; 147us; 148us; 1us; 147us; 1us; 147us; 2us; 149us; 150us; 1us; 149us; 2us; 151us; 152us; 1us; 151us; 1us; 151us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 154us; 1us; 156us; 1us; 156us; 1us; 156us; 1us; 157us; 2us; 159us; 160us; 1us; 159us; 1us; 159us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 11us; 13us; 15us; 19us; 22us; 24us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 64us; 67us; 69us; 71us; 74us; 77us; 79us; 81us; 84us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 122us; 124us; 126us; 128us; 130us; 133us; 135us; 137us; 144us; 149us; 152us; 155us; 158us; 160us; 162us; 165us; 167us; 169us; 172us; 175us; 178us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 240us; 255us; 257us; 272us; 287us; 302us; 317us; 332us; 347us; 362us; 377us; 392us; 407us; 422us; 437us; 452us; 467us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 487us; 489us; 491us; 493us; 495us; 500us; 502us; 504us; 508us; 510us; 512us; 514us; 516us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 542us; 544us; 546us; 548us; 550us; 552us; 554us; 556us; 559us; 563us; 566us; 568us; 570us; 572us; 574us; 577us; 579us; 581us; 583us; 585us; 587us; 589us; 592us; 594us; 596us; 599us; 601us; 603us; 606us; 608us; 610us; 613us; 616us; 619us; 621us; 623us; 625us; 627us; 629us; 631us; 633us; 635us; 638us; 640us; 642us; 644us; 646us; 648us; 651us; 653us; 655us; 657us; 659us; 661us; 663us; 665us; 667us; 669us; 671us; 673us; 675us; 677us; 679us; 682us; 684us; 686us; 688us; 691us; 693us; 695us; 697us; 701us; 703us; 705us; 707us; 709us; 712us; 715us; 718us; 720us; 722us; 725us; 727us; 729us; 732us; 734us; 736us; 738us; 740us; 742us; 744us; 746us; 748us; 750us; 752us; 754us; 756us; 758us; 762us; 764us; 766us; 769us; 771us; 774us; 777us; 779us; 781us; 783us; 786us; 789us; 791us; 793us; 795us; 797us; 799us; 802us; 804us; 806us; 809us; 811us; 813us; 815us; 817us; 819us; 822us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 839us; 841us; 843us; 846us; 848us; 851us; 853us; 855us; 857us; 859us; 861us; 863us; 865us; 867us; 869us; 871us; 873us; 876us; 878us; |]
let _fsyacc_action_rows = 299
let _fsyacc_actionTableElements = [|28us; 32768us; 1us; 71us; 2us; 17us; 3us; 13us; 4us; 19us; 5us; 88us; 11us; 65us; 12us; 23us; 13us; 21us; 14us; 93us; 15us; 15us; 16us; 48us; 17us; 75us; 18us; 25us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 54us; 5us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 49152us; 1us; 16391us; 42us; 9us; 8us; 32768us; 2us; 17us; 3us; 13us; 4us; 19us; 12us; 23us; 13us; 21us; 15us; 15us; 18us; 25us; 54us; 4us; 0us; 16385us; 0us; 16386us; 1us; 16391us; 42us; 9us; 8us; 32768us; 2us; 17us; 3us; 13us; 4us; 19us; 12us; 23us; 13us; 21us; 15us; 15us; 18us; 25us; 19us; 163us; 0us; 16387us; 20us; 16392us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16393us; 1us; 32768us; 66us; 31us; 0us; 16394us; 1us; 32768us; 66us; 35us; 0us; 16395us; 2us; 16542us; 50us; 292us; 65us; 295us; 0us; 16396us; 1us; 32768us; 66us; 22us; 0us; 16397us; 1us; 32768us; 66us; 24us; 0us; 16398us; 1us; 32768us; 66us; 282us; 0us; 16399us; 2us; 32768us; 44us; 41us; 53us; 45us; 1us; 16401us; 28us; 29us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16400us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 188us; 1us; 16403us; 28us; 33us; 1us; 32768us; 66us; 31us; 0us; 16402us; 2us; 32768us; 44us; 41us; 53us; 45us; 1us; 16405us; 28us; 37us; 1us; 32768us; 66us; 35us; 0us; 16404us; 2us; 32768us; 44us; 41us; 53us; 45us; 0us; 16406us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 1us; 32768us; 53us; 43us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16407us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16408us; 13us; 16409us; 33us; 124us; 38us; 126us; 43us; 125us; 48us; 122us; 51us; 123us; 52us; 121us; 53us; 120us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 64us; 119us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 188us; 1us; 32768us; 46us; 50us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16410us; 1us; 16440us; 39us; 53us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16411us; 12us; 16439us; 26us; 162us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 45us; 56us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 66us; 130us; 2us; 32768us; 41us; 57us; 66us; 62us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 37us; 59us; 1us; 16453us; 39us; 60us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16412us; 1us; 16452us; 39us; 63us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16413us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 7us; 67us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 16415us; 20us; 69us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16414us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 22us; 73us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16416us; 1us; 32768us; 66us; 76us; 1us; 32768us; 53us; 77us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 2us; 32768us; 6us; 183us; 21us; 184us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 22us; 81us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16417us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 8us; 85us; 1us; 16468us; 34us; 185us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16418us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 24us; 90us; 1us; 16468us; 34us; 185us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16419us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16420us; 0us; 16421us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 16508us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 0us; 16422us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 0us; 16423us; 1us; 16424us; 59us; 114us; 1us; 16425us; 59us; 114us; 3us; 16426us; 48us; 122us; 59us; 114us; 60us; 115us; 3us; 16427us; 48us; 122us; 59us; 114us; 60us; 115us; 7us; 16428us; 43us; 125us; 48us; 122us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 7us; 16429us; 43us; 125us; 48us; 122us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 7us; 16430us; 43us; 125us; 48us; 122us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 7us; 16431us; 43us; 125us; 48us; 122us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 1us; 16432us; 59us; 114us; 10us; 16433us; 43us; 125us; 48us; 122us; 52us; 121us; 53us; 120us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 64us; 119us; 11us; 16434us; 43us; 125us; 48us; 122us; 51us; 123us; 52us; 121us; 53us; 120us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 64us; 119us; 6us; 16435us; 43us; 125us; 48us; 122us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 13us; 16436us; 33us; 124us; 38us; 126us; 43us; 125us; 48us; 122us; 51us; 123us; 52us; 121us; 53us; 120us; 59us; 114us; 60us; 115us; 61us; 117us; 62us; 116us; 63us; 118us; 64us; 119us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 13us; 32768us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 130us; 0us; 16437us; 12us; 16439us; 26us; 162us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 45us; 157us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 66us; 130us; 0us; 16438us; 0us; 16440us; 1us; 16440us; 53us; 179us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 31us; 16461us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 155us; 33us; 242us; 35us; 147us; 38us; 244us; 40us; 141us; 41us; 144us; 48us; 239us; 50us; 136us; 51us; 241us; 52us; 243us; 53us; 240us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 59us; 238us; 60us; 237us; 61us; 97us; 62us; 236us; 63us; 235us; 64us; 234us; 66us; 52us; 1us; 32768us; 49us; 138us; 0us; 16445us; 1us; 32768us; 49us; 140us; 0us; 16446us; 20us; 16461us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 32us; 143us; 0us; 16447us; 20us; 16461us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 37us; 146us; 0us; 16448us; 11us; 32768us; 26us; 162us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 66us; 131us; 1us; 32768us; 31us; 149us; 0us; 16449us; 1us; 32768us; 0us; 151us; 1us; 32768us; 66us; 178us; 1us; 32768us; 31us; 153us; 0us; 16450us; 11us; 32768us; 26us; 162us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 66us; 130us; 11us; 16513us; 26us; 162us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 66us; 130us; 1us; 16451us; 45us; 157us; 2us; 32768us; 41us; 159us; 66us; 158us; 0us; 16452us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 32768us; 37us; 161us; 0us; 16453us; 28us; 32768us; 1us; 71us; 2us; 17us; 3us; 13us; 4us; 19us; 5us; 88us; 11us; 65us; 12us; 23us; 13us; 21us; 14us; 93us; 15us; 15us; 16us; 48us; 17us; 75us; 18us; 25us; 19us; 164us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16454us; 0us; 16455us; 1us; 16470us; 23us; 186us; 1us; 32768us; 46us; 167us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16456us; 1us; 16458us; 34us; 170us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16457us; 1us; 16460us; 47us; 173us; 20us; 16461us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16459us; 1us; 16463us; 44us; 176us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16462us; 1us; 32768us; 53us; 179us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 1us; 16465us; 47us; 181us; 1us; 32768us; 66us; 178us; 0us; 16464us; 0us; 16466us; 0us; 16467us; 0us; 16469us; 20us; 32768us; 1us; 71us; 5us; 88us; 11us; 65us; 14us; 93us; 16us; 48us; 17us; 75us; 25us; 83us; 26us; 162us; 29us; 99us; 30us; 154us; 35us; 147us; 40us; 141us; 41us; 144us; 50us; 136us; 55us; 132us; 56us; 135us; 57us; 134us; 58us; 133us; 61us; 96us; 66us; 52us; 0us; 16471us; 0us; 16472us; 11us; 16472us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 188us; 0us; 16473us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 2us; 32768us; 56us; 197us; 58us; 196us; 0us; 16478us; 0us; 16479us; 11us; 16498us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 1us; 32768us; 49us; 200us; 0us; 16480us; 11us; 16498us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 1us; 32768us; 37us; 203us; 0us; 16481us; 11us; 16498us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 1us; 32768us; 32us; 206us; 0us; 16482us; 1us; 32768us; 66us; 223us; 1us; 32768us; 31us; 209us; 0us; 16483us; 11us; 16485us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 188us; 0us; 16484us; 0us; 16486us; 0us; 16487us; 1us; 16488us; 43us; 215us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16489us; 0us; 16490us; 2us; 16492us; 27us; 221us; 34us; 219us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16491us; 1us; 32768us; 66us; 222us; 0us; 16493us; 1us; 32768us; 53us; 224us; 11us; 32768us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 1us; 16495us; 47us; 226us; 1us; 32768us; 66us; 223us; 0us; 16494us; 1us; 16497us; 47us; 229us; 11us; 16498us; 35us; 207us; 36us; 190us; 40us; 204us; 41us; 201us; 50us; 198us; 55us; 191us; 56us; 194us; 57us; 193us; 58us; 192us; 61us; 195us; 66us; 189us; 0us; 16496us; 1us; 16500us; 44us; 232us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16499us; 0us; 16501us; 0us; 16502us; 0us; 16503us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 0us; 16507us; 0us; 16509us; 0us; 16510us; 0us; 16511us; 0us; 16512us; 2us; 16515us; 46us; 246us; 48us; 249us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16514us; 1us; 16533us; 48us; 249us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 1us; 16516us; 66us; 254us; 1us; 16517us; 66us; 254us; 0us; 16518us; 0us; 16519us; 0us; 16520us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 2us; 32768us; 47us; 257us; 49us; 261us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 1us; 32768us; 49us; 259us; 1us; 32768us; 66us; 260us; 0us; 16521us; 0us; 16522us; 1us; 16524us; 47us; 263us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16523us; 1us; 16526us; 28us; 266us; 2us; 16542us; 50us; 292us; 65us; 295us; 0us; 16525us; 1us; 32768us; 66us; 269us; 2us; 32768us; 52us; 277us; 53us; 271us; 0us; 16527us; 2us; 16468us; 34us; 185us; 35us; 274us; 1us; 32768us; 66us; 282us; 0us; 16528us; 1us; 16539us; 9us; 291us; 1us; 32768us; 31us; 276us; 0us; 16529us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16530us; 1us; 16532us; 34us; 280us; 1us; 32768us; 66us; 282us; 0us; 16531us; 1us; 16534us; 8us; 283us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 1us; 16536us; 47us; 285us; 1us; 16539us; 9us; 291us; 0us; 16535us; 1us; 32768us; 66us; 288us; 1us; 32768us; 44us; 289us; 3us; 32768us; 50us; 255us; 65us; 252us; 66us; 253us; 0us; 16537us; 0us; 16538us; 1us; 32768us; 65us; 296us; 1us; 32768us; 49us; 294us; 0us; 16540us; 0us; 16541us; 1us; 16544us; 47us; 297us; 1us; 32768us; 65us; 296us; 0us; 16543us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 29us; 30us; 32us; 41us; 42us; 43us; 45us; 54us; 55us; 76us; 77us; 78us; 79us; 91us; 92us; 94us; 95us; 97us; 98us; 101us; 102us; 104us; 105us; 107us; 108us; 110us; 111us; 114us; 116us; 128us; 129us; 141us; 143us; 145us; 146us; 149us; 151us; 153us; 154us; 157us; 158us; 162us; 164us; 185us; 186us; 207us; 208us; 222us; 234us; 236us; 257us; 258us; 260us; 281us; 282us; 295us; 298us; 319us; 321us; 323us; 344us; 345us; 347us; 368us; 369us; 390us; 392us; 413us; 415us; 436us; 437us; 458us; 460us; 481us; 482us; 484us; 486us; 507us; 510us; 531us; 533us; 554us; 555us; 576us; 578us; 580us; 592us; 593us; 614us; 616us; 618us; 630us; 631us; 643us; 644us; 645us; 659us; 673us; 674us; 688us; 689us; 691us; 693us; 697us; 701us; 709us; 717us; 725us; 733us; 735us; 746us; 758us; 765us; 779us; 793us; 807us; 821us; 835us; 849us; 863us; 877us; 891us; 905us; 919us; 933us; 947us; 961us; 962us; 975us; 976us; 977us; 979us; 980us; 981us; 982us; 983us; 1015us; 1017us; 1018us; 1020us; 1021us; 1042us; 1044us; 1045us; 1066us; 1068us; 1069us; 1081us; 1083us; 1084us; 1086us; 1088us; 1090us; 1091us; 1103us; 1115us; 1117us; 1120us; 1121us; 1142us; 1144us; 1145us; 1174us; 1175us; 1176us; 1178us; 1180us; 1201us; 1202us; 1204us; 1216us; 1217us; 1219us; 1240us; 1241us; 1243us; 1247us; 1248us; 1250us; 1271us; 1273us; 1275us; 1276us; 1277us; 1278us; 1279us; 1300us; 1301us; 1302us; 1314us; 1315us; 1316us; 1317us; 1318us; 1319us; 1322us; 1323us; 1324us; 1336us; 1338us; 1339us; 1351us; 1353us; 1354us; 1366us; 1368us; 1369us; 1371us; 1373us; 1374us; 1386us; 1387us; 1388us; 1389us; 1391us; 1403us; 1404us; 1405us; 1408us; 1420us; 1421us; 1423us; 1424us; 1426us; 1438us; 1440us; 1442us; 1443us; 1445us; 1457us; 1458us; 1460us; 1464us; 1465us; 1466us; 1467us; 1468us; 1469us; 1470us; 1471us; 1472us; 1473us; 1474us; 1475us; 1476us; 1479us; 1483us; 1484us; 1486us; 1490us; 1492us; 1494us; 1495us; 1496us; 1497us; 1501us; 1504us; 1508us; 1510us; 1512us; 1513us; 1514us; 1516us; 1520us; 1521us; 1523us; 1526us; 1527us; 1529us; 1532us; 1533us; 1536us; 1538us; 1539us; 1541us; 1543us; 1544us; 1548us; 1549us; 1551us; 1553us; 1554us; 1556us; 1560us; 1562us; 1564us; 1565us; 1567us; 1569us; 1573us; 1574us; 1575us; 1577us; 1579us; 1580us; 1581us; 1583us; 1585us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 1us; 3us; 3us; 1us; 1us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 2us; 4us; 2us; 4us; 2us; 2us; 4us; 2us; 1us; 4us; 3us; 7us; 5us; 6us; 4us; 4us; 8us; 5us; 5us; 2us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 5us; 2us; 3us; 5us; 4us; 2us; 4us; 3us; 1us; 3us; 1us; 0us; 3us; 1us; 5us; 3us; 1us; 1us; 0us; 1us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 5us; 3us; 3us; 1us; 0us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 0us; 3us; 1us; 0us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 30us; 30us; 30us; 31us; 31us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 33us; 33us; 34us; 34us; 35us; 35us; 35us; 35us; 35us; 36us; 36us; 37us; 37us; 38us; 39us; 39us; 39us; 40us; 40us; 41us; 41us; 42us; 42us; 43us; 44us; 44us; 45us; 45us; 45us; 46us; 46us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 16404us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 16420us; 16421us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16437us; 65535us; 16438us; 16440us; 65535us; 16441us; 16442us; 16443us; 16444us; 65535us; 65535us; 16445us; 65535us; 16446us; 65535us; 65535us; 16447us; 65535us; 65535us; 16448us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 65535us; 16452us; 65535us; 65535us; 16453us; 65535us; 16454us; 16455us; 65535us; 65535us; 65535us; 16456us; 65535us; 65535us; 16457us; 65535us; 65535us; 16459us; 65535us; 65535us; 16462us; 65535us; 65535us; 65535us; 65535us; 16464us; 16466us; 16467us; 16469us; 65535us; 16471us; 16472us; 65535us; 16473us; 16474us; 16475us; 16476us; 16477us; 65535us; 16478us; 16479us; 65535us; 65535us; 16480us; 65535us; 65535us; 16481us; 65535us; 65535us; 16482us; 65535us; 65535us; 16483us; 65535us; 16484us; 16486us; 16487us; 65535us; 65535us; 16489us; 16490us; 65535us; 65535us; 16491us; 65535us; 16493us; 65535us; 65535us; 65535us; 65535us; 16494us; 65535us; 65535us; 16496us; 65535us; 65535us; 16499us; 16501us; 16502us; 16503us; 16504us; 16505us; 16506us; 16507us; 16509us; 16510us; 16511us; 16512us; 65535us; 65535us; 16514us; 65535us; 65535us; 65535us; 65535us; 16518us; 16519us; 16520us; 65535us; 65535us; 65535us; 65535us; 65535us; 16521us; 16522us; 65535us; 65535us; 16523us; 65535us; 65535us; 16525us; 65535us; 65535us; 16527us; 65535us; 65535us; 16528us; 65535us; 65535us; 16529us; 65535us; 16530us; 65535us; 65535us; 16531us; 65535us; 65535us; 65535us; 65535us; 16535us; 65535us; 65535us; 65535us; 16537us; 16538us; 65535us; 65535us; 16540us; 16541us; 65535us; 65535us; 16543us; |]
let _fsyacc_reductions ()  =    [| 
# 669 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsMiniMAL.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProgram));
# 678 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                       (List.rev _1, parseState.ParserLocalStore) 
                   )
# 116 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 690 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                       ([], parseState.ParserLocalStore) 
                   )
# 117 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 700 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                              _3 :: _1 
                   )
# 120 "Parser.fsy"
                 : 'Command_list));
# 713 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _3) :: _1 
                   )
# 121 "Parser.fsy"
                 : 'Command_list));
# 725 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                              _1 :: [] 
                   )
# 122 "Parser.fsy"
                 : 'Command_list));
# 736 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _1) :: [] 
                   )
# 123 "Parser.fsy"
                 : 'Command_list));
# 747 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                         () 
                   )
# 126 "Parser.fsy"
                 : 'Opt_semi));
# 757 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                         () 
                   )
# 127 "Parser.fsy"
                 : 'Opt_semi));
# 767 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                    make_cmd parseState (SCval _2) 
                   )
# 130 "Parser.fsy"
                 : 'Definition));
# 778 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                    make_cmd parseState (SCfun _2) 
                   )
# 131 "Parser.fsy"
                 : 'Definition));
# 789 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                    make_cmd parseState (SCvar _2) 
                   )
# 132 "Parser.fsy"
                 : 'Definition));
# 800 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                    make_cmd parseState (SCtype _2) 
                   )
# 133 "Parser.fsy"
                 : 'Definition));
# 811 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                    make_cmd parseState (SChide (_2, get_term_loc parseState 2)) 
                   )
# 134 "Parser.fsy"
                 : 'Definition));
# 822 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                    make_cmd parseState (SChideval _2) 
                   )
# 135 "Parser.fsy"
                 : 'Definition));
# 833 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                    make_cmd parseState (SCexn _2) 
                   )
# 136 "Parser.fsy"
                 : 'Definition));
# 844 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                                  (_1,_2) :: _4 
                   )
# 139 "Parser.fsy"
                 : 'Value_def));
# 857 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                  [_1,_2] 
                   )
# 140 "Parser.fsy"
                 : 'Value_def));
# 869 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                             (_1,_2) :: _4 
                   )
# 143 "Parser.fsy"
                 : 'Function_def));
# 882 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                             (_1,_2) :: [] 
                   )
# 144 "Parser.fsy"
                 : 'Function_def));
# 894 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                              (_1,_2) :: _4 
                   )
# 147 "Parser.fsy"
                 : 'Var_def));
# 907 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                              [_1,_2] 
                   )
# 148 "Parser.fsy"
                 : 'Var_def));
# 919 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                           make_expr parseState (SEfn (_1, _2)) 
                   )
# 151 "Parser.fsy"
                 : 'Equation));
# 931 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                              make_expr parseState (SEtype (_4,_2)) 
                   )
# 154 "Parser.fsy"
                 : 'Expression_def));
# 943 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                              _2 
                   )
# 155 "Parser.fsy"
                 : 'Expression_def));
# 954 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                                                                _1 
                   )
# 160 "Parser.fsy"
                 : 'Expression));
# 965 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                                                                make_expr parseState (SEfn (_2, _4)) 
                   )
# 161 "Parser.fsy"
                 : 'Expression));
# 977 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                                                make_expr parseState (SEset (_1, _3)) 
                   )
# 162 "Parser.fsy"
                 : 'Expression));
# 989 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                                                make_ternop parseState ".[]<-" _1 _4 _7 
                   )
# 163 "Parser.fsy"
                 : 'Expression));
# 1002 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                                                                make_expr parseState (SEsetfield (_1, _3, _5)) 
                   )
# 164 "Parser.fsy"
                 : 'Expression));
# 1015 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                                                                make_expr parseState (SEifthenelse (_2, _4, Some _6)) 
                   )
# 165 "Parser.fsy"
                 : 'Expression));
# 1028 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                                                                make_expr parseState (SEifthenelse (_2, _4, None)) 
                   )
# 166 "Parser.fsy"
                 : 'Expression));
# 1040 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                                                                make_expr parseState (SEwhile (_2, _4)) 
                   )
# 167 "Parser.fsy"
                 : 'Expression));
# 1052 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dir_flag)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                                                                make_expr parseState (SEfor (_2, _4, _5, _6, _8)) 
                   )
# 168 "Parser.fsy"
                 : 'Expression));
# 1067 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                                                                make_expr parseState (SEcase (_2, _5)) 
                   )
# 169 "Parser.fsy"
                 : 'Expression));
# 1080 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                                                                make_expr parseState (SEtry (_2, _5)) 
                   )
# 170 "Parser.fsy"
                 : 'Expression));
# 1093 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                                                make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), _2)))) 
                   )
# 171 "Parser.fsy"
                 : 'Expression));
# 1104 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                            _1 
                   )
# 174 "Parser.fsy"
                 : 'Expression_0));
# 1115 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                            make_minus_expr parseState _1 _2 
                   )
# 175 "Parser.fsy"
                 : 'Expression_0));
# 1127 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                                            make_unop parseState "~~~" _2 
                   )
# 176 "Parser.fsy"
                 : 'Expression_0));
# 1138 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 177 "Parser.fsy"
                 : 'Expression_0));
# 1151 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 178 "Parser.fsy"
                 : 'Expression_0));
# 1164 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 179 "Parser.fsy"
                 : 'Expression_0));
# 1177 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 180 "Parser.fsy"
                 : 'Expression_0));
# 1190 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 181 "Parser.fsy"
                 : 'Expression_0));
# 1203 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                            make_binop parseState _2 _1 _3 
                   )
# 182 "Parser.fsy"
                 : 'Expression_0));
# 1216 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                            make_binop parseState "=" _1 _3 
                   )
# 183 "Parser.fsy"
                 : 'Expression_0));
# 1228 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                                            make_binop parseState "==" _1 _3 
                   )
# 184 "Parser.fsy"
                 : 'Expression_0));
# 1240 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                                                            make_binop parseState "*" _1 _3 
                   )
# 185 "Parser.fsy"
                 : 'Expression_0));
# 1252 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                                            make_binop parseState "&&" _1 _3 
                   )
# 186 "Parser.fsy"
                 : 'Expression_0));
# 1264 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                                            make_binop parseState "||" _1 _3 
                   )
# 187 "Parser.fsy"
                 : 'Expression_0));
# 1276 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                                            make_unop parseState "::" (make_expr parseState (SEtuple [_1;_3])) 
                   )
# 188 "Parser.fsy"
                 : 'Expression_0));
# 1288 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                                            make_binop parseState ":=" _1 _3 
                   )
# 189 "Parser.fsy"
                 : 'Expression_0));
# 1300 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                               match _1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) 
                   )
# 192 "Parser.fsy"
                 : 'Expression_1));
# 1311 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 195 "Parser.fsy"
                 : 'Expression_2_list));
# 1323 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                            [_1] 
                   )
# 196 "Parser.fsy"
                 : 'Expression_2_list));
# 1334 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                                             make_expr parseState (SEid _1) 
                   )
# 199 "Parser.fsy"
                 : 'Expression_2));
# 1345 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                                             make_string parseState _1 
                   )
# 200 "Parser.fsy"
                 : 'Expression_2));
# 1356 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                                             make_expr parseState (SEint _1) 
                   )
# 201 "Parser.fsy"
                 : 'Expression_2));
# 1367 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                                                             make_expr parseState (SEchar _1) 
                   )
# 202 "Parser.fsy"
                 : 'Expression_2));
# 1378 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                                             make_expr parseState (SEfloat _1) 
                   )
# 203 "Parser.fsy"
                 : 'Expression_2));
# 1389 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                                             match _2 with [e] -> e | l -> make_expr parseState (SEtuple l) 
                   )
# 204 "Parser.fsy"
                 : 'Expression_2));
# 1400 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Infx)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                                             make_ident parseState _2 
                   )
# 205 "Parser.fsy"
                 : 'Expression_2));
# 1411 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                                                             make_expr parseState (SEarray _2) 
                   )
# 206 "Parser.fsy"
                 : 'Expression_2));
# 1422 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                                             List.foldBack (fun a l -> make_unop parseState "::" (make_expr parseState (SEtuple [a;l]))) _2 (make_ident parseState "[]") 
                   )
# 207 "Parser.fsy"
                 : 'Expression_2));
# 1433 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                                             make_expr parseState (SErecord (None, _2)) 
                   )
# 208 "Parser.fsy"
                 : 'Expression_2));
# 1444 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                                             make_expr parseState (SErecord (Some _2, _4)) 
                   )
# 209 "Parser.fsy"
                 : 'Expression_2));
# 1456 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                                             make_unop parseState "!" _2 
                   )
# 210 "Parser.fsy"
                 : 'Expression_2));
# 1467 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                                                             make_expr parseState (SEgetfield (_1, _3)) 
                   )
# 211 "Parser.fsy"
                 : 'Expression_2));
# 1479 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                                             make_binop parseState ".[]" _1 _4 
                   )
# 212 "Parser.fsy"
                 : 'Expression_2));
# 1491 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                                                             make_expr parseState (SEbegin (List.rev _2)) 
                   )
# 213 "Parser.fsy"
                 : 'Expression_2));
# 1503 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                                                             make_expr parseState (SEbegin []) 
                   )
# 214 "Parser.fsy"
                 : 'Expression_2));
# 1513 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_when_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                                                              (_1, _2, _4) 
                   )
# 217 "Parser.fsy"
                 : 'Matching));
# 1526 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 220 "Parser.fsy"
                 : 'Matching_list));
# 1538 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                        [_1] 
                   )
# 221 "Parser.fsy"
                 : 'Matching_list));
# 1549 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 224 "Parser.fsy"
                 : 'Expression_comma_list));
# 1561 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                                                       [_1] 
                   )
# 225 "Parser.fsy"
                 : 'Expression_comma_list));
# 1572 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                                                       [] 
                   )
# 226 "Parser.fsy"
                 : 'Expression_comma_list));
# 1582 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                                          make_expr parseState (SEtype (_1, _3)) 
                   )
# 229 "Parser.fsy"
                 : 'Expr_may_type));
# 1594 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "Parser.fsy"
                                                          _1 
                   )
# 230 "Parser.fsy"
                 : 'Expr_may_type));
# 1605 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 233 "Parser.fsy"
                 : 'Label_expr_list));
# 1618 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "Parser.fsy"
                                                                          [_1, _3] 
                   )
# 234 "Parser.fsy"
                 : 'Label_expr_list));
# 1630 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                    dirflag.Upto 
                   )
# 237 "Parser.fsy"
                 : 'Dir_flag));
# 1640 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                    dirflag.Downto 
                   )
# 238 "Parser.fsy"
                 : 'Dir_flag));
# 1650 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                         () 
                   )
# 241 "Parser.fsy"
                 : 'Opt_bar));
# 1660 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                         () 
                   )
# 242 "Parser.fsy"
                 : 'Opt_bar));
# 1670 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                             None 
                   )
# 245 "Parser.fsy"
                 : 'Opt_when_clause));
# 1680 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                             Some _2 
                   )
# 246 "Parser.fsy"
                 : 'Opt_when_clause));
# 1691 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                                                         make_pat parseState (SPid _1) 
                   )
# 251 "Parser.fsy"
                 : 'Pattern_0));
# 1702 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                                                         make_pat parseState SPany 
                   )
# 252 "Parser.fsy"
                 : 'Pattern_0));
# 1712 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                                                         make_pat_string parseState _1 
                   )
# 253 "Parser.fsy"
                 : 'Pattern_0));
# 1723 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                                                         make_pat parseState (SPint _1) 
                   )
# 254 "Parser.fsy"
                 : 'Pattern_0));
# 1734 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                                                         make_pat parseState (SPchar _1) 
                   )
# 255 "Parser.fsy"
                 : 'Pattern_0));
# 1745 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                                         make_pat parseState (SPfloat _1) 
                   )
# 256 "Parser.fsy"
                 : 'Pattern_0));
# 1756 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                                                         make_pat parseState (SPint(make_minus _2)) 
                   )
# 257 "Parser.fsy"
                 : 'Pattern_0));
# 1768 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                                                         make_pat parseState (SPfloat(- _2)) 
                   )
# 258 "Parser.fsy"
                 : 'Pattern_0));
# 1780 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                                                         match _2 with [pat] -> pat | l -> make_pat parseState (SPtuple l) 
                   )
# 259 "Parser.fsy"
                 : 'Pattern_0));
# 1791 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                                                         List.foldBack (make_cons_pat parseState) _2 { sp_desc = SPid "[]" ; sp_loc = get_loc parseState } 
                   )
# 260 "Parser.fsy"
                 : 'Pattern_0));
# 1802 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                                                         make_pat parseState (SParray _2) 
                   )
# 261 "Parser.fsy"
                 : 'Pattern_0));
# 1813 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                                                         make_pat parseState (SPrecord _2) 
                   )
# 262 "Parser.fsy"
                 : 'Pattern_0));
# 1824 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 265 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 265 "Parser.fsy"
                 : 'Pattern_0_list));
# 1836 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                                      _1 :: [] 
                   )
# 266 "Parser.fsy"
                 : 'Pattern_0_list));
# 1847 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "Parser.fsy"
                                             _1 
                   )
# 269 "Parser.fsy"
                 : 'Pattern_1));
# 1858 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "Parser.fsy"
                                             make_pat parseState (SPapply (_1, _2)) 
                   )
# 270 "Parser.fsy"
                 : 'Pattern_1));
# 1870 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                                            _1 
                   )
# 273 "Parser.fsy"
                 : 'Pattern_2));
# 1881 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 274 "Parser.fsy"
                                                            make_cons_pat parseState _1 _3 
                   )
# 274 "Parser.fsy"
                 : 'Pattern_2));
# 1893 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                                     _1 
                   )
# 277 "Parser.fsy"
                 : 'Pattern_3));
# 1904 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "Parser.fsy"
                                                     make_pat parseState (SPor(_1, _3)) 
                   )
# 278 "Parser.fsy"
                 : 'Pattern_3));
# 1916 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                                                _1 
                   )
# 281 "Parser.fsy"
                 : 'Pattern));
# 1927 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "Parser.fsy"
                                                make_pat parseState (SPas (_1, _3)) 
                   )
# 282 "Parser.fsy"
                 : 'Pattern));
# 1939 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 285 "Parser.fsy"
                 : 'Label_pattern_list));
# 1952 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "Parser.fsy"
                                                                          (_1, _3) :: [] 
                   )
# 286 "Parser.fsy"
                 : 'Label_pattern_list));
# 1964 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 289 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1976 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                                                       _1 :: [] 
                   )
# 290 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1987 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "Parser.fsy"
                                                                       [] 
                   )
# 291 "Parser.fsy"
                 : 'Pattern_comma_list));
# 1997 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 294 "Parser.fsy"
                                                     make_pat parseState (SPtype (_1, _3)) 
                   )
# 294 "Parser.fsy"
                 : 'Pattern_may_type));
# 2009 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "Parser.fsy"
                                                     _1 
                   )
# 295 "Parser.fsy"
                 : 'Pattern_may_type));
# 2020 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                                                _1 
                   )
# 298 "Parser.fsy"
                 : 'Infx));
# 2031 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "Parser.fsy"
                                                _1 
                   )
# 299 "Parser.fsy"
                 : 'Infx));
# 2042 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                _1 
                   )
# 300 "Parser.fsy"
                 : 'Infx));
# 2053 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                _1 
                   )
# 301 "Parser.fsy"
                 : 'Infx));
# 2064 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                _1 
                   )
# 302 "Parser.fsy"
                 : 'Infx));
# 2075 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "Parser.fsy"
                                                "*" 
                   )
# 303 "Parser.fsy"
                 : 'Infx));
# 2085 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                                "=" 
                   )
# 304 "Parser.fsy"
                 : 'Infx));
# 2095 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                _1 
                   )
# 305 "Parser.fsy"
                 : 'Infx));
# 2106 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                                "&&" 
                   )
# 306 "Parser.fsy"
                 : 'Infx));
# 2116 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "Parser.fsy"
                                                "||" 
                   )
# 307 "Parser.fsy"
                 : 'Infx));
# 2126 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                                "==" 
                   )
# 308 "Parser.fsy"
                 : 'Infx));
# 2136 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                ":=" 
                   )
# 309 "Parser.fsy"
                 : 'Infx));
# 2146 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                                "!" 
                   )
# 310 "Parser.fsy"
                 : 'Infx));
# 2156 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "Parser.fsy"
                                                                   make_typ parseState (STarrow(type_expr_of_type_star_list parseState _1, _3)) 
                   )
# 315 "Parser.fsy"
                 : 'Type_expr));
# 2168 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                                                   type_expr_of_type_star_list parseState _1 
                   )
# 316 "Parser.fsy"
                 : 'Type_expr));
# 2179 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                                             _3 :: _1 
                   )
# 319 "Parser.fsy"
                 : 'Type_star_list));
# 2191 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                                             [_1] 
                   )
# 320 "Parser.fsy"
                 : 'Type_star_list));
# 2202 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "Parser.fsy"
                                                                                 make_typ parseState (STvar _1) 
                   )
# 323 "Parser.fsy"
                 : 'Simple_type));
# 2213 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                                                                 mark_as_typename parseState 1; make_typ parseState (STconstr(_1, [], get_term_loc parseState 1)) 
                   )
# 324 "Parser.fsy"
                 : 'Simple_type));
# 2224 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "Parser.fsy"
                                                                                 mark_as_typename parseState 2; make_typ parseState (STconstr(_2, [_1], get_term_loc parseState 2)) 
                   )
# 325 "Parser.fsy"
                 : 'Simple_type));
# 2236 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "Parser.fsy"
                                                                                 mark_as_typename parseState 6; make_typ parseState (STconstr(_6, _2 :: _4, get_term_loc parseState 6)) 
                   )
# 326 "Parser.fsy"
                 : 'Simple_type));
# 2249 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "Parser.fsy"
                                                                                 _2 
                   )
# 327 "Parser.fsy"
                 : 'Simple_type));
# 2260 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 330 "Parser.fsy"
                 : 'Type_comma_list));
# 2272 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "Parser.fsy"
                                                             [_1] 
                   )
# 331 "Parser.fsy"
                 : 'Type_comma_list));
# 2283 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 336 "Parser.fsy"
                 : 'Typedef_list));
# 2295 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "Parser.fsy"
                                                      [_1] 
                   )
# 337 "Parser.fsy"
                 : 'Typedef_list));
# 2306 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_params)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "Parser.fsy"
                                                            mark_as_typename parseState 2
                                                            make_typedef parseState _1 _2 _3 
                   )
# 340 "Parser.fsy"
                 : 'Typedef));
# 2320 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "Parser.fsy"
                                                            SKvariant _3 
                   )
# 344 "Parser.fsy"
                 : 'Typedef_decl));
# 2332 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "Parser.fsy"
                                                            SKrecord _3 
                   )
# 345 "Parser.fsy"
                 : 'Typedef_decl));
# 2343 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 346 "Parser.fsy"
                                                            SKabbrev _2 
                   )
# 346 "Parser.fsy"
                 : 'Typedef_decl));
# 2354 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 349 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 349 "Parser.fsy"
                 : 'Constr_decl));
# 2366 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 350 "Parser.fsy"
                                                          [_1] 
                   )
# 350 "Parser.fsy"
                 : 'Constr_decl));
# 2377 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "Parser.fsy"
                                                     (_1, List.rev _3) 
                   )
# 353 "Parser.fsy"
                 : 'Constr1_decl));
# 2389 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "Parser.fsy"
                                                     (_1, []) 
                   )
# 354 "Parser.fsy"
                 : 'Constr1_decl));
# 2400 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 357 "Parser.fsy"
                 : 'Label_decl));
# 2412 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "Parser.fsy"
                                                          [_1] 
                   )
# 358 "Parser.fsy"
                 : 'Label_decl));
# 2423 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "Parser.fsy"
                                                               (_2, _4, _1) 
                   )
# 361 "Parser.fsy"
                 : 'Label1_decl));
# 2436 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "Parser.fsy"
                                           access.Mutable 
                   )
# 364 "Parser.fsy"
                 : 'Opt_mutable));
# 2446 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 365 "Parser.fsy"
                                           access.Immutable 
                   )
# 365 "Parser.fsy"
                 : 'Opt_mutable));
# 2456 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "Parser.fsy"
                                                         _2 
                   )
# 368 "Parser.fsy"
                 : 'Type_params));
# 2467 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 369 "Parser.fsy"
                                                         [_1] 
                   )
# 369 "Parser.fsy"
                 : 'Type_params));
# 2478 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 370 "Parser.fsy"
                                                         [] 
                   )
# 370 "Parser.fsy"
                 : 'Type_params));
# 2488 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 373 "Parser.fsy"
                 : 'Type_var_list));
# 2500 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "Parser.fsy"
                                                        [_1] 
                   )
# 374 "Parser.fsy"
                 : 'Type_var_list));
|]
# 2512 "Parser.fs"
let tables () : FsMiniMAL.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FsMiniMAL.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 70;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Program lexer lexbuf : Syntax.command list * System.Collections.Generic.IDictionary<string, obj> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
