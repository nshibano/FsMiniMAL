// Implementation file for parser generated by fsyacc
module FsMiniMAL.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FsMiniMAL.Lexing
open FsMiniMAL.Parsing.ParseHelpers
# 2 "Parser.fsy"

open FsMiniMAL
open Syntax
open ParseHelper

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | WITH
  | WHILE
  | WHEN
  | VAR
  | VAL
  | TYPE
  | TRY
  | TO
  | THEN
  | REMOVE
  | OF
  | MUTABLE
  | LEX
  | IF
  | HIDE
  | FUNCT
  | FUN
  | FN
  | FOR
  | EXCEPTION
  | END
  | ELSE
  | DOWNTO
  | DO
  | CATCH
  | CASE
  | BEGIN
  | AS
  | AND
  | QMARK
  | EXCLAMATION
  | RBRACE
  | BARRBRACKET
  | BARBAR
  | BAR
  | LBRACE
  | UNDERSCORE
  | RBRACKET
  | LESSLESS
  | COLONEQUAL
  | LESSMINUS
  | LBRACKETBAR
  | LBRACKET
  | SEMI
  | COLONCOLON
  | COLON
  | DOT
  | MINUSGREATER
  | COMMA
  | STARSTAR
  | STAR
  | RPAREN
  | LPAREN
  | AMPAMP
  | EQUALEQUAL
  | EQUAL
  | EOF
  | STRING of (string)
  | FLOAT of (float)
  | CHAR of (char)
  | INT of (string)
  | UNARY of (string)
  | MULTDIV of (string)
  | SUBTRACTIVE of (string)
  | ADDITIVE of (string)
  | CONCAT of (string)
  | COMPARE of (string)
  | QUOTED of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_WITH
    | TOKEN_WHILE
    | TOKEN_WHEN
    | TOKEN_VAR
    | TOKEN_VAL
    | TOKEN_TYPE
    | TOKEN_TRY
    | TOKEN_TO
    | TOKEN_THEN
    | TOKEN_REMOVE
    | TOKEN_OF
    | TOKEN_MUTABLE
    | TOKEN_LEX
    | TOKEN_IF
    | TOKEN_HIDE
    | TOKEN_FUNCT
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_FOR
    | TOKEN_EXCEPTION
    | TOKEN_END
    | TOKEN_ELSE
    | TOKEN_DOWNTO
    | TOKEN_DO
    | TOKEN_CATCH
    | TOKEN_CASE
    | TOKEN_BEGIN
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_QMARK
    | TOKEN_EXCLAMATION
    | TOKEN_RBRACE
    | TOKEN_BARRBRACKET
    | TOKEN_BARBAR
    | TOKEN_BAR
    | TOKEN_LBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_RBRACKET
    | TOKEN_LESSLESS
    | TOKEN_COLONEQUAL
    | TOKEN_LESSMINUS
    | TOKEN_LBRACKETBAR
    | TOKEN_LBRACKET
    | TOKEN_SEMI
    | TOKEN_COLONCOLON
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_MINUSGREATER
    | TOKEN_COMMA
    | TOKEN_STARSTAR
    | TOKEN_STAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMPAMP
    | TOKEN_EQUALEQUAL
    | TOKEN_EQUAL
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_CHAR
    | TOKEN_INT
    | TOKEN_UNARY
    | TOKEN_MULTDIV
    | TOKEN_SUBTRACTIVE
    | TOKEN_ADDITIVE
    | TOKEN_CONCAT
    | TOKEN_COMPARE
    | TOKEN_QUOTED
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProgram
    | NONTERM_Program
    | NONTERM_Command_list
    | NONTERM_Opt_semi
    | NONTERM_Command
    | NONTERM_Value_def
    | NONTERM_Function_def
    | NONTERM_Var_def
    | NONTERM_Equation
    | NONTERM_Expression_def
    | NONTERM_Expression_5
    | NONTERM_Expression_4
    | NONTERM_Expression_3_comma_list
    | NONTERM_Expression_3
    | NONTERM_Expression_2
    | NONTERM_Expression_1_list
    | NONTERM_Expression_1
    | NONTERM_Expression_3_emptiable_comma_list
    | NONTERM_Pattern_1_list
    | NONTERM_Opt_bar
    | NONTERM_Operator
    | NONTERM_Matching
    | NONTERM_Opt_when_clause
    | NONTERM_Matching_list
    | NONTERM_Label_expr_list
    | NONTERM_Dir_flag
    | NONTERM_Pattern_6
    | NONTERM_Pattern_5_comma_list
    | NONTERM_Pattern_5
    | NONTERM_Pattern_4
    | NONTERM_Pattern_3
    | NONTERM_Pattern_2
    | NONTERM_Pattern_1
    | NONTERM_Pattern_5_emptiable_comma_list
    | NONTERM_Label_pattern_list
    | NONTERM_Type_expr_2
    | NONTERM_Type_expr_1_star_list
    | NONTERM_Type_expr_1
    | NONTERM_Type_expr_2_comma_list
    | NONTERM_Typedef_list
    | NONTERM_Typedef
    | NONTERM_Typedef_decl
    | NONTERM_Constr_decl
    | NONTERM_Constr1_decl
    | NONTERM_Label_decl
    | NONTERM_Label1_decl
    | NONTERM_Opt_mutable
    | NONTERM_Type_params
    | NONTERM_Type_var_list
    | NONTERM_Lexer_def_list
    | NONTERM_Lexer_def
    | NONTERM_Lexer_regexp_3
    | NONTERM_Lexer_regexp_2
    | NONTERM_Lexer_regexp_1
    | NONTERM_Lexer_charset_list
    | NONTERM_Lexer_charset
    | NONTERM_Lexer_rule_list
    | NONTERM_Lexer_rule
    | NONTERM_Lexer_rule_args
    | NONTERM_Lexer_rule_case_list
    | NONTERM_Lexer_rule_case

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | WITH  -> 0 
  | WHILE  -> 1 
  | WHEN  -> 2 
  | VAR  -> 3 
  | VAL  -> 4 
  | TYPE  -> 5 
  | TRY  -> 6 
  | TO  -> 7 
  | THEN  -> 8 
  | REMOVE  -> 9 
  | OF  -> 10 
  | MUTABLE  -> 11 
  | LEX  -> 12 
  | IF  -> 13 
  | HIDE  -> 14 
  | FUNCT  -> 15 
  | FUN  -> 16 
  | FN  -> 17 
  | FOR  -> 18 
  | EXCEPTION  -> 19 
  | END  -> 20 
  | ELSE  -> 21 
  | DOWNTO  -> 22 
  | DO  -> 23 
  | CATCH  -> 24 
  | CASE  -> 25 
  | BEGIN  -> 26 
  | AS  -> 27 
  | AND  -> 28 
  | QMARK  -> 29 
  | EXCLAMATION  -> 30 
  | RBRACE  -> 31 
  | BARRBRACKET  -> 32 
  | BARBAR  -> 33 
  | BAR  -> 34 
  | LBRACE  -> 35 
  | UNDERSCORE  -> 36 
  | RBRACKET  -> 37 
  | LESSLESS  -> 38 
  | COLONEQUAL  -> 39 
  | LESSMINUS  -> 40 
  | LBRACKETBAR  -> 41 
  | LBRACKET  -> 42 
  | SEMI  -> 43 
  | COLONCOLON  -> 44 
  | COLON  -> 45 
  | DOT  -> 46 
  | MINUSGREATER  -> 47 
  | COMMA  -> 48 
  | STARSTAR  -> 49 
  | STAR  -> 50 
  | RPAREN  -> 51 
  | LPAREN  -> 52 
  | AMPAMP  -> 53 
  | EQUALEQUAL  -> 54 
  | EQUAL  -> 55 
  | EOF  -> 56 
  | STRING _ -> 57 
  | FLOAT _ -> 58 
  | CHAR _ -> 59 
  | INT _ -> 60 
  | UNARY _ -> 61 
  | MULTDIV _ -> 62 
  | SUBTRACTIVE _ -> 63 
  | ADDITIVE _ -> 64 
  | CONCAT _ -> 65 
  | COMPARE _ -> 66 
  | QUOTED _ -> 67 
  | IDENT _ -> 68 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_WITH 
  | 1 -> TOKEN_WHILE 
  | 2 -> TOKEN_WHEN 
  | 3 -> TOKEN_VAR 
  | 4 -> TOKEN_VAL 
  | 5 -> TOKEN_TYPE 
  | 6 -> TOKEN_TRY 
  | 7 -> TOKEN_TO 
  | 8 -> TOKEN_THEN 
  | 9 -> TOKEN_REMOVE 
  | 10 -> TOKEN_OF 
  | 11 -> TOKEN_MUTABLE 
  | 12 -> TOKEN_LEX 
  | 13 -> TOKEN_IF 
  | 14 -> TOKEN_HIDE 
  | 15 -> TOKEN_FUNCT 
  | 16 -> TOKEN_FUN 
  | 17 -> TOKEN_FN 
  | 18 -> TOKEN_FOR 
  | 19 -> TOKEN_EXCEPTION 
  | 20 -> TOKEN_END 
  | 21 -> TOKEN_ELSE 
  | 22 -> TOKEN_DOWNTO 
  | 23 -> TOKEN_DO 
  | 24 -> TOKEN_CATCH 
  | 25 -> TOKEN_CASE 
  | 26 -> TOKEN_BEGIN 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_QMARK 
  | 30 -> TOKEN_EXCLAMATION 
  | 31 -> TOKEN_RBRACE 
  | 32 -> TOKEN_BARRBRACKET 
  | 33 -> TOKEN_BARBAR 
  | 34 -> TOKEN_BAR 
  | 35 -> TOKEN_LBRACE 
  | 36 -> TOKEN_UNDERSCORE 
  | 37 -> TOKEN_RBRACKET 
  | 38 -> TOKEN_LESSLESS 
  | 39 -> TOKEN_COLONEQUAL 
  | 40 -> TOKEN_LESSMINUS 
  | 41 -> TOKEN_LBRACKETBAR 
  | 42 -> TOKEN_LBRACKET 
  | 43 -> TOKEN_SEMI 
  | 44 -> TOKEN_COLONCOLON 
  | 45 -> TOKEN_COLON 
  | 46 -> TOKEN_DOT 
  | 47 -> TOKEN_MINUSGREATER 
  | 48 -> TOKEN_COMMA 
  | 49 -> TOKEN_STARSTAR 
  | 50 -> TOKEN_STAR 
  | 51 -> TOKEN_RPAREN 
  | 52 -> TOKEN_LPAREN 
  | 53 -> TOKEN_AMPAMP 
  | 54 -> TOKEN_EQUALEQUAL 
  | 55 -> TOKEN_EQUAL 
  | 56 -> TOKEN_EOF 
  | 57 -> TOKEN_STRING 
  | 58 -> TOKEN_FLOAT 
  | 59 -> TOKEN_CHAR 
  | 60 -> TOKEN_INT 
  | 61 -> TOKEN_UNARY 
  | 62 -> TOKEN_MULTDIV 
  | 63 -> TOKEN_SUBTRACTIVE 
  | 64 -> TOKEN_ADDITIVE 
  | 65 -> TOKEN_CONCAT 
  | 66 -> TOKEN_COMPARE 
  | 67 -> TOKEN_QUOTED 
  | 68 -> TOKEN_IDENT 
  | 71 -> TOKEN_end_of_input
  | 69 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProgram 
    | 1 -> NONTERM_Program 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Command_list 
    | 4 -> NONTERM_Command_list 
    | 5 -> NONTERM_Command_list 
    | 6 -> NONTERM_Command_list 
    | 7 -> NONTERM_Opt_semi 
    | 8 -> NONTERM_Opt_semi 
    | 9 -> NONTERM_Command 
    | 10 -> NONTERM_Command 
    | 11 -> NONTERM_Command 
    | 12 -> NONTERM_Command 
    | 13 -> NONTERM_Command 
    | 14 -> NONTERM_Command 
    | 15 -> NONTERM_Command 
    | 16 -> NONTERM_Command 
    | 17 -> NONTERM_Value_def 
    | 18 -> NONTERM_Value_def 
    | 19 -> NONTERM_Function_def 
    | 20 -> NONTERM_Function_def 
    | 21 -> NONTERM_Var_def 
    | 22 -> NONTERM_Var_def 
    | 23 -> NONTERM_Equation 
    | 24 -> NONTERM_Expression_def 
    | 25 -> NONTERM_Expression_def 
    | 26 -> NONTERM_Expression_5 
    | 27 -> NONTERM_Expression_5 
    | 28 -> NONTERM_Expression_4 
    | 29 -> NONTERM_Expression_3_comma_list 
    | 30 -> NONTERM_Expression_3_comma_list 
    | 31 -> NONTERM_Expression_3 
    | 32 -> NONTERM_Expression_3 
    | 33 -> NONTERM_Expression_3 
    | 34 -> NONTERM_Expression_3 
    | 35 -> NONTERM_Expression_3 
    | 36 -> NONTERM_Expression_3 
    | 37 -> NONTERM_Expression_3 
    | 38 -> NONTERM_Expression_3 
    | 39 -> NONTERM_Expression_3 
    | 40 -> NONTERM_Expression_3 
    | 41 -> NONTERM_Expression_3 
    | 42 -> NONTERM_Expression_3 
    | 43 -> NONTERM_Expression_3 
    | 44 -> NONTERM_Expression_3 
    | 45 -> NONTERM_Expression_3 
    | 46 -> NONTERM_Expression_3 
    | 47 -> NONTERM_Expression_3 
    | 48 -> NONTERM_Expression_3 
    | 49 -> NONTERM_Expression_3 
    | 50 -> NONTERM_Expression_3 
    | 51 -> NONTERM_Expression_3 
    | 52 -> NONTERM_Expression_3 
    | 53 -> NONTERM_Expression_3 
    | 54 -> NONTERM_Expression_3 
    | 55 -> NONTERM_Expression_3 
    | 56 -> NONTERM_Expression_3 
    | 57 -> NONTERM_Expression_3 
    | 58 -> NONTERM_Expression_3 
    | 59 -> NONTERM_Expression_2 
    | 60 -> NONTERM_Expression_1_list 
    | 61 -> NONTERM_Expression_1_list 
    | 62 -> NONTERM_Expression_1 
    | 63 -> NONTERM_Expression_1 
    | 64 -> NONTERM_Expression_1 
    | 65 -> NONTERM_Expression_1 
    | 66 -> NONTERM_Expression_1 
    | 67 -> NONTERM_Expression_1 
    | 68 -> NONTERM_Expression_1 
    | 69 -> NONTERM_Expression_1 
    | 70 -> NONTERM_Expression_1 
    | 71 -> NONTERM_Expression_1 
    | 72 -> NONTERM_Expression_1 
    | 73 -> NONTERM_Expression_1 
    | 74 -> NONTERM_Expression_1 
    | 75 -> NONTERM_Expression_1 
    | 76 -> NONTERM_Expression_1 
    | 77 -> NONTERM_Expression_1 
    | 78 -> NONTERM_Expression_1 
    | 79 -> NONTERM_Expression_3_emptiable_comma_list 
    | 80 -> NONTERM_Expression_3_emptiable_comma_list 
    | 81 -> NONTERM_Pattern_1_list 
    | 82 -> NONTERM_Pattern_1_list 
    | 83 -> NONTERM_Opt_bar 
    | 84 -> NONTERM_Opt_bar 
    | 85 -> NONTERM_Operator 
    | 86 -> NONTERM_Operator 
    | 87 -> NONTERM_Operator 
    | 88 -> NONTERM_Operator 
    | 89 -> NONTERM_Operator 
    | 90 -> NONTERM_Operator 
    | 91 -> NONTERM_Operator 
    | 92 -> NONTERM_Operator 
    | 93 -> NONTERM_Operator 
    | 94 -> NONTERM_Operator 
    | 95 -> NONTERM_Operator 
    | 96 -> NONTERM_Operator 
    | 97 -> NONTERM_Operator 
    | 98 -> NONTERM_Operator 
    | 99 -> NONTERM_Operator 
    | 100 -> NONTERM_Matching 
    | 101 -> NONTERM_Opt_when_clause 
    | 102 -> NONTERM_Opt_when_clause 
    | 103 -> NONTERM_Matching_list 
    | 104 -> NONTERM_Matching_list 
    | 105 -> NONTERM_Label_expr_list 
    | 106 -> NONTERM_Label_expr_list 
    | 107 -> NONTERM_Dir_flag 
    | 108 -> NONTERM_Dir_flag 
    | 109 -> NONTERM_Pattern_6 
    | 110 -> NONTERM_Pattern_5_comma_list 
    | 111 -> NONTERM_Pattern_5_comma_list 
    | 112 -> NONTERM_Pattern_5 
    | 113 -> NONTERM_Pattern_5 
    | 114 -> NONTERM_Pattern_4 
    | 115 -> NONTERM_Pattern_4 
    | 116 -> NONTERM_Pattern_3 
    | 117 -> NONTERM_Pattern_3 
    | 118 -> NONTERM_Pattern_2 
    | 119 -> NONTERM_Pattern_2 
    | 120 -> NONTERM_Pattern_1 
    | 121 -> NONTERM_Pattern_1 
    | 122 -> NONTERM_Pattern_1 
    | 123 -> NONTERM_Pattern_1 
    | 124 -> NONTERM_Pattern_1 
    | 125 -> NONTERM_Pattern_1 
    | 126 -> NONTERM_Pattern_1 
    | 127 -> NONTERM_Pattern_1 
    | 128 -> NONTERM_Pattern_1 
    | 129 -> NONTERM_Pattern_1 
    | 130 -> NONTERM_Pattern_1 
    | 131 -> NONTERM_Pattern_1 
    | 132 -> NONTERM_Pattern_1 
    | 133 -> NONTERM_Pattern_1 
    | 134 -> NONTERM_Pattern_5_emptiable_comma_list 
    | 135 -> NONTERM_Pattern_5_emptiable_comma_list 
    | 136 -> NONTERM_Label_pattern_list 
    | 137 -> NONTERM_Label_pattern_list 
    | 138 -> NONTERM_Type_expr_2 
    | 139 -> NONTERM_Type_expr_2 
    | 140 -> NONTERM_Type_expr_1_star_list 
    | 141 -> NONTERM_Type_expr_1_star_list 
    | 142 -> NONTERM_Type_expr_1 
    | 143 -> NONTERM_Type_expr_1 
    | 144 -> NONTERM_Type_expr_1 
    | 145 -> NONTERM_Type_expr_1 
    | 146 -> NONTERM_Type_expr_1 
    | 147 -> NONTERM_Type_expr_2_comma_list 
    | 148 -> NONTERM_Type_expr_2_comma_list 
    | 149 -> NONTERM_Typedef_list 
    | 150 -> NONTERM_Typedef_list 
    | 151 -> NONTERM_Typedef 
    | 152 -> NONTERM_Typedef_decl 
    | 153 -> NONTERM_Typedef_decl 
    | 154 -> NONTERM_Typedef_decl 
    | 155 -> NONTERM_Constr_decl 
    | 156 -> NONTERM_Constr_decl 
    | 157 -> NONTERM_Constr1_decl 
    | 158 -> NONTERM_Constr1_decl 
    | 159 -> NONTERM_Label_decl 
    | 160 -> NONTERM_Label_decl 
    | 161 -> NONTERM_Label1_decl 
    | 162 -> NONTERM_Opt_mutable 
    | 163 -> NONTERM_Opt_mutable 
    | 164 -> NONTERM_Type_params 
    | 165 -> NONTERM_Type_params 
    | 166 -> NONTERM_Type_params 
    | 167 -> NONTERM_Type_var_list 
    | 168 -> NONTERM_Type_var_list 
    | 169 -> NONTERM_Lexer_def_list 
    | 170 -> NONTERM_Lexer_def_list 
    | 171 -> NONTERM_Lexer_def 
    | 172 -> NONTERM_Lexer_def 
    | 173 -> NONTERM_Lexer_regexp_3 
    | 174 -> NONTERM_Lexer_regexp_3 
    | 175 -> NONTERM_Lexer_regexp_3 
    | 176 -> NONTERM_Lexer_regexp_2 
    | 177 -> NONTERM_Lexer_regexp_2 
    | 178 -> NONTERM_Lexer_regexp_1 
    | 179 -> NONTERM_Lexer_regexp_1 
    | 180 -> NONTERM_Lexer_regexp_1 
    | 181 -> NONTERM_Lexer_regexp_1 
    | 182 -> NONTERM_Lexer_regexp_1 
    | 183 -> NONTERM_Lexer_regexp_1 
    | 184 -> NONTERM_Lexer_regexp_1 
    | 185 -> NONTERM_Lexer_regexp_1 
    | 186 -> NONTERM_Lexer_regexp_1 
    | 187 -> NONTERM_Lexer_regexp_1 
    | 188 -> NONTERM_Lexer_charset_list 
    | 189 -> NONTERM_Lexer_charset_list 
    | 190 -> NONTERM_Lexer_charset 
    | 191 -> NONTERM_Lexer_charset 
    | 192 -> NONTERM_Lexer_rule_list 
    | 193 -> NONTERM_Lexer_rule_list 
    | 194 -> NONTERM_Lexer_rule 
    | 195 -> NONTERM_Lexer_rule_args 
    | 196 -> NONTERM_Lexer_rule_args 
    | 197 -> NONTERM_Lexer_rule_case_list 
    | 198 -> NONTERM_Lexer_rule_case_list 
    | 199 -> NONTERM_Lexer_rule_case 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 71 
let _fsyacc_tagOfErrorTerminal = 69

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | WITH  -> "WITH" 
  | WHILE  -> "WHILE" 
  | WHEN  -> "WHEN" 
  | VAR  -> "VAR" 
  | VAL  -> "VAL" 
  | TYPE  -> "TYPE" 
  | TRY  -> "TRY" 
  | TO  -> "TO" 
  | THEN  -> "THEN" 
  | REMOVE  -> "REMOVE" 
  | OF  -> "OF" 
  | MUTABLE  -> "MUTABLE" 
  | LEX  -> "LEX" 
  | IF  -> "IF" 
  | HIDE  -> "HIDE" 
  | FUNCT  -> "FUNCT" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | FOR  -> "FOR" 
  | EXCEPTION  -> "EXCEPTION" 
  | END  -> "END" 
  | ELSE  -> "ELSE" 
  | DOWNTO  -> "DOWNTO" 
  | DO  -> "DO" 
  | CATCH  -> "CATCH" 
  | CASE  -> "CASE" 
  | BEGIN  -> "BEGIN" 
  | AS  -> "AS" 
  | AND  -> "AND" 
  | QMARK  -> "QMARK" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | RBRACE  -> "RBRACE" 
  | BARRBRACKET  -> "BARRBRACKET" 
  | BARBAR  -> "BARBAR" 
  | BAR  -> "BAR" 
  | LBRACE  -> "LBRACE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | RBRACKET  -> "RBRACKET" 
  | LESSLESS  -> "LESSLESS" 
  | COLONEQUAL  -> "COLONEQUAL" 
  | LESSMINUS  -> "LESSMINUS" 
  | LBRACKETBAR  -> "LBRACKETBAR" 
  | LBRACKET  -> "LBRACKET" 
  | SEMI  -> "SEMI" 
  | COLONCOLON  -> "COLONCOLON" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | MINUSGREATER  -> "MINUSGREATER" 
  | COMMA  -> "COMMA" 
  | STARSTAR  -> "STARSTAR" 
  | STAR  -> "STAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMPAMP  -> "AMPAMP" 
  | EQUALEQUAL  -> "EQUALEQUAL" 
  | EQUAL  -> "EQUAL" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | CHAR _ -> "CHAR" 
  | INT _ -> "INT" 
  | UNARY _ -> "UNARY" 
  | MULTDIV _ -> "MULTDIV" 
  | SUBTRACTIVE _ -> "SUBTRACTIVE" 
  | ADDITIVE _ -> "ADDITIVE" 
  | CONCAT _ -> "CONCAT" 
  | COMPARE _ -> "COMPARE" 
  | QUOTED _ -> "QUOTED" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | WITH  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | REMOVE  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | LEX  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | HIDE  -> (null : System.Object) 
  | FUNCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | EXCEPTION  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOWNTO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | BARRBRACKET  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LESSLESS  -> (null : System.Object) 
  | COLONEQUAL  -> (null : System.Object) 
  | LESSMINUS  -> (null : System.Object) 
  | LBRACKETBAR  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLONCOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | MINUSGREATER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STARSTAR  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMPAMP  -> (null : System.Object) 
  | EQUALEQUAL  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTDIV _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUBTRACTIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADDITIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONCAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMPARE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUOTED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 180us; 6us; 3us; 65535us; 2us; 3us; 6us; 7us; 314us; 315us; 4us; 65535us; 0us; 11us; 3us; 8us; 7us; 8us; 180us; 11us; 2us; 65535us; 14us; 15us; 34us; 35us; 2us; 65535us; 16us; 17us; 38us; 39us; 2us; 65535us; 18us; 19us; 42us; 43us; 1us; 65535us; 36us; 37us; 3us; 65535us; 32us; 33us; 40us; 41us; 44us; 45us; 13us; 65535us; 0us; 12us; 9us; 10us; 48us; 49us; 50us; 51us; 76us; 77us; 82us; 83us; 88us; 89us; 90us; 91us; 94us; 95us; 99us; 100us; 161us; 163us; 180us; 12us; 361us; 362us; 14us; 65535us; 0us; 52us; 9us; 52us; 48us; 52us; 50us; 52us; 76us; 52us; 82us; 52us; 88us; 52us; 90us; 52us; 94us; 52us; 99us; 52us; 161us; 52us; 180us; 52us; 202us; 203us; 361us; 52us; 17us; 65535us; 0us; 55us; 9us; 55us; 48us; 55us; 50us; 55us; 57us; 58us; 76us; 55us; 82us; 55us; 88us; 55us; 90us; 55us; 94us; 55us; 99us; 55us; 161us; 55us; 167us; 183us; 170us; 183us; 180us; 55us; 202us; 55us; 361us; 55us; 47us; 65535us; 0us; 56us; 9us; 56us; 48us; 56us; 50us; 56us; 57us; 56us; 61us; 62us; 64us; 65us; 68us; 69us; 71us; 72us; 74us; 75us; 76us; 56us; 78us; 79us; 80us; 81us; 82us; 56us; 84us; 85us; 88us; 56us; 90us; 56us; 92us; 93us; 94us; 56us; 99us; 56us; 107us; 109us; 108us; 109us; 110us; 112us; 111us; 112us; 130us; 113us; 131us; 114us; 132us; 115us; 133us; 116us; 134us; 117us; 135us; 118us; 136us; 119us; 137us; 120us; 138us; 121us; 139us; 122us; 140us; 123us; 141us; 124us; 142us; 125us; 143us; 126us; 159us; 127us; 161us; 56us; 167us; 56us; 170us; 56us; 180us; 56us; 201us; 128us; 202us; 56us; 208us; 129us; 361us; 56us; 48us; 65535us; 0us; 144us; 9us; 144us; 48us; 144us; 50us; 144us; 57us; 144us; 61us; 144us; 64us; 144us; 68us; 144us; 71us; 144us; 74us; 144us; 76us; 144us; 78us; 144us; 80us; 144us; 82us; 144us; 84us; 144us; 88us; 144us; 90us; 144us; 92us; 144us; 94us; 144us; 99us; 144us; 107us; 144us; 108us; 144us; 110us; 144us; 111us; 144us; 130us; 144us; 131us; 144us; 132us; 144us; 133us; 144us; 134us; 144us; 135us; 144us; 136us; 144us; 137us; 144us; 138us; 144us; 139us; 144us; 140us; 144us; 141us; 144us; 142us; 144us; 143us; 144us; 159us; 144us; 161us; 144us; 167us; 144us; 170us; 144us; 173us; 176us; 180us; 144us; 201us; 144us; 202us; 144us; 208us; 144us; 361us; 144us; 50us; 65535us; 0us; 145us; 9us; 145us; 48us; 145us; 50us; 145us; 57us; 145us; 61us; 145us; 64us; 145us; 66us; 147us; 68us; 145us; 71us; 145us; 74us; 145us; 76us; 145us; 78us; 145us; 80us; 145us; 82us; 145us; 84us; 145us; 88us; 145us; 90us; 145us; 92us; 145us; 94us; 145us; 99us; 145us; 107us; 145us; 108us; 145us; 110us; 145us; 111us; 145us; 130us; 145us; 131us; 145us; 132us; 145us; 133us; 145us; 134us; 145us; 135us; 145us; 136us; 145us; 137us; 145us; 138us; 145us; 139us; 145us; 140us; 145us; 141us; 145us; 142us; 145us; 143us; 145us; 146us; 147us; 159us; 145us; 161us; 145us; 167us; 145us; 170us; 145us; 173us; 145us; 180us; 145us; 201us; 145us; 202us; 145us; 208us; 145us; 361us; 145us; 52us; 65535us; 0us; 66us; 9us; 66us; 48us; 66us; 50us; 66us; 57us; 66us; 61us; 66us; 64us; 66us; 66us; 146us; 68us; 66us; 71us; 66us; 74us; 66us; 76us; 66us; 78us; 66us; 80us; 66us; 82us; 66us; 84us; 66us; 88us; 66us; 90us; 66us; 92us; 66us; 94us; 66us; 99us; 66us; 107us; 66us; 108us; 66us; 110us; 66us; 111us; 66us; 130us; 66us; 131us; 66us; 132us; 66us; 133us; 66us; 134us; 66us; 135us; 66us; 136us; 66us; 137us; 66us; 138us; 66us; 139us; 66us; 140us; 66us; 141us; 66us; 142us; 66us; 143us; 66us; 146us; 146us; 154us; 156us; 155us; 156us; 159us; 66us; 161us; 66us; 167us; 66us; 170us; 66us; 173us; 146us; 180us; 66us; 201us; 66us; 202us; 66us; 208us; 66us; 361us; 66us; 2us; 65535us; 167us; 168us; 170us; 171us; 3us; 65535us; 36us; 44us; 59us; 60us; 184us; 185us; 4us; 65535us; 96us; 97us; 101us; 102us; 104us; 105us; 286us; 287us; 1us; 65535us; 161us; 165us; 4us; 65535us; 97us; 204us; 102us; 204us; 105us; 204us; 205us; 204us; 1us; 65535us; 199us; 200us; 4us; 65535us; 97us; 98us; 102us; 103us; 105us; 106us; 205us; 206us; 3us; 65535us; 173us; 174us; 177us; 178us; 209us; 210us; 1us; 65535us; 89us; 90us; 7us; 65535us; 14us; 32us; 34us; 32us; 97us; 199us; 102us; 199us; 105us; 199us; 205us; 199us; 238us; 240us; 10us; 65535us; 14us; 213us; 34us; 213us; 97us; 213us; 102us; 213us; 105us; 213us; 205us; 213us; 215us; 216us; 238us; 213us; 245us; 254us; 248us; 254us; 11us; 65535us; 14us; 214us; 34us; 214us; 97us; 214us; 102us; 214us; 105us; 214us; 205us; 214us; 215us; 214us; 238us; 214us; 245us; 214us; 248us; 214us; 256us; 257us; 11us; 65535us; 14us; 217us; 34us; 217us; 97us; 217us; 102us; 217us; 105us; 217us; 205us; 217us; 215us; 217us; 238us; 217us; 245us; 217us; 248us; 217us; 256us; 217us; 13us; 65535us; 14us; 220us; 34us; 220us; 97us; 220us; 102us; 220us; 105us; 220us; 205us; 220us; 215us; 220us; 221us; 222us; 224us; 225us; 238us; 220us; 245us; 220us; 248us; 220us; 256us; 220us; 13us; 65535us; 14us; 223us; 34us; 223us; 97us; 223us; 102us; 223us; 105us; 223us; 205us; 223us; 215us; 223us; 221us; 223us; 224us; 223us; 238us; 223us; 245us; 223us; 248us; 223us; 256us; 223us; 17us; 65535us; 14us; 226us; 34us; 226us; 36us; 184us; 59us; 184us; 97us; 226us; 102us; 226us; 105us; 226us; 184us; 184us; 205us; 226us; 215us; 226us; 221us; 226us; 224us; 226us; 227us; 228us; 238us; 226us; 245us; 226us; 248us; 226us; 256us; 226us; 2us; 65535us; 245us; 246us; 248us; 249us; 2us; 65535us; 251us; 252us; 258us; 259us; 9us; 65535us; 46us; 47us; 53us; 54us; 242us; 243us; 261us; 262us; 270us; 271us; 272us; 277us; 278us; 277us; 292us; 293us; 304us; 305us; 10us; 65535us; 46us; 260us; 53us; 260us; 242us; 260us; 261us; 260us; 270us; 260us; 272us; 260us; 278us; 260us; 292us; 260us; 298us; 263us; 304us; 260us; 11us; 65535us; 46us; 266us; 53us; 266us; 242us; 266us; 261us; 266us; 264us; 265us; 270us; 266us; 272us; 266us; 278us; 266us; 292us; 266us; 298us; 266us; 304us; 266us; 2us; 65535us; 272us; 273us; 278us; 279us; 2us; 65535us; 20us; 21us; 281us; 282us; 2us; 65535us; 20us; 280us; 281us; 280us; 1us; 65535us; 284us; 285us; 2us; 65535us; 287us; 288us; 295us; 296us; 3us; 65535us; 26us; 27us; 287us; 294us; 295us; 294us; 2us; 65535us; 289us; 290us; 300us; 301us; 2us; 65535us; 289us; 299us; 300us; 299us; 2us; 65535us; 289us; 302us; 300us; 302us; 2us; 65535us; 20us; 283us; 281us; 283us; 2us; 65535us; 307us; 308us; 312us; 313us; 2us; 65535us; 29us; 30us; 315us; 316us; 2us; 65535us; 29us; 314us; 315us; 314us; 4us; 65535us; 319us; 320us; 337us; 323us; 355us; 324us; 359us; 324us; 5us; 65535us; 319us; 327us; 325us; 326us; 337us; 327us; 355us; 327us; 359us; 327us; 7us; 65535us; 319us; 329us; 325us; 329us; 326us; 328us; 327us; 328us; 337us; 329us; 355us; 329us; 359us; 329us; 2us; 65535us; 339us; 340us; 342us; 343us; 4us; 65535us; 339us; 346us; 340us; 345us; 342us; 346us; 343us; 345us; 2us; 65535us; 321us; 322us; 351us; 352us; 2us; 65535us; 321us; 350us; 351us; 350us; 2us; 65535us; 353us; 354us; 357us; 358us; 2us; 65535us; 355us; 356us; 359us; 360us; 2us; 65535us; 355us; 359us; 359us; 359us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 10us; 15us; 18us; 21us; 24us; 26us; 30us; 44us; 59us; 77us; 125us; 174us; 225us; 278us; 281us; 285us; 290us; 292us; 297us; 299us; 304us; 308us; 310us; 318us; 329us; 341us; 353us; 367us; 381us; 399us; 402us; 405us; 415us; 426us; 438us; 441us; 444us; 447us; 449us; 452us; 456us; 459us; 462us; 465us; 468us; 471us; 474us; 477us; 482us; 488us; 496us; 499us; 504us; 507us; 510us; 513us; 516us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 3us; 4us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 77us; 2us; 3us; 77us; 1us; 3us; 2us; 4us; 8us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 18us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 19us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 2us; 26us; 27us; 1us; 26us; 1us; 26us; 1us; 28us; 16us; 29us; 30us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 29us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 31us; 15us; 31us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 32us; 62us; 1us; 32us; 15us; 32us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 6us; 33us; 34us; 60us; 61us; 68us; 69us; 4us; 33us; 34us; 68us; 69us; 2us; 33us; 69us; 16us; 33us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 69us; 2us; 33us; 69us; 1us; 33us; 15us; 33us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 34us; 68us; 1us; 34us; 15us; 34us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 35us; 36us; 2us; 35us; 36us; 2us; 35us; 36us; 16us; 35us; 36us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 35us; 15us; 35us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 37us; 1us; 37us; 1us; 37us; 15us; 37us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 15us; 38us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 2us; 42us; 90us; 15us; 42us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 43us; 2us; 43us; 91us; 15us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 69us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 100us; 16us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 105us; 106us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 4us; 60us; 61us; 68us; 69us; 1us; 60us; 1us; 62us; 3us; 62us; 105us; 106us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 2us; 67us; 98us; 3us; 67us; 68us; 69us; 2us; 68us; 69us; 1us; 68us; 1us; 69us; 1us; 69us; 3us; 70us; 71us; 72us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 73us; 1us; 73us; 1us; 74us; 1us; 74us; 1us; 74us; 2us; 75us; 76us; 1us; 75us; 1us; 75us; 1us; 76us; 1us; 76us; 1us; 76us; 1us; 76us; 2us; 77us; 78us; 1us; 77us; 1us; 78us; 1us; 79us; 2us; 81us; 82us; 1us; 81us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 92us; 1us; 93us; 1us; 94us; 1us; 95us; 1us; 96us; 1us; 97us; 1us; 99us; 1us; 100us; 1us; 100us; 1us; 100us; 1us; 102us; 1us; 102us; 2us; 103us; 104us; 1us; 103us; 1us; 103us; 2us; 105us; 106us; 2us; 105us; 106us; 1us; 105us; 1us; 105us; 1us; 107us; 1us; 108us; 1us; 109us; 2us; 110us; 111us; 1us; 110us; 1us; 110us; 3us; 112us; 113us; 115us; 1us; 113us; 1us; 113us; 1us; 114us; 1us; 115us; 1us; 115us; 2us; 116us; 117us; 1us; 117us; 1us; 117us; 1us; 118us; 2us; 119us; 120us; 1us; 119us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 123us; 1us; 124us; 1us; 125us; 2us; 126us; 127us; 1us; 126us; 1us; 127us; 3us; 128us; 129us; 130us; 1us; 128us; 2us; 129us; 130us; 1us; 129us; 1us; 130us; 1us; 130us; 1us; 130us; 1us; 131us; 1us; 131us; 1us; 131us; 1us; 132us; 1us; 132us; 1us; 132us; 1us; 133us; 1us; 133us; 1us; 133us; 1us; 134us; 2us; 136us; 137us; 2us; 136us; 137us; 2us; 136us; 137us; 1us; 136us; 1us; 136us; 3us; 138us; 139us; 140us; 1us; 138us; 1us; 138us; 2us; 140us; 157us; 1us; 140us; 2us; 140us; 144us; 2us; 141us; 144us; 1us; 142us; 1us; 143us; 1us; 144us; 2us; 145us; 146us; 2us; 145us; 146us; 1us; 145us; 1us; 145us; 1us; 145us; 1us; 145us; 1us; 146us; 2us; 147us; 148us; 1us; 147us; 1us; 147us; 2us; 149us; 150us; 1us; 149us; 1us; 149us; 1us; 151us; 1us; 151us; 1us; 151us; 2us; 152us; 153us; 1us; 152us; 1us; 152us; 1us; 153us; 1us; 153us; 1us; 153us; 1us; 154us; 1us; 154us; 2us; 155us; 156us; 1us; 155us; 1us; 155us; 2us; 157us; 158us; 1us; 157us; 2us; 159us; 160us; 1us; 159us; 1us; 159us; 1us; 161us; 1us; 161us; 1us; 161us; 1us; 161us; 1us; 162us; 1us; 164us; 1us; 164us; 1us; 164us; 1us; 165us; 2us; 167us; 168us; 1us; 167us; 1us; 167us; 1us; 170us; 1us; 170us; 1us; 170us; 1us; 171us; 1us; 171us; 1us; 171us; 2us; 171us; 173us; 1us; 172us; 1us; 172us; 2us; 173us; 185us; 2us; 173us; 199us; 1us; 173us; 2us; 173us; 176us; 2us; 174us; 176us; 4us; 176us; 178us; 179us; 180us; 4us; 177us; 178us; 179us; 180us; 1us; 178us; 1us; 179us; 1us; 180us; 1us; 181us; 1us; 182us; 1us; 183us; 1us; 184us; 1us; 185us; 1us; 185us; 2us; 186us; 187us; 2us; 186us; 188us; 1us; 186us; 1us; 187us; 2us; 187us; 188us; 1us; 187us; 1us; 188us; 1us; 189us; 2us; 190us; 191us; 1us; 191us; 1us; 191us; 2us; 192us; 193us; 1us; 193us; 1us; 193us; 1us; 194us; 1us; 194us; 1us; 194us; 1us; 194us; 1us; 196us; 1us; 196us; 1us; 198us; 1us; 198us; 1us; 199us; 1us; 199us; 1us; 199us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 11us; 13us; 15us; 19us; 22us; 24us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 74us; 77us; 79us; 81us; 84us; 87us; 89us; 91us; 94us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 120us; 122us; 124us; 126us; 143us; 145us; 147us; 149us; 151us; 153us; 169us; 172us; 174us; 190us; 197us; 202us; 205us; 222us; 225us; 227us; 243us; 246us; 248us; 264us; 267us; 270us; 273us; 290us; 292us; 308us; 310us; 312us; 314us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 380us; 382us; 384us; 386us; 388us; 391us; 407us; 409us; 412us; 428us; 444us; 460us; 476us; 492us; 508us; 524us; 540us; 556us; 572us; 588us; 604us; 620us; 636us; 652us; 668us; 684us; 701us; 703us; 705us; 707us; 709us; 711us; 713us; 715us; 717us; 719us; 721us; 723us; 725us; 727us; 729us; 731us; 733us; 738us; 740us; 742us; 746us; 748us; 750us; 752us; 754us; 756us; 759us; 763us; 766us; 768us; 770us; 772us; 776us; 778us; 780us; 782us; 784us; 786us; 788us; 790us; 792us; 794us; 796us; 798us; 801us; 803us; 805us; 807us; 809us; 811us; 813us; 816us; 818us; 820us; 822us; 825us; 827us; 829us; 831us; 833us; 835us; 837us; 839us; 841us; 843us; 845us; 847us; 849us; 851us; 853us; 855us; 857us; 859us; 861us; 863us; 866us; 868us; 870us; 873us; 876us; 878us; 880us; 882us; 884us; 886us; 889us; 891us; 893us; 897us; 899us; 901us; 903us; 905us; 907us; 910us; 912us; 914us; 916us; 919us; 921us; 923us; 925us; 927us; 929us; 931us; 933us; 936us; 938us; 940us; 944us; 946us; 949us; 951us; 953us; 955us; 957us; 959us; 961us; 963us; 965us; 967us; 969us; 971us; 973us; 975us; 977us; 980us; 983us; 986us; 988us; 990us; 994us; 996us; 998us; 1001us; 1003us; 1006us; 1009us; 1011us; 1013us; 1015us; 1018us; 1021us; 1023us; 1025us; 1027us; 1029us; 1031us; 1034us; 1036us; 1038us; 1041us; 1043us; 1045us; 1047us; 1049us; 1051us; 1054us; 1056us; 1058us; 1060us; 1062us; 1064us; 1066us; 1068us; 1071us; 1073us; 1075us; 1078us; 1080us; 1083us; 1085us; 1087us; 1089us; 1091us; 1093us; 1095us; 1097us; 1099us; 1101us; 1103us; 1105us; 1108us; 1110us; 1112us; 1114us; 1116us; 1118us; 1120us; 1122us; 1124us; 1127us; 1129us; 1131us; 1134us; 1137us; 1139us; 1142us; 1145us; 1150us; 1155us; 1157us; 1159us; 1161us; 1163us; 1165us; 1167us; 1169us; 1171us; 1173us; 1176us; 1179us; 1181us; 1183us; 1186us; 1188us; 1190us; 1192us; 1195us; 1197us; 1199us; 1202us; 1204us; 1206us; 1208us; 1210us; 1212us; 1214us; 1216us; 1218us; 1220us; 1222us; 1224us; 1226us; |]
let _fsyacc_action_rows = 364
let _fsyacc_actionTableElements = [|29us; 32768us; 1us; 82us; 3us; 18us; 4us; 14us; 5us; 20us; 6us; 99us; 9us; 24us; 12us; 28us; 13us; 76us; 14us; 22us; 15us; 104us; 16us; 16us; 17us; 59us; 18us; 86us; 19us; 26us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 56us; 5us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 49152us; 1us; 16391us; 43us; 9us; 9us; 32768us; 3us; 18us; 4us; 14us; 5us; 20us; 9us; 24us; 12us; 28us; 14us; 22us; 16us; 16us; 19us; 26us; 56us; 4us; 0us; 16385us; 0us; 16386us; 1us; 16391us; 43us; 9us; 9us; 32768us; 3us; 18us; 4us; 14us; 5us; 20us; 9us; 24us; 12us; 28us; 14us; 22us; 16us; 16us; 19us; 26us; 20us; 181us; 0us; 16387us; 20us; 16392us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16392us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16393us; 1us; 32768us; 68us; 36us; 0us; 16394us; 1us; 32768us; 68us; 40us; 0us; 16395us; 2us; 16550us; 52us; 307us; 67us; 310us; 0us; 16396us; 1us; 32768us; 68us; 23us; 0us; 16397us; 1us; 32768us; 68us; 25us; 0us; 16398us; 1us; 32768us; 68us; 297us; 0us; 16399us; 1us; 32768us; 35us; 29us; 2us; 16553us; 4us; 317us; 16us; 321us; 1us; 32768us; 31us; 31us; 0us; 16400us; 2us; 32768us; 45us; 46us; 55us; 50us; 1us; 16402us; 28us; 34us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16401us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 229us; 1us; 16404us; 28us; 38us; 1us; 32768us; 68us; 36us; 0us; 16403us; 2us; 32768us; 45us; 46us; 55us; 50us; 1us; 16406us; 28us; 42us; 1us; 32768us; 68us; 40us; 0us; 16405us; 2us; 32768us; 45us; 46us; 55us; 50us; 0us; 16407us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 1us; 32768us; 55us; 48us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16408us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16409us; 1us; 16411us; 45us; 53us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 0us; 16410us; 0us; 16412us; 15us; 16414us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 48us; 57us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16413us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 229us; 1us; 32768us; 47us; 61us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16415us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 1us; 16446us; 40us; 64us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16416us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 12us; 16445us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 46us; 67us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 68us; 148us; 2us; 32768us; 42us; 68us; 68us; 73us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 15us; 32768us; 33us; 140us; 37us; 70us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 1us; 16453us; 40us; 71us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16417us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 1us; 16452us; 40us; 74us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16418us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 8us; 78us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 15us; 16420us; 21us; 80us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16419us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 23us; 84us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16421us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 1us; 32768us; 68us; 87us; 1us; 32768us; 55us; 88us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 2us; 32768us; 7us; 211us; 22us; 212us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 23us; 92us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 14us; 16422us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 10us; 96us; 1us; 16467us; 34us; 186us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16423us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 24us; 101us; 1us; 16467us; 34us; 186us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16424us; 1us; 16467us; 34us; 186us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16425us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 16474us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16426us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 16475us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16427us; 1us; 16428us; 49us; 130us; 1us; 16429us; 49us; 130us; 3us; 16430us; 49us; 130us; 50us; 138us; 62us; 131us; 3us; 16431us; 49us; 130us; 50us; 138us; 62us; 131us; 7us; 16432us; 44us; 141us; 49us; 130us; 50us; 138us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 7us; 16433us; 44us; 141us; 49us; 130us; 50us; 138us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 7us; 16434us; 44us; 141us; 49us; 130us; 50us; 138us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 7us; 16435us; 44us; 141us; 49us; 130us; 50us; 138us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 1us; 16436us; 49us; 130us; 11us; 16437us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 12us; 16438us; 33us; 140us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 6us; 16439us; 44us; 141us; 49us; 130us; 50us; 138us; 62us; 131us; 63us; 133us; 64us; 132us; 14us; 16440us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 14us; 16441us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 15us; 32768us; 33us; 140us; 37us; 160us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 14us; 16484us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 15us; 16490us; 33us; 140us; 38us; 143us; 39us; 142us; 44us; 141us; 48us; 209us; 49us; 130us; 50us; 138us; 53us; 139us; 54us; 137us; 55us; 136us; 62us; 131us; 63us; 133us; 64us; 132us; 65us; 134us; 66us; 135us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16442us; 0us; 16443us; 12us; 16445us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 46us; 157us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 68us; 148us; 0us; 16444us; 0us; 16446us; 1us; 16446us; 55us; 208us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 11us; 32768us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 68us; 148us; 11us; 16482us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 68us; 148us; 1us; 16451us; 46us; 157us; 2us; 32768us; 42us; 159us; 68us; 158us; 0us; 16452us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16453us; 33us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 155us; 33us; 195us; 35us; 173us; 38us; 198us; 39us; 197us; 41us; 167us; 42us; 170us; 49us; 191us; 50us; 192us; 51us; 162us; 52us; 161us; 53us; 194us; 54us; 196us; 55us; 193us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 111us; 62us; 190us; 63us; 108us; 64us; 189us; 65us; 188us; 66us; 187us; 68us; 63us; 0us; 16454us; 1us; 32768us; 51us; 164us; 0us; 16455us; 1us; 32768us; 51us; 166us; 0us; 16456us; 20us; 16464us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 32us; 169us; 0us; 16457us; 20us; 16464us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 37us; 172us; 0us; 16458us; 11us; 32768us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 68us; 149us; 1us; 32768us; 31us; 175us; 0us; 16459us; 1us; 32768us; 0us; 177us; 1us; 32768us; 68us; 207us; 1us; 32768us; 31us; 179us; 0us; 16460us; 29us; 32768us; 1us; 82us; 3us; 18us; 4us; 14us; 5us; 20us; 6us; 99us; 9us; 24us; 12us; 28us; 13us; 76us; 14us; 22us; 15us; 104us; 16us; 16us; 17us; 59us; 18us; 86us; 19us; 26us; 20us; 182us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16461us; 0us; 16462us; 0us; 16463us; 11us; 16466us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 229us; 0us; 16465us; 0us; 16468us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 0us; 16473us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 0us; 16479us; 0us; 16480us; 0us; 16481us; 0us; 16483us; 1us; 16485us; 2us; 202us; 1us; 32768us; 47us; 201us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 0us; 16486us; 1us; 16488us; 34us; 205us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16487us; 1us; 32768us; 55us; 208us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 68us; 207us; 0us; 16489us; 0us; 16491us; 0us; 16492us; 0us; 16493us; 1us; 16495us; 48us; 215us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16494us; 2us; 16496us; 27us; 218us; 34us; 221us; 1us; 32768us; 68us; 219us; 0us; 16497us; 0us; 16498us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16499us; 1us; 16500us; 44us; 224us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16501us; 0us; 16502us; 11us; 16504us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 229us; 0us; 16503us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 0us; 16507us; 0us; 16508us; 0us; 16509us; 2us; 32768us; 58us; 237us; 60us; 236us; 0us; 16510us; 0us; 16511us; 12us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 51us; 239us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 0us; 16512us; 2us; 32768us; 45us; 242us; 51us; 241us; 0us; 16513us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 1us; 32768us; 51us; 244us; 0us; 16514us; 11us; 16519us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 1us; 32768us; 37us; 247us; 0us; 16515us; 11us; 16519us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 1us; 32768us; 32us; 250us; 0us; 16516us; 1us; 32768us; 68us; 255us; 1us; 32768us; 31us; 253us; 0us; 16517us; 0us; 16518us; 1us; 32768us; 55us; 256us; 11us; 32768us; 35us; 251us; 36us; 230us; 41us; 248us; 42us; 245us; 52us; 238us; 57us; 231us; 58us; 234us; 59us; 233us; 60us; 232us; 63us; 235us; 68us; 227us; 1us; 16521us; 48us; 258us; 1us; 32768us; 68us; 255us; 0us; 16520us; 2us; 16523us; 47us; 261us; 50us; 264us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 0us; 16522us; 1us; 16541us; 50us; 264us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 1us; 16524us; 68us; 269us; 1us; 16525us; 68us; 269us; 0us; 16526us; 0us; 16527us; 0us; 16528us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 2us; 32768us; 48us; 272us; 51us; 276us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 1us; 32768us; 51us; 274us; 1us; 32768us; 68us; 275us; 0us; 16529us; 0us; 16530us; 1us; 16532us; 48us; 278us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 0us; 16531us; 1us; 16534us; 28us; 281us; 2us; 16550us; 52us; 307us; 67us; 310us; 0us; 16533us; 1us; 32768us; 68us; 284us; 2us; 32768us; 54us; 292us; 55us; 286us; 0us; 16535us; 2us; 16467us; 34us; 186us; 35us; 289us; 1us; 32768us; 68us; 297us; 0us; 16536us; 1us; 16547us; 11us; 306us; 1us; 32768us; 31us; 291us; 0us; 16537us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 0us; 16538us; 1us; 16540us; 34us; 295us; 1us; 32768us; 68us; 297us; 0us; 16539us; 1us; 16542us; 10us; 298us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 1us; 16544us; 48us; 300us; 1us; 16547us; 11us; 306us; 0us; 16543us; 1us; 32768us; 68us; 303us; 1us; 32768us; 45us; 304us; 3us; 32768us; 52us; 270us; 67us; 267us; 68us; 268us; 0us; 16545us; 0us; 16546us; 1us; 32768us; 67us; 311us; 1us; 32768us; 51us; 309us; 0us; 16548us; 0us; 16549us; 1us; 16552us; 48us; 312us; 1us; 32768us; 67us; 311us; 0us; 16551us; 1us; 16391us; 43us; 13us; 2us; 16553us; 4us; 317us; 16us; 321us; 0us; 16554us; 1us; 32768us; 68us; 318us; 1us; 32768us; 55us; 319us; 6us; 16559us; 36us; 334us; 42us; 339us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 1us; 16555us; 34us; 325us; 1us; 32768us; 68us; 353us; 0us; 16556us; 2us; 32768us; 34us; 325us; 51us; 338us; 2us; 32768us; 34us; 325us; 35us; 361us; 6us; 32768us; 36us; 334us; 42us; 339us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 6us; 16557us; 36us; 334us; 42us; 339us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 6us; 16558us; 36us; 334us; 42us; 339us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 3us; 16560us; 29us; 332us; 50us; 331us; 64us; 330us; 3us; 16561us; 29us; 332us; 50us; 331us; 64us; 330us; 0us; 16562us; 0us; 16563us; 0us; 16564us; 0us; 16565us; 0us; 16566us; 0us; 16567us; 0us; 16568us; 6us; 16559us; 36us; 334us; 42us; 339us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 0us; 16569us; 2us; 32768us; 59us; 347us; 65us; 342us; 2us; 32768us; 37us; 341us; 59us; 347us; 0us; 16570us; 1us; 32768us; 59us; 347us; 2us; 32768us; 37us; 344us; 59us; 347us; 0us; 16571us; 0us; 16572us; 0us; 16573us; 1us; 16574us; 63us; 348us; 1us; 32768us; 59us; 349us; 0us; 16575us; 1us; 16576us; 28us; 351us; 1us; 32768us; 68us; 353us; 0us; 16577us; 1us; 16579us; 68us; 357us; 1us; 32768us; 55us; 355us; 11us; 16559us; 4us; 16581us; 16us; 16581us; 28us; 16581us; 31us; 16581us; 36us; 334us; 42us; 339us; 43us; 16581us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 0us; 16578us; 1us; 16579us; 68us; 357us; 0us; 16580us; 11us; 16559us; 4us; 16581us; 16us; 16581us; 28us; 16581us; 31us; 16581us; 36us; 334us; 42us; 339us; 43us; 16581us; 52us; 337us; 57us; 335us; 59us; 333us; 68us; 336us; 0us; 16582us; 20us; 32768us; 1us; 82us; 6us; 99us; 13us; 76us; 15us; 104us; 17us; 59us; 18us; 86us; 25us; 94us; 26us; 180us; 30us; 154us; 35us; 173us; 41us; 167us; 42us; 170us; 52us; 161us; 57us; 150us; 58us; 153us; 59us; 152us; 60us; 151us; 61us; 110us; 63us; 107us; 68us; 63us; 1us; 32768us; 31us; 363us; 0us; 16583us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 30us; 31us; 33us; 43us; 44us; 45us; 47us; 57us; 58us; 79us; 80us; 81us; 82us; 83us; 95us; 96us; 98us; 99us; 101us; 102us; 105us; 106us; 108us; 109us; 111us; 112us; 114us; 115us; 117us; 120us; 122us; 123us; 126us; 128us; 140us; 141us; 153us; 155us; 157us; 158us; 161us; 163us; 165us; 166us; 169us; 170us; 174us; 176us; 197us; 198us; 219us; 220us; 222us; 226us; 227us; 228us; 244us; 265us; 266us; 278us; 280us; 301us; 316us; 318us; 339us; 354us; 367us; 370us; 391us; 407us; 409us; 430us; 445us; 447us; 468us; 483us; 504us; 506us; 527us; 543us; 564us; 579us; 600us; 602us; 623us; 638us; 640us; 642us; 663us; 666us; 687us; 689us; 710us; 725us; 746us; 748us; 750us; 762us; 763us; 784us; 786us; 788us; 800us; 801us; 803us; 815us; 816us; 837us; 858us; 859us; 880us; 901us; 902us; 904us; 906us; 910us; 914us; 922us; 930us; 938us; 946us; 948us; 960us; 973us; 980us; 995us; 1010us; 1026us; 1041us; 1057us; 1078us; 1099us; 1120us; 1141us; 1162us; 1183us; 1204us; 1225us; 1246us; 1267us; 1288us; 1309us; 1330us; 1351us; 1352us; 1353us; 1366us; 1367us; 1368us; 1370us; 1371us; 1372us; 1373us; 1374us; 1386us; 1398us; 1400us; 1403us; 1404us; 1425us; 1426us; 1460us; 1461us; 1463us; 1464us; 1466us; 1467us; 1488us; 1490us; 1491us; 1512us; 1514us; 1515us; 1527us; 1529us; 1530us; 1532us; 1534us; 1536us; 1537us; 1567us; 1568us; 1569us; 1570us; 1582us; 1583us; 1584us; 1585us; 1586us; 1587us; 1588us; 1589us; 1590us; 1591us; 1592us; 1593us; 1594us; 1595us; 1596us; 1598us; 1600us; 1621us; 1642us; 1643us; 1645us; 1657us; 1658us; 1660us; 1681us; 1683us; 1684us; 1685us; 1686us; 1687us; 1689us; 1701us; 1702us; 1705us; 1707us; 1708us; 1709us; 1721us; 1722us; 1724us; 1736us; 1737us; 1738us; 1750us; 1751us; 1752us; 1753us; 1754us; 1755us; 1756us; 1757us; 1760us; 1761us; 1762us; 1775us; 1776us; 1779us; 1780us; 1784us; 1786us; 1787us; 1799us; 1801us; 1802us; 1814us; 1816us; 1817us; 1819us; 1821us; 1822us; 1823us; 1825us; 1837us; 1839us; 1841us; 1842us; 1845us; 1849us; 1850us; 1852us; 1856us; 1858us; 1860us; 1861us; 1862us; 1863us; 1867us; 1870us; 1874us; 1876us; 1878us; 1879us; 1880us; 1882us; 1886us; 1887us; 1889us; 1892us; 1893us; 1895us; 1898us; 1899us; 1902us; 1904us; 1905us; 1907us; 1909us; 1910us; 1914us; 1915us; 1917us; 1919us; 1920us; 1922us; 1926us; 1928us; 1930us; 1931us; 1933us; 1935us; 1939us; 1940us; 1941us; 1943us; 1945us; 1946us; 1947us; 1949us; 1951us; 1952us; 1954us; 1957us; 1958us; 1960us; 1962us; 1969us; 1971us; 1973us; 1974us; 1977us; 1980us; 1987us; 1994us; 2001us; 2005us; 2009us; 2010us; 2011us; 2012us; 2013us; 2014us; 2015us; 2016us; 2023us; 2024us; 2027us; 2030us; 2031us; 2033us; 2036us; 2037us; 2038us; 2039us; 2041us; 2043us; 2044us; 2046us; 2048us; 2049us; 2051us; 2053us; 2065us; 2066us; 2068us; 2069us; 2081us; 2082us; 2103us; 2105us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 1us; 3us; 3us; 1us; 1us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 4us; 2us; 4us; 2us; 4us; 2us; 2us; 4us; 2us; 3us; 1us; 1us; 3us; 1us; 4us; 3us; 7us; 5us; 6us; 4us; 4us; 8us; 5us; 5us; 3us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 5us; 2us; 3us; 3us; 3us; 3us; 3us; 5us; 4us; 2us; 1us; 0us; 2us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 0us; 2us; 3us; 1us; 5us; 3us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 3us; 5us; 3us; 3us; 3us; 1us; 0us; 5us; 3us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 0us; 3us; 1us; 0us; 3us; 1us; 0us; 3us; 4us; 2us; 3us; 1us; 0us; 2us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 3us; 3us; 4us; 2us; 1us; 1us; 3us; 1us; 3us; 4us; 0us; 2us; 0us; 2us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 32us; 33us; 33us; 34us; 34us; 35us; 35us; 36us; 36us; 37us; 37us; 37us; 37us; 37us; 38us; 38us; 39us; 39us; 40us; 41us; 41us; 41us; 42us; 42us; 43us; 43us; 44us; 44us; 45us; 46us; 46us; 47us; 47us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 51us; 51us; 51us; 52us; 52us; 53us; 53us; 53us; 53us; 53us; 53us; 53us; 53us; 53us; 53us; 54us; 54us; 55us; 55us; 56us; 56us; 57us; 58us; 58us; 59us; 59us; 60us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16392us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16405us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 16409us; 65535us; 65535us; 16410us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16423us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16442us; 16443us; 65535us; 16444us; 16446us; 65535us; 16447us; 16448us; 16449us; 16450us; 65535us; 65535us; 65535us; 65535us; 16452us; 65535us; 16453us; 65535us; 16454us; 65535us; 16455us; 65535us; 16456us; 65535us; 65535us; 16457us; 65535us; 65535us; 16458us; 65535us; 65535us; 16459us; 65535us; 65535us; 65535us; 16460us; 65535us; 16461us; 16462us; 16463us; 65535us; 16465us; 16468us; 16469us; 16470us; 16471us; 16472us; 16473us; 16476us; 16477us; 16478us; 16479us; 16480us; 16481us; 16483us; 65535us; 65535us; 65535us; 65535us; 16486us; 65535us; 65535us; 16487us; 65535us; 65535us; 65535us; 16489us; 16491us; 16492us; 16493us; 65535us; 65535us; 16494us; 65535us; 65535us; 16497us; 16498us; 65535us; 16499us; 65535us; 65535us; 16501us; 16502us; 65535us; 16503us; 16504us; 16505us; 16506us; 16507us; 16508us; 16509us; 65535us; 16510us; 16511us; 65535us; 16512us; 65535us; 16513us; 65535us; 65535us; 16514us; 65535us; 65535us; 16515us; 65535us; 65535us; 16516us; 65535us; 65535us; 16517us; 16518us; 65535us; 65535us; 65535us; 65535us; 16520us; 65535us; 65535us; 16522us; 65535us; 65535us; 65535us; 65535us; 16526us; 16527us; 16528us; 65535us; 65535us; 65535us; 65535us; 65535us; 16529us; 16530us; 65535us; 65535us; 16531us; 65535us; 65535us; 16533us; 65535us; 65535us; 16535us; 65535us; 65535us; 16536us; 65535us; 65535us; 16537us; 65535us; 16538us; 65535us; 65535us; 16539us; 65535us; 65535us; 65535us; 65535us; 16543us; 65535us; 65535us; 65535us; 16545us; 16546us; 65535us; 65535us; 16548us; 16549us; 65535us; 65535us; 16551us; 65535us; 65535us; 16554us; 65535us; 65535us; 65535us; 65535us; 65535us; 16556us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16562us; 16563us; 16564us; 16565us; 16566us; 16567us; 16568us; 65535us; 16569us; 65535us; 65535us; 16570us; 65535us; 65535us; 16571us; 16572us; 16573us; 65535us; 65535us; 16575us; 65535us; 65535us; 16577us; 65535us; 65535us; 65535us; 16578us; 65535us; 16580us; 65535us; 16582us; 65535us; 65535us; 16583us; |]
let _fsyacc_reductions ()  =    [| 
# 734 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsMiniMAL.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProgram));
# 743 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                       (List.rev _1, parseState.ParserLocalStore) 
                   )
# 115 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 755 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                       ([], parseState.ParserLocalStore) 
                   )
# 116 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 765 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                            _3 :: _1 
                   )
# 119 "Parser.fsy"
                 : 'Command_list));
# 778 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                            make_cmd parseState (SCexpr _3) :: _1 
                   )
# 120 "Parser.fsy"
                 : 'Command_list));
# 790 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                            _1 :: [] 
                   )
# 121 "Parser.fsy"
                 : 'Command_list));
# 801 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                            make_cmd parseState (SCexpr _1) :: [] 
                   )
# 122 "Parser.fsy"
                 : 'Command_list));
# 812 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                         () 
                   )
# 125 "Parser.fsy"
                 : 'Opt_semi));
# 822 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                         () 
                   )
# 126 "Parser.fsy"
                 : 'Opt_semi));
# 832 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                              make_cmd parseState (SCval _2) 
                   )
# 129 "Parser.fsy"
                 : 'Command));
# 843 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                              make_cmd parseState (SCfun _2) 
                   )
# 130 "Parser.fsy"
                 : 'Command));
# 854 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                              make_cmd parseState (SCvar _2) 
                   )
# 131 "Parser.fsy"
                 : 'Command));
# 865 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                              make_cmd parseState (SCtype _2) 
                   )
# 132 "Parser.fsy"
                 : 'Command));
# 876 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                              make_cmd parseState (SChide (_2)) 
                   )
# 133 "Parser.fsy"
                 : 'Command));
# 887 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                              make_cmd parseState (SCremove _2) 
                   )
# 134 "Parser.fsy"
                 : 'Command));
# 898 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                              make_cmd parseState (SCexn _2) 
                   )
# 135 "Parser.fsy"
                 : 'Command));
# 909 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                              make_cmd parseState (SClex _3) 
                   )
# 136 "Parser.fsy"
                 : 'Command));
# 920 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                                    (_1,_2) :: _4 
                   )
# 139 "Parser.fsy"
                 : 'Value_def));
# 933 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                    [_1,_2] 
                   )
# 140 "Parser.fsy"
                 : 'Value_def));
# 945 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                             (_1,_2) :: _4 
                   )
# 143 "Parser.fsy"
                 : 'Function_def));
# 958 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                             (_1,_2) :: [] 
                   )
# 144 "Parser.fsy"
                 : 'Function_def));
# 970 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                              (_1,_2) :: _4 
                   )
# 147 "Parser.fsy"
                 : 'Var_def));
# 983 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                              [_1,_2] 
                   )
# 148 "Parser.fsy"
                 : 'Var_def));
# 995 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                           make_expr parseState (SEfn (_1, _2)) 
                   )
# 151 "Parser.fsy"
                 : 'Equation));
# 1007 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                  make_expr parseState (SEtype (_4,_2)) 
                   )
# 154 "Parser.fsy"
                 : 'Expression_def));
# 1019 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                                  _2 
                   )
# 155 "Parser.fsy"
                 : 'Expression_def));
# 1030 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                            make_expr parseState (SEtype (_1, _3)) 
                   )
# 160 "Parser.fsy"
                 : 'Expression_5));
# 1042 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                         _1 
                   )
# 161 "Parser.fsy"
                 : 'Expression_5));
# 1053 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                     match _1 with [e] -> e | l -> make_expr parseState (SEtuple l) 
                   )
# 164 "Parser.fsy"
                 : 'Expression_4));
# 1064 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                                        _1 :: _3 
                   )
# 167 "Parser.fsy"
                 : 'Expression_3_comma_list));
# 1076 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                                        [_1] 
                   )
# 168 "Parser.fsy"
                 : 'Expression_3_comma_list));
# 1087 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                                                                  make_expr parseState (SEfn (_2, _4)) 
                   )
# 171 "Parser.fsy"
                 : 'Expression_3));
# 1099 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                                                                  make_expr parseState (SEset (_1, _3)) 
                   )
# 172 "Parser.fsy"
                 : 'Expression_3));
# 1111 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                                                                  make_ternop parseState ".[]<-" _1 _4 _7 
                   )
# 173 "Parser.fsy"
                 : 'Expression_3));
# 1124 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                                                                  make_expr parseState (SEsetfield (_1, _3, _5)) 
                   )
# 174 "Parser.fsy"
                 : 'Expression_3));
# 1137 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                                                                  make_expr parseState (SEifthenelse (_2, _4, Some _6)) 
                   )
# 175 "Parser.fsy"
                 : 'Expression_3));
# 1150 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                                                                                  make_expr parseState (SEifthenelse (_2, _4, None)) 
                   )
# 176 "Parser.fsy"
                 : 'Expression_3));
# 1162 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                                                                  make_expr parseState (SEwhile (_2, _4)) 
                   )
# 177 "Parser.fsy"
                 : 'Expression_3));
# 1174 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dir_flag)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                                                                  make_expr parseState (SEfor (_2, _4, _5, _6, _8)) 
                   )
# 178 "Parser.fsy"
                 : 'Expression_3));
# 1189 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                                                                                  make_expr parseState (SEcase (_2, _5)) 
                   )
# 179 "Parser.fsy"
                 : 'Expression_3));
# 1202 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                                                                  make_expr parseState (SEtry (_2, _5)) 
                   )
# 180 "Parser.fsy"
                 : 'Expression_3));
# 1215 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                                                                  make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), _3)))) 
                   )
# 181 "Parser.fsy"
                 : 'Expression_3));
# 1227 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                                                                  make_minus_expr parseState _1 _2 
                   )
# 182 "Parser.fsy"
                 : 'Expression_3));
# 1239 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                                                                  make_unop parseState _1 _2 
                   )
# 183 "Parser.fsy"
                 : 'Expression_3));
# 1251 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                                                                                  make_binop parseState "**" _1 _3 
                   )
# 184 "Parser.fsy"
                 : 'Expression_3));
# 1263 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
# 185 "Parser.fsy"
                 : 'Expression_3));
# 1276 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
# 186 "Parser.fsy"
                 : 'Expression_3));
# 1289 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
# 187 "Parser.fsy"
                 : 'Expression_3));
# 1302 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
# 188 "Parser.fsy"
                 : 'Expression_3));
# 1315 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                                                                                  make_binop parseState _2 _1 _3 
                   )
# 189 "Parser.fsy"
                 : 'Expression_3));
# 1328 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                                                                                  make_binop parseState "=" _1 _3 
                   )
# 190 "Parser.fsy"
                 : 'Expression_3));
# 1340 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                                                                                  make_binop parseState "==" _1 _3 
                   )
# 191 "Parser.fsy"
                 : 'Expression_3));
# 1352 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                                                                                                  make_binop parseState "*" _1 _3 
                   )
# 192 "Parser.fsy"
                 : 'Expression_3));
# 1364 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                                                                                  make_binop parseState "&&" _1 _3 
                   )
# 193 "Parser.fsy"
                 : 'Expression_3));
# 1376 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                                                                                  make_binop parseState "||" _1 _3 
                   )
# 194 "Parser.fsy"
                 : 'Expression_3));
# 1388 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                                                                                  make_unop parseState "::" (make_expr parseState (SEtuple [_1;_3])) 
                   )
# 195 "Parser.fsy"
                 : 'Expression_3));
# 1400 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                                                                                  make_binop parseState ":=" _1 _3 
                   )
# 196 "Parser.fsy"
                 : 'Expression_3));
# 1412 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                                                                                  make_binop parseState "<<" _1 _3 
                   )
# 197 "Parser.fsy"
                 : 'Expression_3));
# 1424 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                                                                                  _1 
                   )
# 198 "Parser.fsy"
                 : 'Expression_3));
# 1435 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                               match _1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) 
                   )
# 201 "Parser.fsy"
                 : 'Expression_2));
# 1446 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 204 "Parser.fsy"
                 : 'Expression_1_list));
# 1458 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                            [_1] 
                   )
# 205 "Parser.fsy"
                 : 'Expression_1_list));
# 1469 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                                                       make_expr parseState (SEid _1) 
                   )
# 208 "Parser.fsy"
                 : 'Expression_1));
# 1480 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                                                       make_string parseState _1 
                   )
# 209 "Parser.fsy"
                 : 'Expression_1));
# 1491 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                                                       make_expr parseState (SEint _1) 
                   )
# 210 "Parser.fsy"
                 : 'Expression_1));
# 1502 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                                                                       make_expr parseState (SEchar _1) 
                   )
# 211 "Parser.fsy"
                 : 'Expression_1));
# 1513 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                                                       make_expr parseState (SEfloat _1) 
                   )
# 212 "Parser.fsy"
                 : 'Expression_1));
# 1524 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                                                                       make_unop parseState "!" _2 
                   )
# 213 "Parser.fsy"
                 : 'Expression_1));
# 1535 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                                                                       make_expr parseState (SEgetfield (_1, _3)) 
                   )
# 214 "Parser.fsy"
                 : 'Expression_1));
# 1547 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                                                                       make_binop parseState ".[]" _1 _4 
                   )
# 215 "Parser.fsy"
                 : 'Expression_1));
# 1559 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                                                                       make_expr parseState (SEtuple []) 
                   )
# 216 "Parser.fsy"
                 : 'Expression_1));
# 1569 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                                                       _2 
                   )
# 217 "Parser.fsy"
                 : 'Expression_1));
# 1580 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Operator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                                                       make_ident parseState _2 
                   )
# 218 "Parser.fsy"
                 : 'Expression_1));
# 1591 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                                                                       make_expr parseState (SElist (LKarray, _2)) 
                   )
# 219 "Parser.fsy"
                 : 'Expression_1));
# 1602 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                                                                       make_expr parseState (SElist (LKlist, _2)) 
                   )
# 220 "Parser.fsy"
                 : 'Expression_1));
# 1613 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                                                       make_expr parseState (SErecord (None, _2)) 
                   )
# 221 "Parser.fsy"
                 : 'Expression_1));
# 1624 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                                                       make_expr parseState (SErecord (Some _2, _4)) 
                   )
# 222 "Parser.fsy"
                 : 'Expression_1));
# 1636 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                                                       make_expr parseState (SEbegin (List.rev _2)) 
                   )
# 223 "Parser.fsy"
                 : 'Expression_1));
# 1648 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                                                                       make_expr parseState (SEbegin []) 
                   )
# 224 "Parser.fsy"
                 : 'Expression_1));
# 1658 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                     _1 
                   )
# 227 "Parser.fsy"
                 : 'Expression_3_emptiable_comma_list));
# 1669 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                                     [] 
                   )
# 228 "Parser.fsy"
                 : 'Expression_3_emptiable_comma_list));
# 1679 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 231 "Parser.fsy"
                 : 'Pattern_1_list));
# 1691 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                      _1 :: [] 
                   )
# 232 "Parser.fsy"
                 : 'Pattern_1_list));
# 1702 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                         () 
                   )
# 235 "Parser.fsy"
                 : 'Opt_bar));
# 1712 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                         () 
                   )
# 236 "Parser.fsy"
                 : 'Opt_bar));
# 1722 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                         _1 
                   )
# 239 "Parser.fsy"
                 : 'Operator));
# 1733 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                         _1 
                   )
# 240 "Parser.fsy"
                 : 'Operator));
# 1744 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                         _1 
                   )
# 241 "Parser.fsy"
                 : 'Operator));
# 1755 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                         _1 
                   )
# 242 "Parser.fsy"
                 : 'Operator));
# 1766 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                         "**" 
                   )
# 243 "Parser.fsy"
                 : 'Operator));
# 1776 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                                         _1 
                   )
# 244 "Parser.fsy"
                 : 'Operator));
# 1787 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                         _1 
                   )
# 245 "Parser.fsy"
                 : 'Operator));
# 1798 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                         "*" 
                   )
# 246 "Parser.fsy"
                 : 'Operator));
# 1808 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                         "=" 
                   )
# 247 "Parser.fsy"
                 : 'Operator));
# 1818 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "Parser.fsy"
                                         "&&" 
                   )
# 248 "Parser.fsy"
                 : 'Operator));
# 1828 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                         "||" 
                   )
# 249 "Parser.fsy"
                 : 'Operator));
# 1838 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                         "==" 
                   )
# 250 "Parser.fsy"
                 : 'Operator));
# 1848 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                         ":=" 
                   )
# 251 "Parser.fsy"
                 : 'Operator));
# 1858 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                         "!" 
                   )
# 252 "Parser.fsy"
                 : 'Operator));
# 1868 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                         "<<" 
                   )
# 253 "Parser.fsy"
                 : 'Operator));
# 1878 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_when_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                                                               (_1, _2, _4) 
                   )
# 256 "Parser.fsy"
                 : 'Matching));
# 1891 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                               None 
                   )
# 259 "Parser.fsy"
                 : 'Opt_when_clause));
# 1901 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                               Some _2 
                   )
# 260 "Parser.fsy"
                 : 'Opt_when_clause));
# 1912 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 263 "Parser.fsy"
                 : 'Matching_list));
# 1924 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "Parser.fsy"
                                                        [_1] 
                   )
# 264 "Parser.fsy"
                 : 'Matching_list));
# 1935 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                                                            (_1, _3) :: _5 
                   )
# 267 "Parser.fsy"
                 : 'Label_expr_list));
# 1948 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                                                            [_1, _3] 
                   )
# 268 "Parser.fsy"
                 : 'Label_expr_list));
# 1960 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                    dirflag.Upto 
                   )
# 271 "Parser.fsy"
                 : 'Dir_flag));
# 1970 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                    dirflag.Downto 
                   )
# 272 "Parser.fsy"
                 : 'Dir_flag));
# 1980 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                                  match _1 with [pat] -> pat | l -> make_pat parseState (SPtuple l)  
                   )
# 277 "Parser.fsy"
                 : 'Pattern_6));
# 1991 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "Parser.fsy"
                                                                  _1 :: _3 
                   )
# 280 "Parser.fsy"
                 : 'Pattern_5_comma_list));
# 2003 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 281 "Parser.fsy"
                                                                  _1 :: [] 
                   )
# 281 "Parser.fsy"
                 : 'Pattern_5_comma_list));
# 2014 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "Parser.fsy"
                                                _1 
                   )
# 284 "Parser.fsy"
                 : 'Pattern_5));
# 2025 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 285 "Parser.fsy"
                                                make_pat parseState (SPas (_1, _3)) 
                   )
# 285 "Parser.fsy"
                 : 'Pattern_5));
# 2037 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                                     _1 
                   )
# 288 "Parser.fsy"
                 : 'Pattern_4));
# 2048 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_4)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                     make_pat parseState (SPor(_1, _3)) 
                   )
# 289 "Parser.fsy"
                 : 'Pattern_4));
# 2060 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                                            _1 
                   )
# 292 "Parser.fsy"
                 : 'Pattern_3));
# 2071 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "Parser.fsy"
                                                            make_cons_pat parseState _1 _3 
                   )
# 293 "Parser.fsy"
                 : 'Pattern_3));
# 2083 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                             _1 
                   )
# 296 "Parser.fsy"
                 : 'Pattern_2));
# 2094 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "Parser.fsy"
                                             make_pat parseState (SPapply (_1, _2)) 
                   )
# 297 "Parser.fsy"
                 : 'Pattern_2));
# 2106 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                                                    make_pat parseState (SPid _1) 
                   )
# 300 "Parser.fsy"
                 : 'Pattern_1));
# 2117 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                                                    make_pat parseState SPany 
                   )
# 301 "Parser.fsy"
                 : 'Pattern_1));
# 2127 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                                                    make_pat_string parseState _1 
                   )
# 302 "Parser.fsy"
                 : 'Pattern_1));
# 2138 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "Parser.fsy"
                                                                                    make_pat parseState (SPint _1) 
                   )
# 303 "Parser.fsy"
                 : 'Pattern_1));
# 2149 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                                                                    make_pat parseState (SPchar _1) 
                   )
# 304 "Parser.fsy"
                 : 'Pattern_1));
# 2160 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                                                    make_pat parseState (SPfloat _1) 
                   )
# 305 "Parser.fsy"
                 : 'Pattern_1));
# 2171 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                                                                    make_pat parseState (SPint(make_minus _2)) 
                   )
# 306 "Parser.fsy"
                 : 'Pattern_1));
# 2183 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "Parser.fsy"
                                                                                    make_pat parseState (SPfloat(- _2)) 
                   )
# 307 "Parser.fsy"
                 : 'Pattern_1));
# 2195 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                                                                    make_pat parseState (SPtuple []) 
                   )
# 308 "Parser.fsy"
                 : 'Pattern_1));
# 2205 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                                                    _2 
                   )
# 309 "Parser.fsy"
                 : 'Pattern_1));
# 2216 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_6)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                                                                    make_pat parseState (SPtype (_2, _4)) 
                   )
# 310 "Parser.fsy"
                 : 'Pattern_1));
# 2228 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "Parser.fsy"
                                                                                    List.foldBack (make_cons_pat parseState) _2 { sp_desc = SPid "[]" ; sp_loc = get_loc parseState } 
                   )
# 311 "Parser.fsy"
                 : 'Pattern_1));
# 2239 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_emptiable_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 312 "Parser.fsy"
                                                                                    make_pat parseState (SParray _2) 
                   )
# 312 "Parser.fsy"
                 : 'Pattern_1));
# 2250 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 313 "Parser.fsy"
                                                                                    make_pat parseState (SPrecord _2) 
                   )
# 313 "Parser.fsy"
                 : 'Pattern_1));
# 2261 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                                  _1 
                   )
# 316 "Parser.fsy"
                 : 'Pattern_5_emptiable_comma_list));
# 2272 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 317 "Parser.fsy"
                                                  [] 
                   )
# 317 "Parser.fsy"
                 : 'Pattern_5_emptiable_comma_list));
# 2282 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                                                            (_1, _3) :: _5 
                   )
# 320 "Parser.fsy"
                 : 'Label_pattern_list));
# 2295 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "Parser.fsy"
                                                                            (_1, _3) :: [] 
                   )
# 321 "Parser.fsy"
                 : 'Label_pattern_list));
# 2307 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "Parser.fsy"
                                                                            make_typ parseState (STarrow(type_expr_of_type_star_list parseState _1, _3)) 
                   )
# 326 "Parser.fsy"
                 : 'Type_expr_2));
# 2319 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "Parser.fsy"
                                                                            type_expr_of_type_star_list parseState _1 
                   )
# 327 "Parser.fsy"
                 : 'Type_expr_2));
# 2330 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "Parser.fsy"
                                                                    _3 :: _1 
                   )
# 330 "Parser.fsy"
                 : 'Type_expr_1_star_list));
# 2342 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "Parser.fsy"
                                                                    [_1] 
                   )
# 331 "Parser.fsy"
                 : 'Type_expr_1_star_list));
# 2353 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 334 "Parser.fsy"
                                                                                          make_typ parseState (STvar _1) 
                   )
# 334 "Parser.fsy"
                 : 'Type_expr_1));
# 2364 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "Parser.fsy"
                                                                                          mark_as_typename parseState 1; make_typ parseState (STconstr(_1, [])) 
                   )
# 335 "Parser.fsy"
                 : 'Type_expr_1));
# 2375 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "Parser.fsy"
                                                                                          mark_as_typename parseState 2; make_typ parseState (STconstr(_2, [_1])) 
                   )
# 336 "Parser.fsy"
                 : 'Type_expr_1));
# 2387 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2_comma_list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "Parser.fsy"
                                                                                          mark_as_typename parseState 6; make_typ parseState (STconstr(_6, _2 :: _4)) 
                   )
# 337 "Parser.fsy"
                 : 'Type_expr_1));
# 2400 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "Parser.fsy"
                                                                                          _2 
                   )
# 338 "Parser.fsy"
                 : 'Type_expr_1));
# 2411 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "Parser.fsy"
                                                                      _1 :: _3 
                   )
# 341 "Parser.fsy"
                 : 'Type_expr_2_comma_list));
# 2423 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 342 "Parser.fsy"
                                                                      [_1] 
                   )
# 342 "Parser.fsy"
                 : 'Type_expr_2_comma_list));
# 2434 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 347 "Parser.fsy"
                 : 'Typedef_list));
# 2446 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 348 "Parser.fsy"
                                                      [_1] 
                   )
# 348 "Parser.fsy"
                 : 'Typedef_list));
# 2457 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_params)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 351 "Parser.fsy"
                                                            mark_as_typename parseState 2; make_typedef parseState _1 _2 _3 
                   )
# 351 "Parser.fsy"
                 : 'Typedef));
# 2470 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "Parser.fsy"
                                                            SKvariant _3 
                   )
# 354 "Parser.fsy"
                 : 'Typedef_decl));
# 2482 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "Parser.fsy"
                                                            SKrecord _3 
                   )
# 355 "Parser.fsy"
                 : 'Typedef_decl));
# 2493 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 356 "Parser.fsy"
                                                            SKabbrev _2 
                   )
# 356 "Parser.fsy"
                 : 'Typedef_decl));
# 2504 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 359 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 359 "Parser.fsy"
                 : 'Constr_decl));
# 2516 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 360 "Parser.fsy"
                                                          [_1] 
                   )
# 360 "Parser.fsy"
                 : 'Constr_decl));
# 2527 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_1_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "Parser.fsy"
                                                            (_1, List.rev _3) 
                   )
# 363 "Parser.fsy"
                 : 'Constr1_decl));
# 2539 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "Parser.fsy"
                                                            (_1, []) 
                   )
# 364 "Parser.fsy"
                 : 'Constr1_decl));
# 2550 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 367 "Parser.fsy"
                 : 'Label_decl));
# 2562 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "Parser.fsy"
                                                          [_1] 
                   )
# 368 "Parser.fsy"
                 : 'Label_decl));
# 2573 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 371 "Parser.fsy"
                                                                 (_2, _4, _1) 
                   )
# 371 "Parser.fsy"
                 : 'Label1_decl));
# 2586 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "Parser.fsy"
                                         access.Mutable 
                   )
# 374 "Parser.fsy"
                 : 'Opt_mutable));
# 2596 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 375 "Parser.fsy"
                                         access.Immutable 
                   )
# 375 "Parser.fsy"
                 : 'Opt_mutable));
# 2606 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 378 "Parser.fsy"
                                                         _2 
                   )
# 378 "Parser.fsy"
                 : 'Type_params));
# 2617 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "Parser.fsy"
                                                         [_1] 
                   )
# 379 "Parser.fsy"
                 : 'Type_params));
# 2628 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 380 "Parser.fsy"
                                                         [] 
                   )
# 380 "Parser.fsy"
                 : 'Type_params));
# 2638 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 383 "Parser.fsy"
                 : 'Type_var_list));
# 2650 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "Parser.fsy"
                                                        [_1] 
                   )
# 384 "Parser.fsy"
                 : 'Type_var_list));
# 2661 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 389 "Parser.fsy"
                                                               [] 
                   )
# 389 "Parser.fsy"
                 : 'Lexer_def_list));
# 2671 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 390 "Parser.fsy"
                                                               _1 :: _3 
                   )
# 390 "Parser.fsy"
                 : 'Lexer_def_list));
# 2684 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 393 "Parser.fsy"
                                                            Macro_def (_2, _4) 
                   )
# 393 "Parser.fsy"
                 : 'Lexer_def));
# 2696 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 394 "Parser.fsy"
                                                            Rules_def _2 
                   )
# 394 "Parser.fsy"
                 : 'Lexer_def));
# 2707 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 397 "Parser.fsy"
                                                               Alt [_1;_3]  
                   )
# 397 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2719 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 398 "Parser.fsy"
                                                               _1 
                   )
# 398 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2730 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "Parser.fsy"
                                                               Seq [] 
                   )
# 399 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2740 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 402 "Parser.fsy"
                                                           Seq [_1; _2] 
                   )
# 402 "Parser.fsy"
                 : 'Lexer_regexp_2));
# 2752 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 403 "Parser.fsy"
                                                           _1 
                   )
# 403 "Parser.fsy"
                 : 'Lexer_regexp_2));
# 2763 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 406 "Parser.fsy"
                                                                         Seq[_1;Star _1] 
                   )
# 406 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2775 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 407 "Parser.fsy"
                                                                         Star _1 
                   )
# 407 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2786 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 408 "Parser.fsy"
                                                                         Alt[Seq[];_1] 
                   )
# 408 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2797 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 409 "Parser.fsy"
                                                                         Inp (Alphabet (int _1)) 
                   )
# 409 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2808 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 410 "Parser.fsy"
                                                                         Inp Any 
                   )
# 410 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2818 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 411 "Parser.fsy"
                                                                         Seq ([for c in _1 -> Inp (Alphabet (int c))]) 
                   )
# 411 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2829 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 412 "Parser.fsy"
                                                                         Macro _1 
                   )
# 412 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2840 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 413 "Parser.fsy"
                                                                         _2 
                   )
# 413 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2851 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 414 "Parser.fsy"
                                                                         Alt ([for c in _2 -> Inp (Alphabet c)]) 
                   )
# 414 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2862 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 415 "Parser.fsy"
                                                                         Inp(NotCharSet(_3)) 
                   )
# 415 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2874 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 418 "Parser.fsy"
                                                              Set.union _1 _2 
                   )
# 418 "Parser.fsy"
                 : 'Lexer_charset_list));
# 2886 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 419 "Parser.fsy"
                                                              _1 
                   )
# 419 "Parser.fsy"
                 : 'Lexer_charset_list));
# 2897 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 422 "Parser.fsy"
                                                   Set.singleton (int _1) 
                   )
# 422 "Parser.fsy"
                 : 'Lexer_charset));
# 2908 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 423 "Parser.fsy"
                                                   Set.ofSeq [ for c in _1 .. _3 -> int c ] 
                   )
# 423 "Parser.fsy"
                 : 'Lexer_charset));
# 2921 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "Parser.fsy"
                                                            [_1] 
                   )
# 426 "Parser.fsy"
                 : 'Lexer_rule_list));
# 2932 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 427 "Parser.fsy"
                                                            _1 :: _3 
                   )
# 427 "Parser.fsy"
                 : 'Lexer_rule_list));
# 2944 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 430 "Parser.fsy"
                                                                              (_1, _2, _4, get_loc parseState) 
                   )
# 430 "Parser.fsy"
                 : 'Lexer_rule));
# 2957 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 433 "Parser.fsy"
                                                   [] 
                   )
# 433 "Parser.fsy"
                 : 'Lexer_rule_args));
# 2967 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 434 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 434 "Parser.fsy"
                 : 'Lexer_rule_args));
# 2979 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 437 "Parser.fsy"
                                                                  [] 
                   )
# 437 "Parser.fsy"
                 : 'Lexer_rule_case_list));
# 2989 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 438 "Parser.fsy"
                                                                  _1 :: _2 
                   )
# 438 "Parser.fsy"
                 : 'Lexer_rule_case_list));
# 3001 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_5)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 441 "Parser.fsy"
                                                                       (_1, _3) 
                   )
# 441 "Parser.fsy"
                 : 'Lexer_rule_case));
|]
# 3014 "Parser.fs"
let tables () : FsMiniMAL.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FsMiniMAL.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 72;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Program lexer lexbuf : Syntax.command list * System.Collections.Generic.IDictionary<string, obj> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
