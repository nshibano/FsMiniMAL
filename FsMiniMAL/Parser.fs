// Implementation file for parser generated by fsyacc
module FsMiniMAL.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FsMiniMAL.Lexing
open FsMiniMAL.Parsing.ParseHelpers
# 2 "Parser.fsy"

open FsMiniMAL
open Syntax
open ParseHelper

# 12 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | WITH
  | WHILE
  | WHEN
  | VAR
  | VAL
  | TYPE
  | TRY
  | TO
  | THEN
  | REMOVE
  | OF
  | MUTABLE
  | LEX
  | IF
  | HIDE
  | FUNCT
  | FUN
  | FN
  | FOR
  | EXCEPTION
  | END
  | ELSE
  | DOWNTO
  | DO
  | CATCH
  | CASE
  | BEGIN
  | AS
  | AND
  | QMARK
  | EXCLAMATION
  | RBRACE
  | BARRBRACKET
  | BARBAR
  | BAR
  | LBRACE
  | UNDERSCORE
  | RBRACKET
  | LESSLESS
  | COLONEQUAL
  | LESSMINUS
  | LBRACKETBAR
  | LBRACKET
  | SEMI
  | COLONCOLON
  | COLON
  | DOT
  | MINUSGREATER
  | COMMA
  | STAR
  | RPAREN
  | LPAREN
  | AMPERSANDAMPERSAND
  | EQUALEQUAL
  | EQUAL
  | EOF
  | STRING of (string)
  | FLOAT of (float)
  | CHAR of (char)
  | INT of (string)
  | UNARY of (string)
  | INFIX4 of (string)
  | INFIX3 of (string)
  | SUBTRACTIVE of (string)
  | INFIX2 of (string)
  | INFIX1 of (string)
  | INFIX0 of (string)
  | QUOTED of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_WITH
    | TOKEN_WHILE
    | TOKEN_WHEN
    | TOKEN_VAR
    | TOKEN_VAL
    | TOKEN_TYPE
    | TOKEN_TRY
    | TOKEN_TO
    | TOKEN_THEN
    | TOKEN_REMOVE
    | TOKEN_OF
    | TOKEN_MUTABLE
    | TOKEN_LEX
    | TOKEN_IF
    | TOKEN_HIDE
    | TOKEN_FUNCT
    | TOKEN_FUN
    | TOKEN_FN
    | TOKEN_FOR
    | TOKEN_EXCEPTION
    | TOKEN_END
    | TOKEN_ELSE
    | TOKEN_DOWNTO
    | TOKEN_DO
    | TOKEN_CATCH
    | TOKEN_CASE
    | TOKEN_BEGIN
    | TOKEN_AS
    | TOKEN_AND
    | TOKEN_QMARK
    | TOKEN_EXCLAMATION
    | TOKEN_RBRACE
    | TOKEN_BARRBRACKET
    | TOKEN_BARBAR
    | TOKEN_BAR
    | TOKEN_LBRACE
    | TOKEN_UNDERSCORE
    | TOKEN_RBRACKET
    | TOKEN_LESSLESS
    | TOKEN_COLONEQUAL
    | TOKEN_LESSMINUS
    | TOKEN_LBRACKETBAR
    | TOKEN_LBRACKET
    | TOKEN_SEMI
    | TOKEN_COLONCOLON
    | TOKEN_COLON
    | TOKEN_DOT
    | TOKEN_MINUSGREATER
    | TOKEN_COMMA
    | TOKEN_STAR
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_AMPERSANDAMPERSAND
    | TOKEN_EQUALEQUAL
    | TOKEN_EQUAL
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_CHAR
    | TOKEN_INT
    | TOKEN_UNARY
    | TOKEN_INFIX4
    | TOKEN_INFIX3
    | TOKEN_SUBTRACTIVE
    | TOKEN_INFIX2
    | TOKEN_INFIX1
    | TOKEN_INFIX0
    | TOKEN_QUOTED
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProgram
    | NONTERM_Program
    | NONTERM_Command_list
    | NONTERM_Opt_semi
    | NONTERM_Definition
    | NONTERM_Value_def
    | NONTERM_Function_def
    | NONTERM_Var_def
    | NONTERM_Equation
    | NONTERM_Expression_def
    | NONTERM_Expression
    | NONTERM_Expression_1
    | NONTERM_Expression_2_list
    | NONTERM_Expression_2
    | NONTERM_Matching
    | NONTERM_Matching_list
    | NONTERM_Expression_comma_list
    | NONTERM_Expr_may_type
    | NONTERM_Label_expr_list
    | NONTERM_Dir_flag
    | NONTERM_Opt_bar
    | NONTERM_Opt_when_clause
    | NONTERM_Pattern_0
    | NONTERM_Pattern_0_list
    | NONTERM_Pattern_1
    | NONTERM_Pattern_2
    | NONTERM_Pattern_3
    | NONTERM_Pattern
    | NONTERM_Label_pattern_list
    | NONTERM_Pattern_comma_list
    | NONTERM_Pattern_may_type
    | NONTERM_Operator
    | NONTERM_Type_expr
    | NONTERM_Type_star_list
    | NONTERM_Simple_type
    | NONTERM_Type_comma_list
    | NONTERM_Typedef_list
    | NONTERM_Typedef
    | NONTERM_Typedef_decl
    | NONTERM_Constr_decl
    | NONTERM_Constr1_decl
    | NONTERM_Label_decl
    | NONTERM_Label1_decl
    | NONTERM_Opt_mutable
    | NONTERM_Type_params
    | NONTERM_Type_var_list
    | NONTERM_Lexer_def_list
    | NONTERM_Lexer_def
    | NONTERM_Lexer_regexp_1
    | NONTERM_Lexer_regexp_2
    | NONTERM_Lexer_regexp_3
    | NONTERM_Lexer_charset_1
    | NONTERM_Lexer_charset_2
    | NONTERM_Lexer_rule_list
    | NONTERM_Lexer_rule
    | NONTERM_Lexer_rule_args
    | NONTERM_Lexer_rule_case_list
    | NONTERM_Lexer_rule_case

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | WITH  -> 0 
  | WHILE  -> 1 
  | WHEN  -> 2 
  | VAR  -> 3 
  | VAL  -> 4 
  | TYPE  -> 5 
  | TRY  -> 6 
  | TO  -> 7 
  | THEN  -> 8 
  | REMOVE  -> 9 
  | OF  -> 10 
  | MUTABLE  -> 11 
  | LEX  -> 12 
  | IF  -> 13 
  | HIDE  -> 14 
  | FUNCT  -> 15 
  | FUN  -> 16 
  | FN  -> 17 
  | FOR  -> 18 
  | EXCEPTION  -> 19 
  | END  -> 20 
  | ELSE  -> 21 
  | DOWNTO  -> 22 
  | DO  -> 23 
  | CATCH  -> 24 
  | CASE  -> 25 
  | BEGIN  -> 26 
  | AS  -> 27 
  | AND  -> 28 
  | QMARK  -> 29 
  | EXCLAMATION  -> 30 
  | RBRACE  -> 31 
  | BARRBRACKET  -> 32 
  | BARBAR  -> 33 
  | BAR  -> 34 
  | LBRACE  -> 35 
  | UNDERSCORE  -> 36 
  | RBRACKET  -> 37 
  | LESSLESS  -> 38 
  | COLONEQUAL  -> 39 
  | LESSMINUS  -> 40 
  | LBRACKETBAR  -> 41 
  | LBRACKET  -> 42 
  | SEMI  -> 43 
  | COLONCOLON  -> 44 
  | COLON  -> 45 
  | DOT  -> 46 
  | MINUSGREATER  -> 47 
  | COMMA  -> 48 
  | STAR  -> 49 
  | RPAREN  -> 50 
  | LPAREN  -> 51 
  | AMPERSANDAMPERSAND  -> 52 
  | EQUALEQUAL  -> 53 
  | EQUAL  -> 54 
  | EOF  -> 55 
  | STRING _ -> 56 
  | FLOAT _ -> 57 
  | CHAR _ -> 58 
  | INT _ -> 59 
  | UNARY _ -> 60 
  | INFIX4 _ -> 61 
  | INFIX3 _ -> 62 
  | SUBTRACTIVE _ -> 63 
  | INFIX2 _ -> 64 
  | INFIX1 _ -> 65 
  | INFIX0 _ -> 66 
  | QUOTED _ -> 67 
  | IDENT _ -> 68 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_WITH 
  | 1 -> TOKEN_WHILE 
  | 2 -> TOKEN_WHEN 
  | 3 -> TOKEN_VAR 
  | 4 -> TOKEN_VAL 
  | 5 -> TOKEN_TYPE 
  | 6 -> TOKEN_TRY 
  | 7 -> TOKEN_TO 
  | 8 -> TOKEN_THEN 
  | 9 -> TOKEN_REMOVE 
  | 10 -> TOKEN_OF 
  | 11 -> TOKEN_MUTABLE 
  | 12 -> TOKEN_LEX 
  | 13 -> TOKEN_IF 
  | 14 -> TOKEN_HIDE 
  | 15 -> TOKEN_FUNCT 
  | 16 -> TOKEN_FUN 
  | 17 -> TOKEN_FN 
  | 18 -> TOKEN_FOR 
  | 19 -> TOKEN_EXCEPTION 
  | 20 -> TOKEN_END 
  | 21 -> TOKEN_ELSE 
  | 22 -> TOKEN_DOWNTO 
  | 23 -> TOKEN_DO 
  | 24 -> TOKEN_CATCH 
  | 25 -> TOKEN_CASE 
  | 26 -> TOKEN_BEGIN 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_AND 
  | 29 -> TOKEN_QMARK 
  | 30 -> TOKEN_EXCLAMATION 
  | 31 -> TOKEN_RBRACE 
  | 32 -> TOKEN_BARRBRACKET 
  | 33 -> TOKEN_BARBAR 
  | 34 -> TOKEN_BAR 
  | 35 -> TOKEN_LBRACE 
  | 36 -> TOKEN_UNDERSCORE 
  | 37 -> TOKEN_RBRACKET 
  | 38 -> TOKEN_LESSLESS 
  | 39 -> TOKEN_COLONEQUAL 
  | 40 -> TOKEN_LESSMINUS 
  | 41 -> TOKEN_LBRACKETBAR 
  | 42 -> TOKEN_LBRACKET 
  | 43 -> TOKEN_SEMI 
  | 44 -> TOKEN_COLONCOLON 
  | 45 -> TOKEN_COLON 
  | 46 -> TOKEN_DOT 
  | 47 -> TOKEN_MINUSGREATER 
  | 48 -> TOKEN_COMMA 
  | 49 -> TOKEN_STAR 
  | 50 -> TOKEN_RPAREN 
  | 51 -> TOKEN_LPAREN 
  | 52 -> TOKEN_AMPERSANDAMPERSAND 
  | 53 -> TOKEN_EQUALEQUAL 
  | 54 -> TOKEN_EQUAL 
  | 55 -> TOKEN_EOF 
  | 56 -> TOKEN_STRING 
  | 57 -> TOKEN_FLOAT 
  | 58 -> TOKEN_CHAR 
  | 59 -> TOKEN_INT 
  | 60 -> TOKEN_UNARY 
  | 61 -> TOKEN_INFIX4 
  | 62 -> TOKEN_INFIX3 
  | 63 -> TOKEN_SUBTRACTIVE 
  | 64 -> TOKEN_INFIX2 
  | 65 -> TOKEN_INFIX1 
  | 66 -> TOKEN_INFIX0 
  | 67 -> TOKEN_QUOTED 
  | 68 -> TOKEN_IDENT 
  | 71 -> TOKEN_end_of_input
  | 69 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProgram 
    | 1 -> NONTERM_Program 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Command_list 
    | 4 -> NONTERM_Command_list 
    | 5 -> NONTERM_Command_list 
    | 6 -> NONTERM_Command_list 
    | 7 -> NONTERM_Opt_semi 
    | 8 -> NONTERM_Opt_semi 
    | 9 -> NONTERM_Definition 
    | 10 -> NONTERM_Definition 
    | 11 -> NONTERM_Definition 
    | 12 -> NONTERM_Definition 
    | 13 -> NONTERM_Definition 
    | 14 -> NONTERM_Definition 
    | 15 -> NONTERM_Definition 
    | 16 -> NONTERM_Definition 
    | 17 -> NONTERM_Value_def 
    | 18 -> NONTERM_Value_def 
    | 19 -> NONTERM_Function_def 
    | 20 -> NONTERM_Function_def 
    | 21 -> NONTERM_Var_def 
    | 22 -> NONTERM_Var_def 
    | 23 -> NONTERM_Equation 
    | 24 -> NONTERM_Expression_def 
    | 25 -> NONTERM_Expression_def 
    | 26 -> NONTERM_Expression 
    | 27 -> NONTERM_Expression 
    | 28 -> NONTERM_Expression 
    | 29 -> NONTERM_Expression 
    | 30 -> NONTERM_Expression 
    | 31 -> NONTERM_Expression 
    | 32 -> NONTERM_Expression 
    | 33 -> NONTERM_Expression 
    | 34 -> NONTERM_Expression 
    | 35 -> NONTERM_Expression 
    | 36 -> NONTERM_Expression 
    | 37 -> NONTERM_Expression 
    | 38 -> NONTERM_Expression 
    | 39 -> NONTERM_Expression 
    | 40 -> NONTERM_Expression 
    | 41 -> NONTERM_Expression 
    | 42 -> NONTERM_Expression 
    | 43 -> NONTERM_Expression 
    | 44 -> NONTERM_Expression 
    | 45 -> NONTERM_Expression 
    | 46 -> NONTERM_Expression 
    | 47 -> NONTERM_Expression 
    | 48 -> NONTERM_Expression 
    | 49 -> NONTERM_Expression 
    | 50 -> NONTERM_Expression 
    | 51 -> NONTERM_Expression 
    | 52 -> NONTERM_Expression 
    | 53 -> NONTERM_Expression 
    | 54 -> NONTERM_Expression_1 
    | 55 -> NONTERM_Expression_2_list 
    | 56 -> NONTERM_Expression_2_list 
    | 57 -> NONTERM_Expression_2 
    | 58 -> NONTERM_Expression_2 
    | 59 -> NONTERM_Expression_2 
    | 60 -> NONTERM_Expression_2 
    | 61 -> NONTERM_Expression_2 
    | 62 -> NONTERM_Expression_2 
    | 63 -> NONTERM_Expression_2 
    | 64 -> NONTERM_Expression_2 
    | 65 -> NONTERM_Expression_2 
    | 66 -> NONTERM_Expression_2 
    | 67 -> NONTERM_Expression_2 
    | 68 -> NONTERM_Expression_2 
    | 69 -> NONTERM_Expression_2 
    | 70 -> NONTERM_Expression_2 
    | 71 -> NONTERM_Expression_2 
    | 72 -> NONTERM_Expression_2 
    | 73 -> NONTERM_Matching 
    | 74 -> NONTERM_Matching_list 
    | 75 -> NONTERM_Matching_list 
    | 76 -> NONTERM_Expression_comma_list 
    | 77 -> NONTERM_Expression_comma_list 
    | 78 -> NONTERM_Expression_comma_list 
    | 79 -> NONTERM_Expr_may_type 
    | 80 -> NONTERM_Expr_may_type 
    | 81 -> NONTERM_Label_expr_list 
    | 82 -> NONTERM_Label_expr_list 
    | 83 -> NONTERM_Dir_flag 
    | 84 -> NONTERM_Dir_flag 
    | 85 -> NONTERM_Opt_bar 
    | 86 -> NONTERM_Opt_bar 
    | 87 -> NONTERM_Opt_when_clause 
    | 88 -> NONTERM_Opt_when_clause 
    | 89 -> NONTERM_Pattern_0 
    | 90 -> NONTERM_Pattern_0 
    | 91 -> NONTERM_Pattern_0 
    | 92 -> NONTERM_Pattern_0 
    | 93 -> NONTERM_Pattern_0 
    | 94 -> NONTERM_Pattern_0 
    | 95 -> NONTERM_Pattern_0 
    | 96 -> NONTERM_Pattern_0 
    | 97 -> NONTERM_Pattern_0 
    | 98 -> NONTERM_Pattern_0 
    | 99 -> NONTERM_Pattern_0 
    | 100 -> NONTERM_Pattern_0 
    | 101 -> NONTERM_Pattern_0_list 
    | 102 -> NONTERM_Pattern_0_list 
    | 103 -> NONTERM_Pattern_1 
    | 104 -> NONTERM_Pattern_1 
    | 105 -> NONTERM_Pattern_2 
    | 106 -> NONTERM_Pattern_2 
    | 107 -> NONTERM_Pattern_3 
    | 108 -> NONTERM_Pattern_3 
    | 109 -> NONTERM_Pattern 
    | 110 -> NONTERM_Pattern 
    | 111 -> NONTERM_Label_pattern_list 
    | 112 -> NONTERM_Label_pattern_list 
    | 113 -> NONTERM_Pattern_comma_list 
    | 114 -> NONTERM_Pattern_comma_list 
    | 115 -> NONTERM_Pattern_comma_list 
    | 116 -> NONTERM_Pattern_may_type 
    | 117 -> NONTERM_Pattern_may_type 
    | 118 -> NONTERM_Operator 
    | 119 -> NONTERM_Operator 
    | 120 -> NONTERM_Operator 
    | 121 -> NONTERM_Operator 
    | 122 -> NONTERM_Operator 
    | 123 -> NONTERM_Operator 
    | 124 -> NONTERM_Operator 
    | 125 -> NONTERM_Operator 
    | 126 -> NONTERM_Operator 
    | 127 -> NONTERM_Operator 
    | 128 -> NONTERM_Operator 
    | 129 -> NONTERM_Operator 
    | 130 -> NONTERM_Operator 
    | 131 -> NONTERM_Operator 
    | 132 -> NONTERM_Operator 
    | 133 -> NONTERM_Type_expr 
    | 134 -> NONTERM_Type_expr 
    | 135 -> NONTERM_Type_star_list 
    | 136 -> NONTERM_Type_star_list 
    | 137 -> NONTERM_Simple_type 
    | 138 -> NONTERM_Simple_type 
    | 139 -> NONTERM_Simple_type 
    | 140 -> NONTERM_Simple_type 
    | 141 -> NONTERM_Simple_type 
    | 142 -> NONTERM_Type_comma_list 
    | 143 -> NONTERM_Type_comma_list 
    | 144 -> NONTERM_Typedef_list 
    | 145 -> NONTERM_Typedef_list 
    | 146 -> NONTERM_Typedef 
    | 147 -> NONTERM_Typedef_decl 
    | 148 -> NONTERM_Typedef_decl 
    | 149 -> NONTERM_Typedef_decl 
    | 150 -> NONTERM_Constr_decl 
    | 151 -> NONTERM_Constr_decl 
    | 152 -> NONTERM_Constr1_decl 
    | 153 -> NONTERM_Constr1_decl 
    | 154 -> NONTERM_Label_decl 
    | 155 -> NONTERM_Label_decl 
    | 156 -> NONTERM_Label1_decl 
    | 157 -> NONTERM_Opt_mutable 
    | 158 -> NONTERM_Opt_mutable 
    | 159 -> NONTERM_Type_params 
    | 160 -> NONTERM_Type_params 
    | 161 -> NONTERM_Type_params 
    | 162 -> NONTERM_Type_var_list 
    | 163 -> NONTERM_Type_var_list 
    | 164 -> NONTERM_Lexer_def_list 
    | 165 -> NONTERM_Lexer_def_list 
    | 166 -> NONTERM_Lexer_def 
    | 167 -> NONTERM_Lexer_def 
    | 168 -> NONTERM_Lexer_regexp_1 
    | 169 -> NONTERM_Lexer_regexp_1 
    | 170 -> NONTERM_Lexer_regexp_2 
    | 171 -> NONTERM_Lexer_regexp_2 
    | 172 -> NONTERM_Lexer_regexp_3 
    | 173 -> NONTERM_Lexer_regexp_3 
    | 174 -> NONTERM_Lexer_regexp_3 
    | 175 -> NONTERM_Lexer_regexp_3 
    | 176 -> NONTERM_Lexer_regexp_3 
    | 177 -> NONTERM_Lexer_regexp_3 
    | 178 -> NONTERM_Lexer_regexp_3 
    | 179 -> NONTERM_Lexer_regexp_3 
    | 180 -> NONTERM_Lexer_regexp_3 
    | 181 -> NONTERM_Lexer_regexp_3 
    | 182 -> NONTERM_Lexer_charset_1 
    | 183 -> NONTERM_Lexer_charset_1 
    | 184 -> NONTERM_Lexer_charset_2 
    | 185 -> NONTERM_Lexer_charset_2 
    | 186 -> NONTERM_Lexer_rule_list 
    | 187 -> NONTERM_Lexer_rule_list 
    | 188 -> NONTERM_Lexer_rule 
    | 189 -> NONTERM_Lexer_rule_args 
    | 190 -> NONTERM_Lexer_rule_args 
    | 191 -> NONTERM_Lexer_rule_case_list 
    | 192 -> NONTERM_Lexer_rule_case_list 
    | 193 -> NONTERM_Lexer_rule_case 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 71 
let _fsyacc_tagOfErrorTerminal = 69

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | WITH  -> "WITH" 
  | WHILE  -> "WHILE" 
  | WHEN  -> "WHEN" 
  | VAR  -> "VAR" 
  | VAL  -> "VAL" 
  | TYPE  -> "TYPE" 
  | TRY  -> "TRY" 
  | TO  -> "TO" 
  | THEN  -> "THEN" 
  | REMOVE  -> "REMOVE" 
  | OF  -> "OF" 
  | MUTABLE  -> "MUTABLE" 
  | LEX  -> "LEX" 
  | IF  -> "IF" 
  | HIDE  -> "HIDE" 
  | FUNCT  -> "FUNCT" 
  | FUN  -> "FUN" 
  | FN  -> "FN" 
  | FOR  -> "FOR" 
  | EXCEPTION  -> "EXCEPTION" 
  | END  -> "END" 
  | ELSE  -> "ELSE" 
  | DOWNTO  -> "DOWNTO" 
  | DO  -> "DO" 
  | CATCH  -> "CATCH" 
  | CASE  -> "CASE" 
  | BEGIN  -> "BEGIN" 
  | AS  -> "AS" 
  | AND  -> "AND" 
  | QMARK  -> "QMARK" 
  | EXCLAMATION  -> "EXCLAMATION" 
  | RBRACE  -> "RBRACE" 
  | BARRBRACKET  -> "BARRBRACKET" 
  | BARBAR  -> "BARBAR" 
  | BAR  -> "BAR" 
  | LBRACE  -> "LBRACE" 
  | UNDERSCORE  -> "UNDERSCORE" 
  | RBRACKET  -> "RBRACKET" 
  | LESSLESS  -> "LESSLESS" 
  | COLONEQUAL  -> "COLONEQUAL" 
  | LESSMINUS  -> "LESSMINUS" 
  | LBRACKETBAR  -> "LBRACKETBAR" 
  | LBRACKET  -> "LBRACKET" 
  | SEMI  -> "SEMI" 
  | COLONCOLON  -> "COLONCOLON" 
  | COLON  -> "COLON" 
  | DOT  -> "DOT" 
  | MINUSGREATER  -> "MINUSGREATER" 
  | COMMA  -> "COMMA" 
  | STAR  -> "STAR" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | AMPERSANDAMPERSAND  -> "AMPERSANDAMPERSAND" 
  | EQUALEQUAL  -> "EQUALEQUAL" 
  | EQUAL  -> "EQUAL" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | CHAR _ -> "CHAR" 
  | INT _ -> "INT" 
  | UNARY _ -> "UNARY" 
  | INFIX4 _ -> "INFIX4" 
  | INFIX3 _ -> "INFIX3" 
  | SUBTRACTIVE _ -> "SUBTRACTIVE" 
  | INFIX2 _ -> "INFIX2" 
  | INFIX1 _ -> "INFIX1" 
  | INFIX0 _ -> "INFIX0" 
  | QUOTED _ -> "QUOTED" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | WITH  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | VAL  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | REMOVE  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | MUTABLE  -> (null : System.Object) 
  | LEX  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | HIDE  -> (null : System.Object) 
  | FUNCT  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | EXCEPTION  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | DOWNTO  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | AS  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | QMARK  -> (null : System.Object) 
  | EXCLAMATION  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | BARRBRACKET  -> (null : System.Object) 
  | BARBAR  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | UNDERSCORE  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LESSLESS  -> (null : System.Object) 
  | COLONEQUAL  -> (null : System.Object) 
  | LESSMINUS  -> (null : System.Object) 
  | LBRACKETBAR  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLONCOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | MINUSGREATER  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | AMPERSANDAMPERSAND  -> (null : System.Object) 
  | EQUALEQUAL  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX4 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX3 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SUBTRACTIVE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX2 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX1 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INFIX0 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUOTED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 174us; 6us; 3us; 65535us; 2us; 3us; 6us; 7us; 308us; 309us; 4us; 65535us; 0us; 11us; 3us; 8us; 7us; 8us; 174us; 11us; 2us; 65535us; 14us; 15us; 34us; 35us; 2us; 65535us; 16us; 17us; 38us; 39us; 2us; 65535us; 18us; 19us; 42us; 43us; 1us; 65535us; 36us; 37us; 3us; 65535us; 32us; 33us; 40us; 41us; 44us; 45us; 47us; 65535us; 0us; 12us; 9us; 10us; 48us; 49us; 50us; 51us; 54us; 55us; 57us; 58us; 61us; 62us; 64us; 65us; 67us; 68us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 77us; 78us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 92us; 93us; 99us; 101us; 100us; 101us; 102us; 104us; 103us; 104us; 125us; 105us; 126us; 106us; 127us; 107us; 128us; 108us; 129us; 109us; 130us; 110us; 131us; 111us; 132us; 112us; 133us; 113us; 134us; 114us; 135us; 115us; 136us; 116us; 137us; 117us; 138us; 118us; 154us; 119us; 156us; 121us; 161us; 121us; 164us; 121us; 174us; 12us; 179us; 120us; 184us; 121us; 189us; 122us; 195us; 123us; 355us; 124us; 48us; 65535us; 0us; 139us; 9us; 139us; 48us; 139us; 50us; 139us; 54us; 139us; 57us; 139us; 61us; 139us; 64us; 139us; 67us; 139us; 69us; 139us; 71us; 139us; 73us; 139us; 75us; 139us; 77us; 139us; 81us; 139us; 83us; 139us; 85us; 139us; 87us; 139us; 92us; 139us; 99us; 139us; 100us; 139us; 102us; 139us; 103us; 139us; 125us; 139us; 126us; 139us; 127us; 139us; 128us; 139us; 129us; 139us; 130us; 139us; 131us; 139us; 132us; 139us; 133us; 139us; 134us; 139us; 135us; 139us; 136us; 139us; 137us; 139us; 138us; 139us; 154us; 139us; 156us; 139us; 161us; 139us; 164us; 139us; 167us; 170us; 174us; 139us; 179us; 139us; 184us; 139us; 189us; 139us; 195us; 139us; 355us; 139us; 50us; 65535us; 0us; 140us; 9us; 140us; 48us; 140us; 50us; 140us; 54us; 140us; 57us; 140us; 59us; 142us; 61us; 140us; 64us; 140us; 67us; 140us; 69us; 140us; 71us; 140us; 73us; 140us; 75us; 140us; 77us; 140us; 81us; 140us; 83us; 140us; 85us; 140us; 87us; 140us; 92us; 140us; 99us; 140us; 100us; 140us; 102us; 140us; 103us; 140us; 125us; 140us; 126us; 140us; 127us; 140us; 128us; 140us; 129us; 140us; 130us; 140us; 131us; 140us; 132us; 140us; 133us; 140us; 134us; 140us; 135us; 140us; 136us; 140us; 137us; 140us; 138us; 140us; 141us; 142us; 154us; 140us; 156us; 140us; 161us; 140us; 164us; 140us; 167us; 140us; 174us; 140us; 179us; 140us; 184us; 140us; 189us; 140us; 195us; 140us; 355us; 140us; 52us; 65535us; 0us; 59us; 9us; 59us; 48us; 59us; 50us; 59us; 54us; 59us; 57us; 59us; 59us; 141us; 61us; 59us; 64us; 59us; 67us; 59us; 69us; 59us; 71us; 59us; 73us; 59us; 75us; 59us; 77us; 59us; 81us; 59us; 83us; 59us; 85us; 59us; 87us; 59us; 92us; 59us; 99us; 59us; 100us; 59us; 102us; 59us; 103us; 59us; 125us; 59us; 126us; 59us; 127us; 59us; 128us; 59us; 129us; 59us; 130us; 59us; 131us; 59us; 132us; 59us; 133us; 59us; 134us; 59us; 135us; 59us; 136us; 59us; 137us; 59us; 138us; 59us; 141us; 141us; 149us; 151us; 150us; 151us; 154us; 59us; 156us; 59us; 161us; 59us; 164us; 59us; 167us; 141us; 174us; 59us; 179us; 59us; 184us; 59us; 189us; 59us; 195us; 59us; 355us; 59us; 4us; 65535us; 90us; 180us; 95us; 180us; 97us; 180us; 181us; 180us; 4us; 65535us; 90us; 91us; 95us; 96us; 97us; 98us; 181us; 182us; 4us; 65535us; 156us; 157us; 161us; 162us; 164us; 165us; 184us; 185us; 4us; 65535us; 156us; 183us; 161us; 183us; 164us; 183us; 184us; 183us; 3us; 65535us; 167us; 168us; 171us; 172us; 190us; 191us; 1us; 65535us; 82us; 83us; 3us; 65535us; 89us; 90us; 94us; 95us; 280us; 281us; 1us; 65535us; 177us; 178us; 17us; 65535us; 14us; 220us; 34us; 220us; 36us; 218us; 52us; 218us; 90us; 220us; 95us; 220us; 97us; 220us; 181us; 220us; 197us; 221us; 206us; 220us; 209us; 220us; 212us; 220us; 218us; 218us; 223us; 220us; 227us; 220us; 232us; 220us; 237us; 220us; 3us; 65535us; 36us; 44us; 52us; 53us; 218us; 219us; 13us; 65535us; 14us; 222us; 34us; 222us; 90us; 222us; 95us; 222us; 97us; 222us; 181us; 222us; 206us; 222us; 209us; 222us; 212us; 222us; 223us; 222us; 227us; 222us; 232us; 222us; 237us; 222us; 13us; 65535us; 14us; 225us; 34us; 225us; 90us; 225us; 95us; 225us; 97us; 225us; 181us; 225us; 206us; 225us; 209us; 225us; 212us; 225us; 223us; 224us; 227us; 228us; 232us; 225us; 237us; 225us; 11us; 65535us; 14us; 226us; 34us; 226us; 90us; 226us; 95us; 226us; 97us; 226us; 181us; 226us; 206us; 226us; 209us; 226us; 212us; 226us; 232us; 226us; 237us; 226us; 11us; 65535us; 14us; 32us; 34us; 32us; 90us; 177us; 95us; 177us; 97us; 177us; 181us; 177us; 206us; 239us; 209us; 239us; 212us; 239us; 232us; 233us; 237us; 239us; 2us; 65535us; 215us; 216us; 234us; 235us; 4us; 65535us; 206us; 207us; 209us; 210us; 212us; 213us; 237us; 238us; 4us; 65535us; 206us; 236us; 209us; 236us; 212us; 236us; 237us; 236us; 1us; 65535us; 156us; 159us; 9us; 65535us; 46us; 47us; 186us; 187us; 240us; 241us; 255us; 256us; 264us; 265us; 266us; 271us; 272us; 271us; 286us; 287us; 298us; 299us; 10us; 65535us; 46us; 254us; 186us; 254us; 240us; 254us; 255us; 254us; 264us; 254us; 266us; 254us; 272us; 254us; 286us; 254us; 292us; 257us; 298us; 254us; 11us; 65535us; 46us; 260us; 186us; 260us; 240us; 260us; 255us; 260us; 258us; 259us; 264us; 260us; 266us; 260us; 272us; 260us; 286us; 260us; 292us; 260us; 298us; 260us; 2us; 65535us; 266us; 267us; 272us; 273us; 2us; 65535us; 20us; 21us; 275us; 276us; 2us; 65535us; 20us; 274us; 275us; 274us; 1us; 65535us; 278us; 279us; 2us; 65535us; 281us; 282us; 289us; 290us; 3us; 65535us; 26us; 27us; 281us; 288us; 289us; 288us; 2us; 65535us; 283us; 284us; 294us; 295us; 2us; 65535us; 283us; 293us; 294us; 293us; 2us; 65535us; 283us; 296us; 294us; 296us; 2us; 65535us; 20us; 277us; 275us; 277us; 2us; 65535us; 301us; 302us; 306us; 307us; 2us; 65535us; 29us; 30us; 309us; 310us; 2us; 65535us; 29us; 308us; 309us; 308us; 4us; 65535us; 313us; 314us; 331us; 317us; 349us; 318us; 353us; 318us; 5us; 65535us; 313us; 321us; 319us; 320us; 331us; 321us; 349us; 321us; 353us; 321us; 7us; 65535us; 313us; 323us; 319us; 323us; 320us; 322us; 321us; 322us; 331us; 323us; 349us; 323us; 353us; 323us; 3us; 65535us; 333us; 334us; 336us; 337us; 339us; 340us; 3us; 65535us; 333us; 339us; 336us; 339us; 339us; 339us; 2us; 65535us; 315us; 316us; 345us; 346us; 2us; 65535us; 315us; 344us; 345us; 344us; 2us; 65535us; 347us; 348us; 351us; 352us; 2us; 65535us; 349us; 350us; 353us; 354us; 2us; 65535us; 349us; 353us; 353us; 353us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 10us; 15us; 18us; 21us; 24us; 26us; 30us; 78us; 127us; 178us; 231us; 236us; 241us; 246us; 251us; 255us; 257us; 261us; 263us; 281us; 285us; 299us; 313us; 325us; 337us; 340us; 345us; 350us; 352us; 362us; 373us; 385us; 388us; 391us; 394us; 396us; 399us; 403us; 406us; 409us; 412us; 415us; 418us; 421us; 424us; 429us; 435us; 443us; 447us; 451us; 454us; 457us; 460us; 463us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 3us; 4us; 2us; 1us; 3us; 1us; 1us; 1us; 2us; 3us; 3us; 4us; 71us; 2us; 3us; 71us; 1us; 3us; 2us; 4us; 8us; 15us; 4us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 5us; 15us; 6us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 2us; 17us; 18us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 19us; 1us; 19us; 2us; 21us; 22us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 15us; 24us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 25us; 15us; 25us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 26us; 1us; 26us; 1us; 26us; 15us; 26us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 27us; 57us; 1us; 27us; 15us; 27us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 6us; 28us; 29us; 55us; 56us; 63us; 64us; 4us; 28us; 29us; 63us; 64us; 2us; 28us; 64us; 16us; 28us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 64us; 2us; 28us; 64us; 1us; 28us; 15us; 28us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 29us; 63us; 1us; 29us; 15us; 29us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 30us; 31us; 16us; 30us; 31us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 30us; 31us; 16us; 30us; 31us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 30us; 15us; 30us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 32us; 15us; 32us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 32us; 15us; 32us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 33us; 1us; 33us; 1us; 33us; 15us; 33us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 33us; 15us; 33us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 33us; 15us; 33us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 34us; 15us; 34us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 15us; 35us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 37us; 2us; 37us; 123us; 15us; 37us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 38us; 2us; 38us; 124us; 15us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 64us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 73us; 16us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 79us; 80us; 16us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 81us; 82us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 88us; 15us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 193us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 4us; 55us; 56us; 63us; 64us; 1us; 55us; 1us; 57us; 3us; 57us; 81us; 82us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 2us; 62us; 131us; 3us; 62us; 63us; 64us; 2us; 63us; 64us; 1us; 63us; 1us; 64us; 1us; 64us; 2us; 65us; 66us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 68us; 2us; 69us; 70us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 70us; 2us; 71us; 72us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 73us; 1us; 73us; 2us; 74us; 75us; 1us; 74us; 1us; 74us; 2us; 76us; 77us; 1us; 76us; 1us; 76us; 1us; 79us; 1us; 79us; 2us; 81us; 82us; 2us; 81us; 82us; 1us; 81us; 1us; 81us; 1us; 83us; 1us; 84us; 1us; 86us; 1us; 88us; 1us; 89us; 2us; 89us; 104us; 1us; 90us; 1us; 91us; 1us; 92us; 1us; 93us; 1us; 94us; 2us; 95us; 96us; 1us; 95us; 1us; 96us; 1us; 97us; 1us; 97us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 99us; 1us; 100us; 1us; 100us; 1us; 100us; 2us; 101us; 102us; 1us; 101us; 1us; 103us; 1us; 104us; 2us; 105us; 106us; 1us; 106us; 1us; 106us; 1us; 107us; 3us; 108us; 109us; 110us; 1us; 108us; 1us; 108us; 1us; 110us; 1us; 110us; 2us; 111us; 112us; 2us; 111us; 112us; 2us; 111us; 112us; 1us; 111us; 1us; 111us; 2us; 113us; 114us; 1us; 113us; 1us; 113us; 2us; 116us; 117us; 1us; 116us; 1us; 116us; 1us; 118us; 1us; 119us; 1us; 120us; 1us; 121us; 1us; 122us; 1us; 125us; 1us; 126us; 1us; 127us; 1us; 128us; 1us; 129us; 1us; 130us; 1us; 132us; 3us; 133us; 134us; 135us; 1us; 133us; 1us; 133us; 2us; 135us; 152us; 1us; 135us; 2us; 135us; 139us; 2us; 136us; 139us; 1us; 137us; 1us; 138us; 1us; 139us; 2us; 140us; 141us; 2us; 140us; 141us; 1us; 140us; 1us; 140us; 1us; 140us; 1us; 140us; 1us; 141us; 2us; 142us; 143us; 1us; 142us; 1us; 142us; 2us; 144us; 145us; 1us; 144us; 1us; 144us; 1us; 146us; 1us; 146us; 1us; 146us; 2us; 147us; 148us; 1us; 147us; 1us; 147us; 1us; 148us; 1us; 148us; 1us; 148us; 1us; 149us; 1us; 149us; 2us; 150us; 151us; 1us; 150us; 1us; 150us; 2us; 152us; 153us; 1us; 152us; 2us; 154us; 155us; 1us; 154us; 1us; 154us; 1us; 156us; 1us; 156us; 1us; 156us; 1us; 156us; 1us; 157us; 1us; 159us; 1us; 159us; 1us; 159us; 1us; 160us; 2us; 162us; 163us; 1us; 162us; 1us; 162us; 1us; 165us; 1us; 165us; 1us; 165us; 1us; 166us; 1us; 166us; 1us; 166us; 2us; 166us; 168us; 1us; 167us; 1us; 167us; 2us; 168us; 179us; 2us; 168us; 193us; 1us; 168us; 2us; 168us; 170us; 2us; 169us; 170us; 4us; 170us; 172us; 173us; 174us; 4us; 171us; 172us; 173us; 174us; 1us; 172us; 1us; 173us; 1us; 174us; 1us; 175us; 1us; 176us; 1us; 177us; 1us; 178us; 1us; 179us; 1us; 179us; 2us; 180us; 181us; 1us; 180us; 1us; 180us; 1us; 181us; 1us; 181us; 1us; 181us; 2us; 182us; 183us; 1us; 182us; 2us; 184us; 185us; 1us; 185us; 1us; 185us; 2us; 186us; 187us; 1us; 187us; 1us; 187us; 1us; 188us; 1us; 188us; 1us; 188us; 1us; 188us; 1us; 190us; 1us; 190us; 2us; 191us; 192us; 1us; 192us; 1us; 193us; 1us; 193us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 11us; 13us; 15us; 19us; 22us; 24us; 27us; 43us; 45us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 102us; 105us; 107us; 109us; 112us; 115us; 117us; 119us; 122us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 155us; 157us; 173us; 175us; 177us; 179us; 195us; 198us; 200us; 216us; 223us; 228us; 231us; 248us; 251us; 253us; 269us; 272us; 274us; 290us; 293us; 310us; 313us; 330us; 332us; 348us; 350us; 366us; 368us; 384us; 386us; 388us; 390us; 406us; 408us; 424us; 426us; 442us; 444us; 460us; 462us; 464us; 466us; 468us; 484us; 486us; 488us; 490us; 492us; 494us; 496us; 499us; 515us; 517us; 520us; 536us; 552us; 568us; 584us; 600us; 616us; 632us; 648us; 664us; 680us; 696us; 712us; 728us; 744us; 760us; 776us; 792us; 809us; 826us; 842us; 858us; 860us; 862us; 864us; 866us; 868us; 870us; 872us; 874us; 876us; 878us; 880us; 882us; 884us; 886us; 888us; 890us; 895us; 897us; 899us; 903us; 905us; 907us; 909us; 911us; 913us; 916us; 920us; 923us; 925us; 927us; 929us; 932us; 934us; 936us; 938us; 940us; 942us; 944us; 946us; 948us; 950us; 952us; 955us; 957us; 959us; 961us; 963us; 965us; 967us; 970us; 972us; 974us; 976us; 978us; 980us; 983us; 985us; 987us; 990us; 992us; 994us; 996us; 998us; 1001us; 1004us; 1006us; 1008us; 1010us; 1012us; 1014us; 1016us; 1018us; 1021us; 1023us; 1025us; 1027us; 1029us; 1031us; 1034us; 1036us; 1038us; 1040us; 1042us; 1044us; 1046us; 1048us; 1050us; 1052us; 1054us; 1056us; 1058us; 1060us; 1062us; 1065us; 1067us; 1069us; 1071us; 1074us; 1076us; 1078us; 1080us; 1084us; 1086us; 1088us; 1090us; 1092us; 1095us; 1098us; 1101us; 1103us; 1105us; 1108us; 1110us; 1112us; 1115us; 1117us; 1119us; 1121us; 1123us; 1125us; 1127us; 1129us; 1131us; 1133us; 1135us; 1137us; 1139us; 1141us; 1143us; 1147us; 1149us; 1151us; 1154us; 1156us; 1159us; 1162us; 1164us; 1166us; 1168us; 1171us; 1174us; 1176us; 1178us; 1180us; 1182us; 1184us; 1187us; 1189us; 1191us; 1194us; 1196us; 1198us; 1200us; 1202us; 1204us; 1207us; 1209us; 1211us; 1213us; 1215us; 1217us; 1219us; 1221us; 1224us; 1226us; 1228us; 1231us; 1233us; 1236us; 1238us; 1240us; 1242us; 1244us; 1246us; 1248us; 1250us; 1252us; 1254us; 1256us; 1258us; 1261us; 1263us; 1265us; 1267us; 1269us; 1271us; 1273us; 1275us; 1277us; 1280us; 1282us; 1284us; 1287us; 1290us; 1292us; 1295us; 1298us; 1303us; 1308us; 1310us; 1312us; 1314us; 1316us; 1318us; 1320us; 1322us; 1324us; 1326us; 1329us; 1331us; 1333us; 1335us; 1337us; 1339us; 1342us; 1344us; 1347us; 1349us; 1351us; 1354us; 1356us; 1358us; 1360us; 1362us; 1364us; 1366us; 1368us; 1370us; 1373us; 1375us; 1377us; |]
let _fsyacc_action_rows = 357
let _fsyacc_actionTableElements = [|29us; 32768us; 1us; 75us; 3us; 18us; 4us; 14us; 5us; 20us; 6us; 92us; 9us; 24us; 12us; 28us; 13us; 69us; 14us; 22us; 15us; 97us; 16us; 16us; 17us; 52us; 18us; 79us; 19us; 26us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 55us; 5us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 49152us; 1us; 16391us; 43us; 9us; 9us; 32768us; 3us; 18us; 4us; 14us; 5us; 20us; 9us; 24us; 12us; 28us; 14us; 22us; 16us; 16us; 19us; 26us; 55us; 4us; 0us; 16385us; 0us; 16386us; 1us; 16391us; 43us; 9us; 9us; 32768us; 3us; 18us; 4us; 14us; 5us; 20us; 9us; 24us; 12us; 28us; 14us; 22us; 16us; 16us; 19us; 26us; 20us; 175us; 0us; 16387us; 20us; 16392us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16388us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 0us; 16389us; 14us; 16390us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 0us; 16392us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16393us; 1us; 32768us; 68us; 36us; 0us; 16394us; 1us; 32768us; 68us; 40us; 0us; 16395us; 2us; 16545us; 51us; 301us; 67us; 304us; 0us; 16396us; 1us; 32768us; 68us; 23us; 0us; 16397us; 1us; 32768us; 68us; 25us; 0us; 16398us; 1us; 32768us; 68us; 291us; 0us; 16399us; 1us; 32768us; 35us; 29us; 2us; 16548us; 4us; 311us; 16us; 315us; 1us; 32768us; 31us; 31us; 0us; 16400us; 2us; 32768us; 45us; 46us; 54us; 50us; 1us; 16402us; 28us; 34us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16401us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 196us; 1us; 16404us; 28us; 38us; 1us; 32768us; 68us; 36us; 0us; 16403us; 2us; 32768us; 45us; 46us; 54us; 50us; 1us; 16406us; 28us; 42us; 1us; 32768us; 68us; 40us; 0us; 16405us; 2us; 32768us; 45us; 46us; 54us; 50us; 0us; 16407us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 1us; 32768us; 54us; 48us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16408us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16409us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 196us; 1us; 32768us; 47us; 54us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16410us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 16441us; 40us; 57us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16411us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 12us; 16440us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 46us; 60us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 68us; 143us; 2us; 32768us; 42us; 61us; 68us; 66us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 33us; 135us; 37us; 63us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 16448us; 40us; 64us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16412us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 16447us; 40us; 67us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16413us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 8us; 71us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 16415us; 21us; 73us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16414us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 23us; 77us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16416us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 32768us; 68us; 80us; 1us; 32768us; 54us; 81us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 16us; 32768us; 7us; 192us; 22us; 193us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 23us; 85us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 14us; 16417us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 10us; 89us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 16469us; 34us; 194us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16418us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 15us; 32768us; 24us; 94us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 1us; 16469us; 34us; 194us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16419us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16420us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 16507us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16421us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 16508us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16422us; 1us; 16423us; 61us; 125us; 1us; 16424us; 61us; 125us; 3us; 16425us; 49us; 133us; 61us; 125us; 62us; 126us; 3us; 16426us; 49us; 133us; 61us; 125us; 62us; 126us; 7us; 16427us; 44us; 136us; 49us; 133us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 7us; 16428us; 44us; 136us; 49us; 133us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 7us; 16429us; 44us; 136us; 49us; 133us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 7us; 16430us; 44us; 136us; 49us; 133us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 1us; 16431us; 61us; 125us; 11us; 16432us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 12us; 16433us; 33us; 135us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 6us; 16434us; 44us; 136us; 49us; 133us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 14us; 16435us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 14us; 16436us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 15us; 32768us; 33us; 135us; 37us; 155us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 14us; 16457us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 15us; 16464us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 45us; 186us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 15us; 16466us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 48us; 190us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 14us; 16472us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 15us; 32768us; 31us; 356us; 33us; 135us; 38us; 138us; 39us; 137us; 44us; 136us; 49us; 133us; 52us; 134us; 53us; 132us; 54us; 131us; 61us; 125us; 62us; 126us; 63us; 128us; 64us; 127us; 65us; 129us; 66us; 130us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16437us; 0us; 16438us; 12us; 16440us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 46us; 152us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 68us; 143us; 0us; 16439us; 0us; 16441us; 1us; 16441us; 54us; 189us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 11us; 32768us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 68us; 143us; 11us; 16515us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 68us; 143us; 1us; 16446us; 46us; 152us; 2us; 32768us; 42us; 154us; 68us; 153us; 0us; 16447us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16448us; 32us; 16462us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 150us; 33us; 250us; 35us; 167us; 38us; 253us; 39us; 252us; 41us; 161us; 42us; 164us; 49us; 247us; 51us; 156us; 52us; 249us; 53us; 251us; 54us; 248us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 103us; 61us; 246us; 62us; 245us; 63us; 100us; 64us; 244us; 65us; 243us; 66us; 242us; 68us; 56us; 1us; 32768us; 50us; 158us; 0us; 16449us; 1us; 32768us; 50us; 160us; 0us; 16450us; 20us; 16462us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 1us; 32768us; 32us; 163us; 0us; 16451us; 20us; 16462us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 1us; 32768us; 37us; 166us; 0us; 16452us; 11us; 32768us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 68us; 144us; 1us; 32768us; 31us; 169us; 0us; 16453us; 1us; 32768us; 0us; 171us; 1us; 32768us; 68us; 188us; 1us; 32768us; 31us; 173us; 0us; 16454us; 29us; 32768us; 1us; 75us; 3us; 18us; 4us; 14us; 5us; 20us; 6us; 92us; 9us; 24us; 12us; 28us; 13us; 69us; 14us; 22us; 15us; 97us; 16us; 16us; 17us; 52us; 18us; 79us; 19us; 26us; 20us; 176us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16455us; 0us; 16456us; 1us; 16471us; 2us; 195us; 1us; 32768us; 47us; 179us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 1us; 16459us; 34us; 181us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16458us; 1us; 16461us; 48us; 184us; 20us; 16462us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16460us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16463us; 1us; 32768us; 54us; 189us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 1us; 32768us; 68us; 188us; 0us; 16465us; 0us; 16467us; 0us; 16468us; 0us; 16470us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16473us; 11us; 16473us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 196us; 0us; 16474us; 0us; 16475us; 0us; 16476us; 0us; 16477us; 0us; 16478us; 2us; 32768us; 57us; 205us; 59us; 204us; 0us; 16479us; 0us; 16480us; 11us; 16499us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 1us; 32768us; 50us; 208us; 0us; 16481us; 11us; 16499us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 1us; 32768us; 37us; 211us; 0us; 16482us; 11us; 16499us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 1us; 32768us; 32us; 214us; 0us; 16483us; 1us; 32768us; 68us; 231us; 1us; 32768us; 31us; 217us; 0us; 16484us; 11us; 16486us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 196us; 0us; 16485us; 0us; 16487us; 0us; 16488us; 1us; 16489us; 44us; 223us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16490us; 0us; 16491us; 2us; 16493us; 27us; 229us; 34us; 227us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16492us; 1us; 32768us; 68us; 230us; 0us; 16494us; 1us; 32768us; 54us; 232us; 11us; 32768us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 1us; 16496us; 48us; 234us; 1us; 32768us; 68us; 231us; 0us; 16495us; 1us; 16498us; 48us; 237us; 11us; 16499us; 35us; 215us; 36us; 198us; 41us; 212us; 42us; 209us; 51us; 206us; 56us; 199us; 57us; 202us; 58us; 201us; 59us; 200us; 63us; 203us; 68us; 197us; 0us; 16497us; 1us; 16501us; 45us; 240us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16500us; 0us; 16502us; 0us; 16503us; 0us; 16504us; 0us; 16505us; 0us; 16506us; 0us; 16509us; 0us; 16510us; 0us; 16511us; 0us; 16512us; 0us; 16513us; 0us; 16514us; 0us; 16516us; 2us; 16518us; 47us; 255us; 49us; 258us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16517us; 1us; 16536us; 49us; 258us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 1us; 16519us; 68us; 263us; 1us; 16520us; 68us; 263us; 0us; 16521us; 0us; 16522us; 0us; 16523us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 2us; 32768us; 48us; 266us; 50us; 270us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 1us; 32768us; 50us; 268us; 1us; 32768us; 68us; 269us; 0us; 16524us; 0us; 16525us; 1us; 16527us; 48us; 272us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16526us; 1us; 16529us; 28us; 275us; 2us; 16545us; 51us; 301us; 67us; 304us; 0us; 16528us; 1us; 32768us; 68us; 278us; 2us; 32768us; 53us; 286us; 54us; 280us; 0us; 16530us; 2us; 16469us; 34us; 194us; 35us; 283us; 1us; 32768us; 68us; 291us; 0us; 16531us; 1us; 16542us; 11us; 300us; 1us; 32768us; 31us; 285us; 0us; 16532us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16533us; 1us; 16535us; 34us; 289us; 1us; 32768us; 68us; 291us; 0us; 16534us; 1us; 16537us; 10us; 292us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 1us; 16539us; 48us; 294us; 1us; 16542us; 11us; 300us; 0us; 16538us; 1us; 32768us; 68us; 297us; 1us; 32768us; 45us; 298us; 3us; 32768us; 51us; 264us; 67us; 261us; 68us; 262us; 0us; 16540us; 0us; 16541us; 1us; 32768us; 67us; 305us; 1us; 32768us; 50us; 303us; 0us; 16543us; 0us; 16544us; 1us; 16547us; 48us; 306us; 1us; 32768us; 67us; 305us; 0us; 16546us; 1us; 16391us; 43us; 13us; 2us; 16548us; 4us; 311us; 16us; 315us; 0us; 16549us; 1us; 32768us; 68us; 312us; 1us; 32768us; 54us; 313us; 6us; 32768us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 1us; 16550us; 34us; 319us; 1us; 32768us; 68us; 347us; 0us; 16551us; 2us; 32768us; 34us; 319us; 50us; 332us; 2us; 32768us; 34us; 319us; 35us; 355us; 6us; 32768us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 6us; 16552us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 6us; 16553us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 3us; 16554us; 29us; 326us; 49us; 325us; 64us; 324us; 3us; 16555us; 29us; 326us; 49us; 325us; 64us; 324us; 0us; 16556us; 0us; 16557us; 0us; 16558us; 0us; 16559us; 0us; 16560us; 0us; 16561us; 0us; 16562us; 6us; 32768us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 0us; 16563us; 2us; 32768us; 58us; 341us; 65us; 336us; 1us; 32768us; 37us; 335us; 0us; 16564us; 1us; 32768us; 58us; 341us; 1us; 32768us; 37us; 338us; 0us; 16565us; 1us; 16567us; 58us; 341us; 0us; 16566us; 1us; 16568us; 63us; 342us; 1us; 32768us; 58us; 343us; 0us; 16569us; 1us; 16570us; 28us; 345us; 1us; 32768us; 68us; 347us; 0us; 16571us; 1us; 16573us; 68us; 351us; 1us; 32768us; 54us; 349us; 6us; 32768us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 0us; 16572us; 1us; 16573us; 68us; 351us; 0us; 16574us; 6us; 16575us; 36us; 328us; 42us; 333us; 51us; 331us; 56us; 329us; 58us; 327us; 68us; 330us; 0us; 16576us; 20us; 32768us; 1us; 75us; 6us; 92us; 13us; 69us; 15us; 97us; 17us; 52us; 18us; 79us; 25us; 87us; 26us; 174us; 30us; 149us; 35us; 167us; 41us; 161us; 42us; 164us; 51us; 156us; 56us; 145us; 57us; 148us; 58us; 147us; 59us; 146us; 60us; 102us; 63us; 99us; 68us; 56us; 0us; 16577us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 30us; 31us; 33us; 43us; 44us; 45us; 47us; 57us; 58us; 79us; 94us; 95us; 110us; 111us; 123us; 124us; 126us; 127us; 129us; 130us; 133us; 134us; 136us; 137us; 139us; 140us; 142us; 143us; 145us; 148us; 150us; 151us; 154us; 156us; 168us; 169us; 181us; 183us; 185us; 186us; 189us; 191us; 193us; 194us; 197us; 198us; 202us; 204us; 225us; 240us; 261us; 276us; 288us; 290us; 311us; 326us; 328us; 349us; 364us; 377us; 380us; 401us; 417us; 419us; 440us; 455us; 457us; 478us; 493us; 514us; 530us; 551us; 567us; 588us; 603us; 624us; 640us; 661us; 676us; 678us; 680us; 701us; 718us; 739us; 755us; 776us; 791us; 812us; 828us; 830us; 842us; 843us; 864us; 880us; 882us; 894us; 895us; 907us; 908us; 929us; 950us; 951us; 972us; 993us; 994us; 996us; 998us; 1002us; 1006us; 1014us; 1022us; 1030us; 1038us; 1040us; 1052us; 1065us; 1072us; 1087us; 1102us; 1118us; 1133us; 1149us; 1165us; 1180us; 1196us; 1217us; 1238us; 1259us; 1280us; 1301us; 1322us; 1343us; 1364us; 1385us; 1406us; 1427us; 1448us; 1469us; 1490us; 1491us; 1492us; 1505us; 1506us; 1507us; 1509us; 1510us; 1511us; 1512us; 1513us; 1525us; 1537us; 1539us; 1542us; 1543us; 1564us; 1565us; 1598us; 1600us; 1601us; 1603us; 1604us; 1625us; 1627us; 1628us; 1649us; 1651us; 1652us; 1664us; 1666us; 1667us; 1669us; 1671us; 1673us; 1674us; 1704us; 1705us; 1706us; 1708us; 1710us; 1731us; 1733us; 1745us; 1746us; 1748us; 1769us; 1770us; 1774us; 1775us; 1777us; 1798us; 1800us; 1801us; 1802us; 1803us; 1804us; 1825us; 1826us; 1838us; 1839us; 1840us; 1841us; 1842us; 1843us; 1846us; 1847us; 1848us; 1860us; 1862us; 1863us; 1875us; 1877us; 1878us; 1890us; 1892us; 1893us; 1895us; 1897us; 1898us; 1910us; 1911us; 1912us; 1913us; 1915us; 1927us; 1928us; 1929us; 1932us; 1944us; 1945us; 1947us; 1948us; 1950us; 1962us; 1964us; 1966us; 1967us; 1969us; 1981us; 1982us; 1984us; 1988us; 1989us; 1990us; 1991us; 1992us; 1993us; 1994us; 1995us; 1996us; 1997us; 1998us; 1999us; 2000us; 2001us; 2004us; 2008us; 2009us; 2011us; 2015us; 2017us; 2019us; 2020us; 2021us; 2022us; 2026us; 2029us; 2033us; 2035us; 2037us; 2038us; 2039us; 2041us; 2045us; 2046us; 2048us; 2051us; 2052us; 2054us; 2057us; 2058us; 2061us; 2063us; 2064us; 2066us; 2068us; 2069us; 2073us; 2074us; 2076us; 2078us; 2079us; 2081us; 2085us; 2087us; 2089us; 2090us; 2092us; 2094us; 2098us; 2099us; 2100us; 2102us; 2104us; 2105us; 2106us; 2108us; 2110us; 2111us; 2113us; 2116us; 2117us; 2119us; 2121us; 2128us; 2130us; 2132us; 2133us; 2136us; 2139us; 2146us; 2153us; 2160us; 2164us; 2168us; 2169us; 2170us; 2171us; 2172us; 2173us; 2174us; 2175us; 2182us; 2183us; 2186us; 2188us; 2189us; 2191us; 2193us; 2194us; 2196us; 2197us; 2199us; 2201us; 2202us; 2204us; 2206us; 2207us; 2209us; 2211us; 2218us; 2219us; 2221us; 2222us; 2229us; 2230us; 2251us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 1us; 3us; 3us; 1us; 1us; 0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 4us; 4us; 2us; 4us; 2us; 4us; 2us; 2us; 4us; 2us; 4us; 3us; 7us; 5us; 6us; 4us; 4us; 8us; 5us; 5us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 5us; 4us; 2us; 4us; 3us; 1us; 3us; 1us; 0us; 3us; 1us; 5us; 3us; 1us; 1us; 0us; 1us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 2us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 5us; 3us; 3us; 1us; 0us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 6us; 3us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 2us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 0us; 3us; 1us; 0us; 3us; 1us; 0us; 3us; 4us; 2us; 3us; 1us; 2us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 3us; 3us; 4us; 2us; 1us; 1us; 3us; 1us; 3us; 4us; 0us; 2us; 1us; 2us; 4us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 29us; 29us; 29us; 30us; 30us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 31us; 32us; 32us; 33us; 33us; 34us; 34us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 37us; 38us; 38us; 38us; 39us; 39us; 40us; 40us; 41us; 41us; 42us; 43us; 43us; 44us; 44us; 44us; 45us; 45us; 46us; 46us; 47us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 51us; 51us; 52us; 52us; 53us; 53us; 54us; 55us; 55us; 56us; 56us; 57us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 16389us; 65535us; 16392us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 16405us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16437us; 16438us; 65535us; 16439us; 16441us; 65535us; 16442us; 16443us; 16444us; 16445us; 65535us; 65535us; 65535us; 65535us; 16447us; 65535us; 16448us; 65535us; 65535us; 16449us; 65535us; 16450us; 65535us; 65535us; 16451us; 65535us; 65535us; 16452us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 16454us; 65535us; 16455us; 16456us; 65535us; 65535us; 65535us; 65535us; 65535us; 16458us; 65535us; 65535us; 16460us; 65535us; 16463us; 65535us; 65535us; 65535us; 16465us; 16467us; 16468us; 16470us; 65535us; 16473us; 65535us; 16474us; 16475us; 16476us; 16477us; 16478us; 65535us; 16479us; 16480us; 65535us; 65535us; 16481us; 65535us; 65535us; 16482us; 65535us; 65535us; 16483us; 65535us; 65535us; 16484us; 65535us; 16485us; 16487us; 16488us; 65535us; 65535us; 16490us; 16491us; 65535us; 65535us; 16492us; 65535us; 16494us; 65535us; 65535us; 65535us; 65535us; 16495us; 65535us; 65535us; 16497us; 65535us; 65535us; 16500us; 16502us; 16503us; 16504us; 16505us; 16506us; 16509us; 16510us; 16511us; 16512us; 16513us; 16514us; 16516us; 65535us; 65535us; 16517us; 65535us; 65535us; 65535us; 65535us; 16521us; 16522us; 16523us; 65535us; 65535us; 65535us; 65535us; 65535us; 16524us; 16525us; 65535us; 65535us; 16526us; 65535us; 65535us; 16528us; 65535us; 65535us; 16530us; 65535us; 65535us; 16531us; 65535us; 65535us; 16532us; 65535us; 16533us; 65535us; 65535us; 16534us; 65535us; 65535us; 65535us; 65535us; 16538us; 65535us; 65535us; 65535us; 16540us; 16541us; 65535us; 65535us; 16543us; 16544us; 65535us; 65535us; 16546us; 65535us; 65535us; 16549us; 65535us; 65535us; 65535us; 65535us; 65535us; 16551us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16556us; 16557us; 16558us; 16559us; 16560us; 16561us; 16562us; 65535us; 16563us; 65535us; 65535us; 16564us; 65535us; 65535us; 16565us; 65535us; 16566us; 65535us; 65535us; 16569us; 65535us; 65535us; 16571us; 65535us; 65535us; 65535us; 16572us; 65535us; 16574us; 65535us; 16576us; 65535us; 16577us; |]
let _fsyacc_reductions ()  =    [| 
# 725 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FsMiniMAL.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProgram));
# 734 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                       (List.rev _1, parseState.ParserLocalStore) 
                   )
# 115 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 746 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                       ([], parseState.ParserLocalStore) 
                   )
# 116 "Parser.fsy"
                 : Syntax.command list * System.Collections.Generic.IDictionary<string, obj>));
# 756 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                              _3 :: _1 
                   )
# 119 "Parser.fsy"
                 : 'Command_list));
# 769 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _3) :: _1 
                   )
# 120 "Parser.fsy"
                 : 'Command_list));
# 781 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                              _1 :: [] 
                   )
# 121 "Parser.fsy"
                 : 'Command_list));
# 792 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                              make_cmd parseState (SCexpr _1) :: [] 
                   )
# 122 "Parser.fsy"
                 : 'Command_list));
# 803 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                         () 
                   )
# 125 "Parser.fsy"
                 : 'Opt_semi));
# 813 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                         () 
                   )
# 126 "Parser.fsy"
                 : 'Opt_semi));
# 823 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                              make_cmd parseState (SCval _2) 
                   )
# 129 "Parser.fsy"
                 : 'Definition));
# 834 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                              make_cmd parseState (SCfun _2) 
                   )
# 130 "Parser.fsy"
                 : 'Definition));
# 845 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                              make_cmd parseState (SCvar _2) 
                   )
# 131 "Parser.fsy"
                 : 'Definition));
# 856 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                              make_cmd parseState (SCtype _2) 
                   )
# 132 "Parser.fsy"
                 : 'Definition));
# 867 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                              make_cmd parseState (SChide (_2)) 
                   )
# 133 "Parser.fsy"
                 : 'Definition));
# 878 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                              make_cmd parseState (SCremove _2) 
                   )
# 134 "Parser.fsy"
                 : 'Definition));
# 889 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                              make_cmd parseState (SCexn _2) 
                   )
# 135 "Parser.fsy"
                 : 'Definition));
# 900 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                              make_cmd parseState (SClex _3) 
                   )
# 136 "Parser.fsy"
                 : 'Definition));
# 911 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Value_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                                  (_1,_2) :: _4 
                   )
# 139 "Parser.fsy"
                 : 'Value_def));
# 924 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                  [_1,_2] 
                   )
# 140 "Parser.fsy"
                 : 'Value_def));
# 936 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Function_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                             (_1,_2) :: _4 
                   )
# 143 "Parser.fsy"
                 : 'Function_def));
# 949 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Equation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                             (_1,_2) :: [] 
                   )
# 144 "Parser.fsy"
                 : 'Function_def));
# 961 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                              (_1,_2) :: _4 
                   )
# 147 "Parser.fsy"
                 : 'Var_def));
# 974 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                              [_1,_2] 
                   )
# 148 "Parser.fsy"
                 : 'Var_def));
# 986 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_def)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                           make_expr parseState (SEfn (_1, _2)) 
                   )
# 151 "Parser.fsy"
                 : 'Equation));
# 998 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                              make_expr parseState (SEtype (_4,_2)) 
                   )
# 154 "Parser.fsy"
                 : 'Expression_def));
# 1010 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                              _2 
                   )
# 155 "Parser.fsy"
                 : 'Expression_def));
# 1021 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                                                                              make_expr parseState (SEfn (_2, _4)) 
                   )
# 160 "Parser.fsy"
                 : 'Expression));
# 1033 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                                                                              make_expr parseState (SEset (_1, _3)) 
                   )
# 161 "Parser.fsy"
                 : 'Expression));
# 1045 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                                                              make_ternop parseState ".[]<-" _1 _4 _7 
                   )
# 162 "Parser.fsy"
                 : 'Expression));
# 1058 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                                                                              make_expr parseState (SEsetfield (_1, _3, _5)) 
                   )
# 163 "Parser.fsy"
                 : 'Expression));
# 1071 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                                                                              make_expr parseState (SEifthenelse (_2, _4, Some _6)) 
                   )
# 164 "Parser.fsy"
                 : 'Expression));
# 1084 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                                                                              make_expr parseState (SEifthenelse (_2, _4, None)) 
                   )
# 165 "Parser.fsy"
                 : 'Expression));
# 1096 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                                                                              make_expr parseState (SEwhile (_2, _4)) 
                   )
# 166 "Parser.fsy"
                 : 'Expression));
# 1108 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Dir_flag)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                                                                              make_expr parseState (SEfor (_2, _4, _5, _6, _8)) 
                   )
# 167 "Parser.fsy"
                 : 'Expression));
# 1123 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                                                                              make_expr parseState (SEcase (_2, _5)) 
                   )
# 168 "Parser.fsy"
                 : 'Expression));
# 1136 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                                                                                              make_expr parseState (SEtry (_2, _5)) 
                   )
# 169 "Parser.fsy"
                 : 'Expression));
# 1149 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                                                                              make_expr parseState (SEfn ([make_pat parseState (SPid "$")], make_expr parseState (SEcase (make_expr parseState (SEid "$"), _2)))) 
                   )
# 170 "Parser.fsy"
                 : 'Expression));
# 1160 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                                                                              make_minus_expr parseState _1 _2 
                   )
# 171 "Parser.fsy"
                 : 'Expression));
# 1172 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                                                                              make_unop parseState _1 _2 
                   )
# 172 "Parser.fsy"
                 : 'Expression));
# 1184 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 173 "Parser.fsy"
                 : 'Expression));
# 1197 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 174 "Parser.fsy"
                 : 'Expression));
# 1210 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 175 "Parser.fsy"
                 : 'Expression));
# 1223 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 176 "Parser.fsy"
                 : 'Expression));
# 1236 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 177 "Parser.fsy"
                 : 'Expression));
# 1249 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                                                              make_binop parseState _2 _1 _3 
                   )
# 178 "Parser.fsy"
                 : 'Expression));
# 1262 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                                                                              make_binop parseState "=" _1 _3 
                   )
# 179 "Parser.fsy"
                 : 'Expression));
# 1274 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                                                              make_binop parseState "==" _1 _3 
                   )
# 180 "Parser.fsy"
                 : 'Expression));
# 1286 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                                                              make_binop parseState "*" _1 _3 
                   )
# 181 "Parser.fsy"
                 : 'Expression));
# 1298 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                                                              make_binop parseState "&&" _1 _3 
                   )
# 182 "Parser.fsy"
                 : 'Expression));
# 1310 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                                                              make_binop parseState "||" _1 _3 
                   )
# 183 "Parser.fsy"
                 : 'Expression));
# 1322 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                                                                              make_unop parseState "::" (make_expr parseState (SEtuple [_1;_3])) 
                   )
# 184 "Parser.fsy"
                 : 'Expression));
# 1334 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                                                                                              make_binop parseState ":=" _1 _3 
                   )
# 185 "Parser.fsy"
                 : 'Expression));
# 1346 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                                                                              make_binop parseState "<<" _1 _3 
                   )
# 186 "Parser.fsy"
                 : 'Expression));
# 1358 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                                                                              _1 
                   )
# 187 "Parser.fsy"
                 : 'Expression));
# 1369 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                               match _1 with [e] -> e | hd :: tl -> make_expr parseState (SEapply (hd, tl)) | [] -> raise (exn()) 
                   )
# 190 "Parser.fsy"
                 : 'Expression_1));
# 1380 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 193 "Parser.fsy"
                 : 'Expression_2_list));
# 1392 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                            [_1] 
                   )
# 194 "Parser.fsy"
                 : 'Expression_2_list));
# 1403 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                                             make_expr parseState (SEid _1) 
                   )
# 197 "Parser.fsy"
                 : 'Expression_2));
# 1414 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                                             make_string parseState _1 
                   )
# 198 "Parser.fsy"
                 : 'Expression_2));
# 1425 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                                             make_expr parseState (SEint _1) 
                   )
# 199 "Parser.fsy"
                 : 'Expression_2));
# 1436 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                                                             make_expr parseState (SEchar _1) 
                   )
# 200 "Parser.fsy"
                 : 'Expression_2));
# 1447 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                                                             make_expr parseState (SEfloat _1) 
                   )
# 201 "Parser.fsy"
                 : 'Expression_2));
# 1458 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                                                             make_unop parseState "!" _2 
                   )
# 202 "Parser.fsy"
                 : 'Expression_2));
# 1469 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                                             make_expr parseState (SEgetfield (_1, _3)) 
                   )
# 203 "Parser.fsy"
                 : 'Expression_2));
# 1481 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_2)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                                                             make_binop parseState ".[]" _1 _4 
                   )
# 204 "Parser.fsy"
                 : 'Expression_2));
# 1493 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                                                             match _2 with [e] -> e | l -> make_expr parseState (SEtuple l) 
                   )
# 205 "Parser.fsy"
                 : 'Expression_2));
# 1504 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Operator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                                                                 make_ident parseState _2 
                   )
# 206 "Parser.fsy"
                 : 'Expression_2));
# 1515 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                                             make_expr parseState (SEarray _2) 
                   )
# 207 "Parser.fsy"
                 : 'Expression_2));
# 1526 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                                                             List.foldBack (fun a l -> make_unop parseState "::" (make_expr parseState (SEtuple [a;l]))) _2 (make_ident parseState "[]") 
                   )
# 208 "Parser.fsy"
                 : 'Expression_2));
# 1537 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                                                             make_expr parseState (SErecord (None, _2)) 
                   )
# 209 "Parser.fsy"
                 : 'Expression_2));
# 1548 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_1)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                                             make_expr parseState (SErecord (Some _2, _4)) 
                   )
# 210 "Parser.fsy"
                 : 'Expression_2));
# 1560 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Command_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                                                             make_expr parseState (SEbegin (List.rev _2)) 
                   )
# 211 "Parser.fsy"
                 : 'Expression_2));
# 1572 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                                                             make_expr parseState (SEbegin []) 
                   )
# 212 "Parser.fsy"
                 : 'Expression_2));
# 1582 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_when_clause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                                                                           (_1, _2, _4) 
                   )
# 215 "Parser.fsy"
                 : 'Matching));
# 1595 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 218 "Parser.fsy"
                 : 'Matching_list));
# 1607 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Matching)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                                     [_1] 
                   )
# 219 "Parser.fsy"
                 : 'Matching_list));
# 1618 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 222 "Parser.fsy"
                 : 'Expression_comma_list));
# 1630 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "Parser.fsy"
                                                                       [_1] 
                   )
# 223 "Parser.fsy"
                 : 'Expression_comma_list));
# 1641 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                                                       [] 
                   )
# 224 "Parser.fsy"
                 : 'Expression_comma_list));
# 1651 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                                          make_expr parseState (SEtype (_1, _3)) 
                   )
# 227 "Parser.fsy"
                 : 'Expr_may_type));
# 1663 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                                          _1 
                   )
# 228 "Parser.fsy"
                 : 'Expr_may_type));
# 1674 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 231 "Parser.fsy"
                 : 'Label_expr_list));
# 1687 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                                          [_1, _3] 
                   )
# 232 "Parser.fsy"
                 : 'Label_expr_list));
# 1699 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                    dirflag.Upto 
                   )
# 235 "Parser.fsy"
                 : 'Dir_flag));
# 1709 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                    dirflag.Downto 
                   )
# 236 "Parser.fsy"
                 : 'Dir_flag));
# 1719 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                                         () 
                   )
# 239 "Parser.fsy"
                 : 'Opt_bar));
# 1729 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                         () 
                   )
# 240 "Parser.fsy"
                 : 'Opt_bar));
# 1739 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                             None 
                   )
# 243 "Parser.fsy"
                 : 'Opt_when_clause));
# 1749 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                                             Some _2 
                   )
# 244 "Parser.fsy"
                 : 'Opt_when_clause));
# 1760 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                                                         make_pat parseState (SPid _1) 
                   )
# 249 "Parser.fsy"
                 : 'Pattern_0));
# 1771 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                                                         make_pat parseState SPany 
                   )
# 250 "Parser.fsy"
                 : 'Pattern_0));
# 1781 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                                                         make_pat_string parseState _1 
                   )
# 251 "Parser.fsy"
                 : 'Pattern_0));
# 1792 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                                                         make_pat parseState (SPint _1) 
                   )
# 252 "Parser.fsy"
                 : 'Pattern_0));
# 1803 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                                                         make_pat parseState (SPchar _1) 
                   )
# 253 "Parser.fsy"
                 : 'Pattern_0));
# 1814 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                                                         make_pat parseState (SPfloat _1) 
                   )
# 254 "Parser.fsy"
                 : 'Pattern_0));
# 1825 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                                                         make_pat parseState (SPint(make_minus _2)) 
                   )
# 255 "Parser.fsy"
                 : 'Pattern_0));
# 1837 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                                                         make_pat parseState (SPfloat(- _2)) 
                   )
# 256 "Parser.fsy"
                 : 'Pattern_0));
# 1849 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                                                         match _2 with [pat] -> pat | l -> make_pat parseState (SPtuple l) 
                   )
# 257 "Parser.fsy"
                 : 'Pattern_0));
# 1860 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                                                         List.foldBack (make_cons_pat parseState) _2 { sp_desc = SPid "[]" ; sp_loc = get_loc parseState } 
                   )
# 258 "Parser.fsy"
                 : 'Pattern_0));
# 1871 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                                                         make_pat parseState (SParray _2) 
                   )
# 259 "Parser.fsy"
                 : 'Pattern_0));
# 1882 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                                                         make_pat parseState (SPrecord _2) 
                   )
# 260 "Parser.fsy"
                 : 'Pattern_0));
# 1893 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 263 "Parser.fsy"
                 : 'Pattern_0_list));
# 1905 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 264 "Parser.fsy"
                                                      _1 :: [] 
                   )
# 264 "Parser.fsy"
                 : 'Pattern_0_list));
# 1916 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "Parser.fsy"
                                             _1 
                   )
# 267 "Parser.fsy"
                 : 'Pattern_1));
# 1927 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_0)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "Parser.fsy"
                                             make_pat parseState (SPapply (_1, _2)) 
                   )
# 268 "Parser.fsy"
                 : 'Pattern_1));
# 1939 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "Parser.fsy"
                                                            _1 
                   )
# 271 "Parser.fsy"
                 : 'Pattern_2));
# 1950 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                                            make_cons_pat parseState _1 _3 
                   )
# 272 "Parser.fsy"
                 : 'Pattern_2));
# 1962 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 275 "Parser.fsy"
                                                     _1 
                   )
# 275 "Parser.fsy"
                 : 'Pattern_3));
# 1973 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "Parser.fsy"
                                                     make_pat parseState (SPor(_1, _3)) 
                   )
# 276 "Parser.fsy"
                 : 'Pattern_3));
# 1985 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "Parser.fsy"
                                                _1 
                   )
# 279 "Parser.fsy"
                 : 'Pattern));
# 1996 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_3)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "Parser.fsy"
                                                make_pat parseState (SPas (_1, _3)) 
                   )
# 280 "Parser.fsy"
                 : 'Pattern));
# 2008 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_pattern_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                                                          (_1, _3) :: _5 
                   )
# 283 "Parser.fsy"
                 : 'Label_pattern_list));
# 2021 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 284 "Parser.fsy"
                                                                          (_1, _3) :: [] 
                   )
# 284 "Parser.fsy"
                 : 'Label_pattern_list));
# 2033 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "Parser.fsy"
                                                                       _1 :: _3 
                   )
# 287 "Parser.fsy"
                 : 'Pattern_comma_list));
# 2045 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern_may_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "Parser.fsy"
                                                                       _1 :: [] 
                   )
# 288 "Parser.fsy"
                 : 'Pattern_comma_list));
# 2056 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 289 "Parser.fsy"
                                                                       [] 
                   )
# 289 "Parser.fsy"
                 : 'Pattern_comma_list));
# 2066 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "Parser.fsy"
                                                     make_pat parseState (SPtype (_1, _3)) 
                   )
# 292 "Parser.fsy"
                 : 'Pattern_may_type));
# 2078 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Pattern)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 293 "Parser.fsy"
                                                     _1 
                   )
# 293 "Parser.fsy"
                 : 'Pattern_may_type));
# 2089 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "Parser.fsy"
                                                _1 
                   )
# 296 "Parser.fsy"
                 : 'Operator));
# 2100 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 297 "Parser.fsy"
                                                _1 
                   )
# 297 "Parser.fsy"
                 : 'Operator));
# 2111 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                                                _1 
                   )
# 298 "Parser.fsy"
                 : 'Operator));
# 2122 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "Parser.fsy"
                                                _1 
                   )
# 299 "Parser.fsy"
                 : 'Operator));
# 2133 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "Parser.fsy"
                                                _1 
                   )
# 300 "Parser.fsy"
                 : 'Operator));
# 2144 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                                _1 
                   )
# 301 "Parser.fsy"
                 : 'Operator));
# 2155 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                _1 
                   )
# 302 "Parser.fsy"
                 : 'Operator));
# 2166 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "Parser.fsy"
                                                "*" 
                   )
# 303 "Parser.fsy"
                 : 'Operator));
# 2176 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "Parser.fsy"
                                                "=" 
                   )
# 304 "Parser.fsy"
                 : 'Operator));
# 2186 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                "&&" 
                   )
# 305 "Parser.fsy"
                 : 'Operator));
# 2196 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "Parser.fsy"
                                                "||" 
                   )
# 306 "Parser.fsy"
                 : 'Operator));
# 2206 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "Parser.fsy"
                                                "==" 
                   )
# 307 "Parser.fsy"
                 : 'Operator));
# 2216 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 308 "Parser.fsy"
                                                ":=" 
                   )
# 308 "Parser.fsy"
                 : 'Operator));
# 2226 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 309 "Parser.fsy"
                                                "!" 
                   )
# 309 "Parser.fsy"
                 : 'Operator));
# 2236 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "Parser.fsy"
                                                "<<" 
                   )
# 310 "Parser.fsy"
                 : 'Operator));
# 2246 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "Parser.fsy"
                                                                   make_typ parseState (STarrow(type_expr_of_type_star_list parseState _1, _3)) 
                   )
# 315 "Parser.fsy"
                 : 'Type_expr));
# 2258 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 316 "Parser.fsy"
                                                                   type_expr_of_type_star_list parseState _1 
                   )
# 316 "Parser.fsy"
                 : 'Type_expr));
# 2269 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "Parser.fsy"
                                                             _3 :: _1 
                   )
# 319 "Parser.fsy"
                 : 'Type_star_list));
# 2281 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "Parser.fsy"
                                                             [_1] 
                   )
# 320 "Parser.fsy"
                 : 'Type_star_list));
# 2292 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "Parser.fsy"
                                                                                 make_typ parseState (STvar _1) 
                   )
# 323 "Parser.fsy"
                 : 'Simple_type));
# 2303 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "Parser.fsy"
                                                                                 mark_as_typename parseState 1; make_typ parseState (STconstr(_1, [])) 
                   )
# 324 "Parser.fsy"
                 : 'Simple_type));
# 2314 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Simple_type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "Parser.fsy"
                                                                                 mark_as_typename parseState 2; make_typ parseState (STconstr(_2, [_1])) 
                   )
# 325 "Parser.fsy"
                 : 'Simple_type));
# 2326 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 326 "Parser.fsy"
                                                                                 mark_as_typename parseState 6; make_typ parseState (STconstr(_6, _2 :: _4)) 
                   )
# 326 "Parser.fsy"
                 : 'Simple_type));
# 2339 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 327 "Parser.fsy"
                                                                                 _2 
                   )
# 327 "Parser.fsy"
                 : 'Simple_type));
# 2350 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_comma_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "Parser.fsy"
                                                             _1 :: _3 
                   )
# 330 "Parser.fsy"
                 : 'Type_comma_list));
# 2362 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "Parser.fsy"
                                                             [_1] 
                   )
# 331 "Parser.fsy"
                 : 'Type_comma_list));
# 2373 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 336 "Parser.fsy"
                 : 'Typedef_list));
# 2385 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "Parser.fsy"
                                                      [_1] 
                   )
# 337 "Parser.fsy"
                 : 'Typedef_list));
# 2396 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_params)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Typedef_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "Parser.fsy"
                                                            mark_as_typename parseState 2
                                                            make_typedef parseState _1 _2 _3 
                   )
# 340 "Parser.fsy"
                 : 'Typedef));
# 2410 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_bar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 344 "Parser.fsy"
                                                            SKvariant _3 
                   )
# 344 "Parser.fsy"
                 : 'Typedef_decl));
# 2422 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "Parser.fsy"
                                                            SKrecord _3 
                   )
# 345 "Parser.fsy"
                 : 'Typedef_decl));
# 2433 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 346 "Parser.fsy"
                                                            SKabbrev _2 
                   )
# 346 "Parser.fsy"
                 : 'Typedef_decl));
# 2444 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 349 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 349 "Parser.fsy"
                 : 'Constr_decl));
# 2456 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Constr1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 350 "Parser.fsy"
                                                          [_1] 
                   )
# 350 "Parser.fsy"
                 : 'Constr_decl));
# 2467 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_star_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "Parser.fsy"
                                                     (_1, List.rev _3) 
                   )
# 353 "Parser.fsy"
                 : 'Constr1_decl));
# 2479 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "Parser.fsy"
                                                     (_1, []) 
                   )
# 354 "Parser.fsy"
                 : 'Constr1_decl));
# 2490 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "Parser.fsy"
                                                          _1 :: _3 
                   )
# 357 "Parser.fsy"
                 : 'Label_decl));
# 2502 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Label1_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "Parser.fsy"
                                                          [_1] 
                   )
# 358 "Parser.fsy"
                 : 'Label_decl));
# 2513 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_mutable)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "Parser.fsy"
                                                               (_2, _4, _1) 
                   )
# 361 "Parser.fsy"
                 : 'Label1_decl));
# 2526 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "Parser.fsy"
                                           access.Mutable 
                   )
# 364 "Parser.fsy"
                 : 'Opt_mutable));
# 2536 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 365 "Parser.fsy"
                                           access.Immutable 
                   )
# 365 "Parser.fsy"
                 : 'Opt_mutable));
# 2546 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "Parser.fsy"
                                                         _2 
                   )
# 368 "Parser.fsy"
                 : 'Type_params));
# 2557 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 369 "Parser.fsy"
                                                         [_1] 
                   )
# 369 "Parser.fsy"
                 : 'Type_params));
# 2568 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 370 "Parser.fsy"
                                                         [] 
                   )
# 370 "Parser.fsy"
                 : 'Type_params));
# 2578 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_var_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "Parser.fsy"
                                                        _1 :: _3 
                   )
# 373 "Parser.fsy"
                 : 'Type_var_list));
# 2590 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "Parser.fsy"
                                                        [_1] 
                   )
# 374 "Parser.fsy"
                 : 'Type_var_list));
# 2601 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 379 "Parser.fsy"
                                                               () 
                   )
# 379 "Parser.fsy"
                 : 'Lexer_def_list));
# 2611 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Opt_semi)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_def_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 380 "Parser.fsy"
                                                               () 
                   )
# 380 "Parser.fsy"
                 : 'Lexer_def_list));
# 2624 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "Parser.fsy"
                                                            () 
                   )
# 383 "Parser.fsy"
                 : 'Lexer_def));
# 2636 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "Parser.fsy"
                                                            () 
                   )
# 384 "Parser.fsy"
                 : 'Lexer_def));
# 2647 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "Parser.fsy"
                                                               () 
                   )
# 387 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2659 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 388 "Parser.fsy"
                                             () 
                   )
# 388 "Parser.fsy"
                 : 'Lexer_regexp_1));
# 2670 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 391 "Parser.fsy"
                                                           () 
                   )
# 391 "Parser.fsy"
                 : 'Lexer_regexp_2));
# 2682 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "Parser.fsy"
                                            () 
                   )
# 392 "Parser.fsy"
                 : 'Lexer_regexp_2));
# 2693 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "Parser.fsy"
                                                   () 
                   )
# 395 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2705 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 396 "Parser.fsy"
                                                 () 
                   )
# 396 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2716 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_3)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 397 "Parser.fsy"
                                                  () 
                   )
# 397 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2727 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 398 "Parser.fsy"
                                        () 
                   )
# 398 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2738 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 399 "Parser.fsy"
                                        () 
                   )
# 399 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2748 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 400 "Parser.fsy"
                                        () 
                   )
# 400 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2759 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 401 "Parser.fsy"
                                        () 
                   )
# 401 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2770 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 402 "Parser.fsy"
                                                          () 
                   )
# 402 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2781 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 403 "Parser.fsy"
                                                               () 
                   )
# 403 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2792 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 404 "Parser.fsy"
                                                                      () 
                   )
# 404 "Parser.fsy"
                 : 'Lexer_regexp_3));
# 2804 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_2)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 407 "Parser.fsy"
                                                             () 
                   )
# 407 "Parser.fsy"
                 : 'Lexer_charset_1));
# 2816 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_charset_2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 408 "Parser.fsy"
                                             () 
                   )
# 408 "Parser.fsy"
                 : 'Lexer_charset_1));
# 2827 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 411 "Parser.fsy"
                                                         () 
                   )
# 411 "Parser.fsy"
                 : 'Lexer_charset_2));
# 2838 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : char)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 412 "Parser.fsy"
                                                         () 
                   )
# 412 "Parser.fsy"
                 : 'Lexer_charset_2));
# 2851 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 415 "Parser.fsy"
                                                            [_1] 
                   )
# 415 "Parser.fsy"
                 : 'Lexer_rule_list));
# 2862 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 416 "Parser.fsy"
                                                            _1 :: _3 
                   )
# 416 "Parser.fsy"
                 : 'Lexer_rule_list));
# 2874 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 419 "Parser.fsy"
                                                                              (_1, _2, _4) 
                   )
# 419 "Parser.fsy"
                 : 'Lexer_rule));
# 2887 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 422 "Parser.fsy"
                                                   [] 
                   )
# 422 "Parser.fsy"
                 : 'Lexer_rule_args));
# 2897 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 423 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 423 "Parser.fsy"
                 : 'Lexer_rule_args));
# 2909 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "Parser.fsy"
                                                                      [_1] 
                   )
# 426 "Parser.fsy"
                 : 'Lexer_rule_case_list));
# 2920 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_rule_case_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 427 "Parser.fsy"
                                                                  _1 :: _2 
                   )
# 427 "Parser.fsy"
                 : 'Lexer_rule_case_list));
# 2932 "Parser.fs"
        (fun (parseState : FsMiniMAL.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Lexer_regexp_1)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expression)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 430 "Parser.fsy"
                                                                     (_1, _3) 
                   )
# 430 "Parser.fsy"
                 : 'Lexer_rule_case));
|]
# 2945 "Parser.fs"
let tables () : FsMiniMAL.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FsMiniMAL.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 72;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Program lexer lexbuf : Syntax.command list * System.Collections.Generic.IDictionary<string, obj> =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
